<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[翔妖除魔的个人博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://sunxiang0918.github.io//"/>
  <updated>2016-10-09T14:20:56.000Z</updated>
  <id>http://sunxiang0918.github.io//</id>
  
  <author>
    <name><![CDATA[翔妖除魔]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用Mockito和SpringTest进行单元测试]]></title>
    <link href="http://sunxiang0918.github.io/2016/03/28/%E4%BD%BF%E7%94%A8Mockito%E5%92%8CSpringTest%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://sunxiang0918.github.io/2016/03/28/使用Mockito和SpringTest进行单元测试/</id>
    <published>2016-03-28T14:19:04.000Z</published>
    <updated>2016-10-09T14:20:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="使用Mockito和SpringTest进行单元测试">使用Mockito和SpringTest进行单元测试</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="使用Mockito和SpringTest进行单元测试">使用Mockito和SpringTest进行单元测试</h1>]]>
    </summary>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<转> Swift 2.2 的新特性]]></title>
    <link href="http://sunxiang0918.github.io/2016/03/24/Swift-2-2-%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://sunxiang0918.github.io/2016/03/24/Swift-2-2-的新特性/</id>
    <published>2016-03-24T02:16:54.000Z</published>
    <updated>2016-03-24T03:16:52.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Swift_2-2_的新特性">Swift 2.2 的新特性</h1><p>Swift 2.2 随着 iOS 9.3 一同闪亮登场，相较于 Swift 2.1， 2.2 版本做出了许多调整，从其调整方向上我们也能一窥 Swift 3.0 的影子，以下内容主要来自于苹果 Swift 官方 <a href="https://swift.org/blog/swift-2-2-released/" target="_blank" rel="external">Blog</a>，接下来就让我们进入正题，一睹 Swift 2.2 的庐山真面目：</p>
<h2 id="允许更多的关键字来做参数标签">允许更多的关键字来做参数标签</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md" target="_blank" rel="external">SE-0001: Allow (most) keywords as argument labels</a><br>参数标签是 Swift 中非常 cool 的一个特性，我们可以这么写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>.stride(to: <span class="number">9</span>, by: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数很简单，由 1 开始，每次加 2，返回一系列的值，最后的结果要小于 9：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1 3 5 7</span></span><br></pre></td></tr></table></figure>
<p>上面的函数如果参数前没有 <code>to</code> 或 <code>by</code> 标签，即 <code>stride(9, 2)</code> 那么代码将失去自解释性，别人也很难猜到这些参数的实际用途。<br>又假设我们要获取集合中某个值对应的索引，可以声明如下方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf(value, <span class="keyword">in</span>: collection)</span><br></pre></td></tr></table></figure>
<p>但是注意在 Swift 2.2 之前的版本，上面这种写法 Xcode 会报错，因为 in 是一个关键字，想要使用这些关键字必须加上单引号：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf(value, `<span class="keyword">in</span>`: collection)</span><br></pre></td></tr></table></figure>
<p>以前我们定义新的 API 的时候，通常也要避免与这些关键字撞车，比如用 <code>within</code> 代替 <code>in</code>。在我们导入 Objective-C APIs 的时候通常会碰到这些问题：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event.touchesMatching([.<span class="type">Began</span>, .<span class="type">Moved</span>], `<span class="keyword">in</span>`: view)</span><br><span class="line"><span class="type">NSXPCInterface</span>(`<span class="class"><span class="keyword">protocol</span>`: <span class="title">SomeProtocolType</span>.<span class="title">Protocol</span>)</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>而在 Swift 2.2，我们开放了除 <code>inout</code>, <code>var</code> 和 <code>let</code> 以外所有的关键字，现在他们都可以作为参数 label 来使用了（而不用加单引号）关于语法的影响主要注意以下三方面：</p>
<ol>
<li>函数调用中的关键字可以随意使用了，不会产生什么歧义，因为方法调用时 “:” 总是伴随着参数标签出现。</li>
<li><p>函数/子类化/初始化 声明：除 <code>inout</code>, <code>var</code> 和 <code>let</code> 这三个关键字之外，使用其他关键字没有什么歧义，因为这些关键字后面总是跟随着 <code>‘:’</code> 或 <code>‘_’</code> 比如：</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">touchesMatching</span><span class="params">(phase: NSTouchPhase, <span class="keyword">in</span> view: NSView?)</span></span> -&gt; <span class="type">Set</span>&lt;<span class="type">NSTouch</span>&gt;</span><br></pre></td></tr></table></figure>
<p> 假如你想在函数声明中使用 <code>inout</code>, <code>var</code> 和 <code>let</code> 做为参数名的话，还是要加单引号</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">addParameter</span><span class="params">(name: String, `<span class="keyword">inout</span>`: Bool)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果在函数类型中这三个关键字（<code>inout</code>，<code>var</code>，<code>let</code>）出现的话，是不需要加单引号的，这是因为在这种情况下参数名后总是跟着 <code>‘:’</code></p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">NSTouchPhase</span>, <span class="keyword">in</span>: <span class="type">NSView</span>?) -&gt; <span class="type">Set</span>&lt;<span class="type">NSTouch</span>&gt;</span><br><span class="line">(<span class="type">String</span>, <span class="keyword">inout</span>: <span class="type">Bool</span>) -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="元组对象可以进行比较操作了">元组对象可以进行比较操作了</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0015-tuple-comparison-operators.md" target="_blank" rel="external">SE-0015: Tuple comparison operators</a><br>元组是以逗号分割的值列表：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> developer = (<span class="string">"Numbbbbb"</span>, <span class="string">"Shanks"</span>)</span><br><span class="line"><span class="keyword">let</span> designer = (<span class="string">"Cee"</span>, <span class="string">"Sai"</span>)</span><br></pre></td></tr></table></figure>
<p>以前想要比较两个元组，我们需要自己重载操作符</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> ==  <span class="params">(t1: <span class="params">(T, T)</span></span></span>, t2: (<span class="type">T</span>, <span class="type">T</span>)) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t1.<span class="number">0</span> == t2.<span class="number">0</span> &amp;&amp; t1.<span class="number">1</span> == t2.<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抛开每次都要写这一坨无趣的代码不说，而且只能比较包含两个元素的元组。不过在 Swift 2.2 中，我们可以直接比较两个元组了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> developer = (<span class="string">"Numbbbbb"</span>, <span class="string">"Shanks"</span>)</span><br><span class="line"><span class="keyword">let</span> designer = (<span class="string">"Cee"</span>, <span class="string">"Sai"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> developer == designer &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Matching tuples!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Non-matching tuples!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Swift 2.2 允许不超过 6 个元素的元组之间进行比较，限制元组的元素个数主要有两个原因：</p>
<ul>
<li>每一次比较都需要在基本库中添加额外的代码</li>
<li>元组的元素过多并不是一种好的编程风格，考虑用结构体代替</li>
</ul>
<p>可以尝试下面两个元组比较</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> developer = (<span class="string">"Numbbbbb"</span>, <span class="number">23</span>)</span><br><span class="line"><span class="keyword">let</span> designer = (<span class="string">"Cee"</span>, <span class="string">"Sai"</span>)</span><br></pre></td></tr></table></figure>
<p>不出意外地报错了：<br><img src="/img/2016/03/24/1.jpg" alt=""></p>
<p>我们重点关注下结尾的部分：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">note: overloads for <span class="string">'=='</span> exist with these partially matching parameter lists: ......</span><br><span class="line">((A, B), (A, B)), ((A, B, <span class="keyword">C</span>), (A, B, <span class="keyword">C</span>)), ((A, B, <span class="keyword">C</span>, <span class="keyword">D</span>), (A, B, <span class="keyword">C</span>, <span class="keyword">D</span>)), </span><br><span class="line">((A, B, <span class="keyword">C</span>, <span class="keyword">D</span>, <span class="keyword">E</span>), (A, B, <span class="keyword">C</span>, <span class="keyword">D</span>, <span class="keyword">E</span>)), ((A, B, <span class="keyword">C</span>, <span class="keyword">D</span>, <span class="keyword">E</span>, F), (A, B, <span class="keyword">C</span>, <span class="keyword">D</span>, <span class="keyword">E</span>, F))</span><br></pre></td></tr></table></figure>
<p>Swift 内部函数确实逐字比较了元组的元素，直到 (A, B, C, D, E, F)，没有超过 6 个元素。</p>
<h2 id="为_AnySequence-init_增加约束条件">为 AnySequence.init 增加约束条件</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md" target="_blank" rel="external">SE-0014: Constraining AnySequence.init</a></p>
<p>AnySequence 表示一个无类型的序列，他遵循 <code>SequenceType</code> 协议，而该协议拥有一个关联类型 <code>associatedtype SubSequence</code> ，而有时候我们需要 <code>SubSequence</code> 也要满足 <code>SequenceType</code> 协议<br>假如我们有一个 _SequenceBox</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">_SequenceBox</span>&lt;<span class="title">S</span> : <span class="title">SequenceType</span>&gt;</span><br><span class="line">    : <span class="title">_AnySequenceBox</span>&lt;<span class="title">S</span>.<span class="title">Generator</span>.<span class="title">Element</span>&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>为了确保 SubSequence 满足 SequenceType，要做如下限定：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">_SequenceBox</span>&lt;</span><br><span class="line">  <span class="title">S</span> : <span class="title">SequenceType</span></span><br><span class="line">  <span class="title">where</span></span><br><span class="line">    <span class="title">S</span>.<span class="title">SubSequence</span> : <span class="title">SequenceType</span>,</span><br><span class="line">    <span class="title">S</span>.<span class="title">SubSequence</span>.<span class="title">Generator</span>.<span class="title">Element</span> == <span class="title">S</span>.<span class="title">Generator</span>.<span class="title">Element</span>,</span><br><span class="line">    <span class="title">S</span>.<span class="title">SubSequence</span>.<span class="title">SubSequence</span> == <span class="title">S</span>.<span class="title">SubSequence</span></span><br><span class="line">&gt; : <span class="title">_AnySequenceBox</span>&lt;<span class="title">S</span>.<span class="title">Generator</span>.<span class="title">Element</span>&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>反过来，他也会影响 <strong>AnySequence.init</strong> 做一些限定：</p>
<p>修改前的 <strong>AnySequence.init</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">struct</span> <span class="title">AnySequence</span>&lt;<span class="title">Element</span>&gt; : <span class="title">SequenceType</span> </span>&#123;</span><br><span class="line">  public <span class="keyword">init</span>&lt;</span><br><span class="line">    <span class="type">S</span>: <span class="type">SequenceType</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      <span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span></span><br><span class="line">  &gt;(<span class="number">_</span> base: <span class="type">S</span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改后的 <strong>AnySequence.init</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">struct</span> <span class="title">AnySequence</span>&lt;<span class="title">Element</span>&gt; : <span class="title">SequenceType</span> </span>&#123;</span><br><span class="line">  public <span class="keyword">init</span>&lt;</span><br><span class="line">    <span class="type">S</span>: <span class="type">SequenceType</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      <span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span>,</span><br><span class="line">      <span class="type">S</span>.<span class="type">SubSequence</span> : <span class="type">SequenceType</span>,</span><br><span class="line">      <span class="type">S</span>.<span class="type">SubSequence</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span>,</span><br><span class="line">      <span class="type">S</span>.<span class="type">SubSequence</span>.<span class="type">SubSequence</span> == <span class="type">S</span>.<span class="type">SubSequence</span></span><br><span class="line">  &gt;(<span class="number">_</span> base: <span class="type">S</span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上，这些约束应该被应用到 <code>SequenceType</code> 协议自身上（尽管就目前来看是不太可能了），同我们预期的那样每个 <code>SequenceType</code> 实现都已经自我满足。</p>
<h2 id="在声明相关类型时用_associatedtype_来替换_typealias">在声明相关类型时用 associatedtype 来替换 typealias</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md" target="_blank" rel="external">SE-0011: Replace typealias keyword with associatedtype for associated type declarations</a><br>在 Swift 2.2 以前的版本中关键字 <strong>typealias</strong> 可以用来声明两种类型</p>
<ol>
<li>类型别名（为已存在的类型起一个别名）</li>
<li>关联类型（作为占位符类型成为协议的一部分）</li>
</ol>
<p>以上两种声明应该使用不同的关键字，为此我们为关联类型准备了新的关键字 <strong>associatedtype</strong>，因此在 Swift 2.2 中 <strong>typealias</strong> 只能用做类型别名的声明，所以协议中使用的关联类型只能用 <strong>associatedtype</strong>，如果用了 <strong>typealias</strong> 就会报错：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    associatedtype <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span> <span class="comment">// error: cannot declare type alias inside protocol, use protocol extension instead</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应将 <strong>typealias</strong> 移到 extension 中去</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    associatedtype <span class="type">Container</span> : <span class="type">SequenceType</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Prot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Container</span>.<span class="type">Generator</span>.<span class="type">Element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="命名函数时带上参数标签">命名函数时带上参数标签</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md" target="_blank" rel="external">SE-0021: Naming Functions with Argument Labels</a><br>因为在 Swift 中，函数是一等公民，所以函数可以赋值给变量，当做普通值传递。为此我们需要一个函数类型来对该变量做限定。通常我们会使用函数名作为主要类型部分，但是有许多基本名字相同的函数，仅仅是参数或参数标签不同而已，比如 <strong>UIView</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">insertSubview</span><span class="params">(view: UIView, at index: Int)</span></span></span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">insertSubview</span><span class="params">(view: UIView, aboveSubview siblingSubview: UIView)</span></span></span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">insertSubview</span><span class="params">(view: UIView, belowSubview siblingSubview: UIView)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们调用时也是通过参数标签来区分不同的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someView.insertSubview(view, at: <span class="number">3</span>)</span><br><span class="line">someView.insertSubview(view, aboveSubview: otherView)</span><br><span class="line">someView.insertSubview(view, belowSubview: otherView)</span><br></pre></td></tr></table></figure>
<p>但是，当我们创建一个函数的引用时，就会产生一个歧义，即无法确定调用的是 UIView 的哪个方法</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let fn = someView<span class="class">.insertSubview</span> <span class="comment">// ambiguous: could be any of the three methods</span></span><br></pre></td></tr></table></figure>
<p>我们可以使用类型注解来消除歧义</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn: (<span class="type">UIView</span>, <span class="type">Int</span>) = someView.insertSubview    <span class="comment">// ok: uses insertSubview(_:at:)</span></span><br><span class="line"><span class="keyword">let</span> fn: (<span class="type">UIView</span>, <span class="type">UIView</span>) = someView.insertSubview <span class="comment">// error: still ambiguous!</span></span><br></pre></td></tr></table></figure>
<p>但是上面的代码后者因为 (UIView, UIView) 存在两个方法（aboveSubview 和 belowSubview），所以还是存在歧义，只能用闭包的方式来指名传递的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn: (<span class="type">UIView</span>, <span class="type">UIView</span>) = &#123; view, otherView <span class="keyword">in</span></span><br><span class="line">  button.insertSubview(view, aboveSubview: otherView)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做法太乏味了，Swift 2.2 现在允许我们将函数命名为：函数名 + 参数标签的组合来消除歧义：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = someView.insertSubview(<span class="number">_</span>:at:)</span><br><span class="line"><span class="keyword">let</span> fn1 = someView.insertSubview(<span class="number">_</span>:aboveSubview:)</span><br></pre></td></tr></table></figure>
<p>同样的语法也可以用做初始化的引用：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buttonFactory = <span class="type">UIButton</span>.<span class="keyword">init</span>(type:)</span><br></pre></td></tr></table></figure>
<p>为指定的方法生成一个 Objective-C 选择器：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getter = <span class="type">Selector</span>(<span class="type">NSDictionary</span>.insertSubview(<span class="number">_</span>:aboveSubview:)) <span class="comment">// produces insertSubview:aboveSubview:.</span></span><br></pre></td></tr></table></figure>
<h2 id="引用_Objective-C_的选择器方法">引用 Objective-C 的选择器方法</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md" target="_blank" rel="external">SE-0022: Referencing the Objective-C selector of a method</a><br>在 Swift 2，Objective-C selectors 通常会根据其字面值写成字符串常量，比如 <code>&quot;insertSubview:aboveSubview:&quot;</code> 这样比较容易出错，例如下面的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.rightBarButtonItem = <span class="type">UIBarButtonItem</span>(title: <span class="string">"Tap!"</span>, style: .<span class="type">Plain</span>, target: <span class="keyword">self</span>, action: <span class="string">"buttonTaped"</span>)</span><br></pre></td></tr></table></figure>
<p>如果你眼神够好，会发现我把 <code>buttonTapped</code> 写成了 <code>buttonTaped</code>，但 Xcode 也不会给我报错。这一切在 Swift 2.2 终于得到解决，字符串作为 selector 被 deprecated 了，今后该这么写 <code>#selector(buttonTapped)</code>，这样发生拼写错误，也能及时得到编译器的提醒。<br>即使在纯 Swift 环境中（完全与 Objective-C 完全无关），我们也可以通过 <strong>#selector(Swift 方法名)</strong> 的方式来实现 Swift 的 selector</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">control.sendAction(#selector(<span class="type">MyApplication</span>.doSomething), to: target, forEvent: event)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">  <span class="preprocessor">@objc</span>(jumpUpAndDown:)</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(sender: AnyObject?)</span></span> &#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个 Selector 的引用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sel = #selector(<span class="type">UIView</span>.insertSubview(<span class="number">_</span>:at:)) <span class="comment">// produces the Selector "insertSubview:atIndex:"</span></span><br></pre></td></tr></table></figure>
<h2 id="编译期_Swift_的版本检查">编译期 Swift 的版本检查</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md" target="_blank" rel="external">SE-0020: Swift Language Version Build Configuration</a><br>在大部分时候，随着 Swift 版本更新语法也会有较大调整，但是第三方类库的维护者们希望他们的库能够同时兼容不同版本的 Swift，目前可行的办法是同时维护多个分支来支持不同版本的语言。<br>Swift 2.2 提供了新的选项使你将同一个版本的 Swift 代码集中在同一个文件中，而编译器会在编译时选择具体的 Swift 版本来执行</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> <span class="built_in">swift</span>(&gt;=<span class="number">2.2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Running Swift 2.2 or later"</span>)</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Running Swift 2.1 or earlier"</span>)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>类似于现存的 <code>#if os()</code> 构建选项，这个选项决定了编译器随后生成的代码，如果你使用的是 Swift 2.2，那么第二个 <code>print()</code> 将不会被看到。</p>
<h2 id="其它一些特性">其它一些特性</h2><p>苹果 Swift 官方 Blog 没有提到的 Swift 2.2 一些新特性</p>
<h3 id="++_和_–_将被取消">++ 和 – 将被取消</h3><p>Swift 2.2 正式将 <code>++</code> 和 <code>--</code> <strong>deprecates</strong> 掉了，意味着虽然在 Swift 2.2 版本还能工作，但编译器会给你一个警告。但在 3.0 版本会被完全移除。</p>
<p>你可以使用 += 1 和 -= 1 来替代，至于为什么要将其移除，有这么几个解释：</p>
<ol>
<li>写 ++ 并不比 +=1 能节省多少时间</li>
<li>++ 对学 Swift 没有任何帮助，+= 至少可读性更好</li>
<li>传统 C styel for 循环中的 – 也被 deprecated 了</li>
</ol>
<h3 id="传统_C_风格的_for_循环被干掉了">传统 C 风格的 for 循环被干掉了</h3><p>也就是说下面这种写法在 2.2 的版本被 <strong>deprecates</strong> 了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i += <span class="number">1</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(i)</span> SwiftGG awesome"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以后要这么写了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(i)</span> SwiftGG awesome"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要创建一个由大到小的范围，你按照下面的写法编译或许没问题，但运行时会崩溃</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span>...<span class="number">1</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(i)</span> SwiftGG awesome"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应当这么写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>...<span class="number">10</span>).<span class="built_in">reverse</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(i)</span> SwiftGG awesome"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一种选择是使用标准的快速枚举来遍历数组</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = <span class="type">Array</span>(<span class="number">1</span>...<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> array &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(number)</span> green bottles"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组和其他一些_slice_types_现在有_removeFirst()_方法了">数组和其他一些 slice types 现在有 removeFirst() 方法了</h3><p>Swift 2.2 终于为我们带来了 removeFirst() 方法，该方法将从数组中移除第一个元素，然后返回给我们，可以试验一下</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = <span class="type">Array</span>(<span class="number">1</span>...<span class="number">5</span>)</span><br><span class="line">array.removeFirst()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> array &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the <span class="subst">\(number)</span> bird"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>使用 `<span class="function"><span class="title">removeLast</span><span class="params">()</span></span>` 时要注意，如果是空数组，会崩溃，因此可以用 `<span class="function"><span class="title">popLast</span><span class="params">()</span></span>` 来替代，该方法会处理空数组的情形（返回 nil）
</code></pre><h3 id="元组_splat_语法被废除了">元组 splat 语法被废除了</h3><p>我们可以用下面的方式定义一个函数，在 Swift 2.2 之前可以有两种方式调用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a : Int, b : Int)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>第一种我们经常使用，为函数的每个参数都传递相对应的值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">42</span>, b : <span class="number">17</span>)</span><br></pre></td></tr></table></figure>
<p>或者我们可以利用一个大部分开发者都不那么熟悉的特性（tuple splat）来调用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = (<span class="number">1</span>, b: <span class="number">2</span>)</span><br><span class="line">foo(x)</span><br></pre></td></tr></table></figure>
<p>后者这种语法糖实在没什么实际意义，在 Swift 2.2 被 deprecated，将在未来的版本移除。</p>
<h3 id="var_参数被废除了">var 参数被废除了</h3><p>var 参数提供的益处微乎其微，而且容易让人与 inout 混淆，因此在 Swift 2.2 中被移除了。<br>举个例子 sayHello() 函数使用了 var 参数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(<span class="keyword">var</span> name: String, repeat repeatCount: Int)</span></span> &#123;</span><br><span class="line">    name = name.uppercaseString</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span> ..&lt; repeatCount &#123;</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">"numbbbbb"</span>, repeat: <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>结果是 <strong>NUMBBBBB</strong> 将会被打印 5 遍，这是因为参数 name 经 var 修饰后成为变量，然后执行 <code>uppercaseString</code> 方法转换为大写，如果没有 <code>var</code> 关键字，name 是常量，执行 <code>uppercaseString</code> 会失败。</p>
<p>var 和 inout 之间的差异非常微妙：</p>
<ul>
<li>使用 var，让你可以在函数内部修改参数</li>
<li>使用 inout，甚至可以让你的改变延续到函数结束后</li>
</ul>
<p>我们可以在 Swift 2.2 中这么写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name: String, repeat repeatCount: Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> upperName = name.uppercaseString</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span> ..&lt; repeatCount &#123;</span><br><span class="line">        <span class="built_in">print</span>(upperName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">"numbbbbb "</span>, repeat: <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<h3 id="重命名_debug_标识符：#line,_#function,_#file">重命名 debug 标识符：#line, #function, #file</h3><p>在 Swift 2.1 和之前的版本，使用 <code>__FILE__</code>, <code>__LINE__</code>, <code>__COLUMN__</code>, 和 <code>__FUNCTION__</code> 标识符，在编译时会被替换为文件名、行号、列号和函数名。</p>
<p>而在 Swift 2.2 这些旧的标识符被更新为 <code>#file</code>, <code>#line</code>, <code>#column</code> 和 <code>#function</code>，如果你之前使用过 Swift 2.0 的 <code>#available</code> 来检查 iOS 版本，正如官方所说 # 意味这编译器这里要执行替换逻辑。<br>下面在 <code>printGreeting()</code> 函数中演示了新旧两种 debug 标识符：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name: String, repeat repeatCount: Int)</span></span> &#123;</span><br><span class="line">    <span class="comment">// old - deprecated!</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This is on line <span class="subst">\(<span class="keyword">__LINE__</span>)</span> of <span class="subst">\(<span class="keyword">__FUNCTION__</span>)</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new - shiny!</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This is on line <span class="subst">\(#line)</span> of <span class="subst">\(#function)</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> upperName = name.uppercaseString</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span> ..&lt; repeatCount &#123;</span><br><span class="line">        <span class="built_in">print</span>(upperName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">"numbbbbb"</span>, repeat: <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<hr>
<p>原文链接: <a href="http://swift.gg/2016/03/23/swift-22-new-features/" target="_blank" rel="external">http://swift.gg/2016/03/23/swift-22-new-features/</a></p>
<hr>
<p>PS: </p>
<ol>
<li><p>对于<code>++</code>和<code>--</code>被取消,确实有点没有想到.学了这么多年的程序,各种语言其实都是有<code>++</code>和<code>--</code>的,这个并不会对学习增加什么成本啊.<br> 取消后,对于下面这种代码反而变复杂了:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _readCount &gt;= <span class="number">0</span> &amp;&amp; ++_readCount == <span class="number">1</span> &#123;</span><br><span class="line">           pthread_mutex_lock(_writeMutex)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p> 首先,不能写成 <code>if _readCount &gt;= 0 &amp;&amp; (_readCount +=1) == 1</code> 这个是要报错的.那么就只能嵌套两个if语句了.</p>
</li>
<li><p>C风格的 for循环那个被废弃其实也是有问题的,以前可以放心大胆的写:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= a; i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p> 也就是 end小于start.当a是通过各种东西计算出来的时候,这个for循环直接会被跳过,不会报错.<br> 但是现在改成了  <code>for i in 1..&lt;a</code> 后  如果 end 小于start 就会报错的.只有改写成:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt; (a &lt; <span class="number">1</span> ? <span class="number">1</span> : a)</span><br></pre></td></tr></table></figure>
<p> 更麻烦了.</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Swift_2-2_的新特性">Swift 2.2 的新特性</h1><p>Swift 2.2 随着 iOS 9.3 一同闪亮登场，相较于 Swift 2.1， 2.2 版本做出了许多调整，从其调整方向上我们也能一窥 Swift 3.0 的影子，以下内容主要来自于苹果 Swift 官方 <a href="https://swift.org/blog/swift-2-2-released/">Blog</a>，接下来就让我们进入正题，一睹 Swift 2.2 的庐山真面目：</p>
<h2 id="允许更多的关键字来做参数标签">允许更多的关键字来做参数标签</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md">SE-0001: Allow (most) keywords as argument labels</a><br>参数标签是 Swift 中非常 cool 的一个特性，我们可以这么写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>.stride(to: <span class="number">9</span>, by: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数很简单，由 1 开始，每次加 2，返回一系列的值，最后的结果要小于 9：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1 3 5 7</span></span><br></pre></td></tr></table></figure>
<p>上面的函数如果参数前没有 <code>to</code> 或 <code>by</code> 标签，即 <code>stride(9, 2)</code> 那么代码将失去自解释性，别人也很难猜到这些参数的实际用途。<br>又假设我们要获取集合中某个值对应的索引，可以声明如下方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf(value, <span class="keyword">in</span>: collection)</span><br></pre></td></tr></table></figure>
<p>但是注意在 Swift 2.2 之前的版本，上面这种写法 Xcode 会报错，因为 in 是一个关键字，想要使用这些关键字必须加上单引号：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf(value, `<span class="keyword">in</span>`: collection)</span><br></pre></td></tr></table></figure>
<p>以前我们定义新的 API 的时候，通常也要避免与这些关键字撞车，比如用 <code>within</code> 代替 <code>in</code>。在我们导入 Objective-C APIs 的时候通常会碰到这些问题：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event.touchesMatching([.<span class="type">Began</span>, .<span class="type">Moved</span>], `<span class="keyword">in</span>`: view)</span><br><span class="line"><span class="type">NSXPCInterface</span>(`<span class="class"><span class="keyword">protocol</span>`: <span class="title">SomeProtocolType</span>.<span class="title">Protocol</span>)</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift中使用NSStream]]></title>
    <link href="http://sunxiang0918.github.io/2016/02/20/Swift%E4%B8%AD%E4%BD%BF%E7%94%A8NSStream/"/>
    <id>http://sunxiang0918.github.io/2016/02/20/Swift中使用NSStream/</id>
    <published>2016-02-20T07:11:41.000Z</published>
    <updated>2016-02-22T14:22:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Swift中使用NSStream">Swift中使用NSStream</h1><p>因为我的开源项目<a href="https://github.com/sunxiang0918/zkClient4Swift" target="_blank" rel="external">zkClient4Swift</a>的需要,要在Swift连接Socket,因此涉及到了使用NSStream来进行网络的流交互.特此把使用的过程整理出来供大家参考.</p>
<h2 id="流交互">流交互</h2><p>通常在跨语言的交互中,由于语言对于数据结构的存储是不一样的,因此,会使用流的方式来进行交互.流交互方式与语言和设备无关.流是在通信隧道中串行传输的连续的比特位序列.从编码的角度来说,流是单向同步的.因此,一般流都分为了输入流(InputStream)和输出流(OutputStream).这些流的数据通常只能使用一次,消耗完后,就无法从流对象中再次的获取或写入.</p>
<h2 id="Swift中的流">Swift中的流</h2><p>在Swift中,与流相关的主要是三个类:<code>NSStream</code>,<code>NSInputStream</code>,<code>NSOutputStream</code>.除开<code>NSStream</code>是一个抽象的基类外,剩下的两个类分别对应了输入流和输出流的所有属性和操作.</p>
<p>在<code>NSInputStream</code>或<code>NSOutputStream</code>中,可以对<code>文件</code>,<code>Socket</code>,<code>NSData</code>中获取数据.由于我这次是进行网络交互,因此,主要说下针对<code>Socket</code>进行的操作.</p>
<p><code>NSStream</code>对象中有一个属性<code>delegate</code>用来指定流事件的代理对象,这个也是整个<code>NSStream</code>最总要的方法.我们可以自己实现<code>NSStreamDelegate</code>协议并复制给<code>NSInputStream</code>或<code>NSOutputStream</code>的<code>delegate</code>属性,每当有流事件的时候,就会调用<code>NSStreamDelegate</code>协议的<code>public func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent)</code>方法实现,从而处理流相关的所有处理.</p>
<p>而对于输入流来说,我们可以使用<code>public func read(buffer: UnsafeMutablePointer&lt;UInt8&gt;, maxLength len: Int) -&gt; Int</code>方法来获取数据.<br>而对于输出流来说,我们可以使用<code>public func write(buffer: UnsafePointer&lt;UInt8&gt;, maxLength len: Int) -&gt; Int</code>方法来写入数据.</p>
<p>对于<code>NSStreamDelegate</code>协议的<code>public func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent)</code>方法,主要是需要了解<code>NSStreamEvent</code>事件类型,它们主要有:</p>
<ul>
<li><strong>None</strong> : </li>
<li><strong>OpenCompleted</strong> : 当连接创建完毕时触发</li>
<li><strong>HasBytesAvailable</strong> : 当有数据可读取时触发</li>
<li><strong>HasSpaceAvailable</strong> : 当可以发送数据时触发</li>
<li><strong>ErrorOccurred</strong> : 当出现错误时触发</li>
<li><strong>EndEncountered</strong> : 当连接结束时触发</li>
</ul>
<a id="more"></a>
<h2 id="使用NSInputStream读取数据">使用NSInputStream读取数据</h2><p>在Swift中使用<code>NSInputStream</code>读取数据主要有两种方式,一种是使用<code>NSStreamDelegate</code>的事件代理机制,当接收到<code>NSStreamEvent.HasBytesAvailable</code>事件的时候,在事件的响应中使用<code>read</code>方法来获取. 另外一种是直接启动一个永远循环的线程,然后在线程中不断的调用<code>read</code>方法来获取数据即可.一般来说我们推荐使用第一种方式.</p>
<p>对于第一种方式读取数据主要有以下几个步骤:</p>
<ol>
<li>从数据源中创建和初始化一个NSInputStream</li>
<li>将InputStream实例放入一个runloop中,并打开流</li>
<li>处理流对象的事件代理</li>
<li>当完成数据读取时,关闭并销毁流对象</li>
</ol>
<p>下面我们分别来说:</p>
<h3 id="从数据源中创建和初始化一个NSInputStream">从数据源中创建和初始化一个NSInputStream</h3><p>由于我们这篇文章主要讲的是在Socket中使用NSStream.那么我们的数据源就是Socket.</p>
<p>创建Socket的事件流的方式为:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">var</span> inputStream:<span class="type">NSInputStream</span>?</span><br><span class="line">private <span class="keyword">var</span> outputStream:<span class="type">NSOutputStream</span>?</span><br><span class="line"></span><br><span class="line"><span class="type">NSStream</span>.getStreamsToHostWithName(addr, port: port, inputStream: &amp;inputStream, outputStream: &amp;outputStream)</span><br></pre></td></tr></table></figure>
<p>因为<code>NSStream</code>其实还是Objective-C的方法签名.因此,后面的inputStream和outputStream的方法入参是类似于<code>C</code>语言方式的指针传入.<br>调用了这个方法后,如果inputStream就应该会有值了,如果没有值,那么就说明Socket没有打开:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">guard <span class="keyword">let</span> inputStream = inputStream,outputStream = outputStream <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//这里说明没有开启流</span></span><br><span class="line"><span class="keyword">return</span> (<span class="literal">false</span>,<span class="string">"Can not open stream"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是设置事件的代理:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputStream.delegate = <span class="keyword">self</span></span><br></pre></td></tr></table></figure>
<h3 id="将InputStream实例放入一个runloop中,并打开流">将InputStream实例放入一个runloop中,并打开流</h3><p>由于需要监听InputStream的事件,并异步的进行处理.因此,就需要在其他线程上异步的注册事件处理的操作.这个步骤主要有两种方式来实现:</p>
<h4 id="使用scheduleInRunLoop:forMode:">使用<code>scheduleInRunLoop:forMode:</code></h4><p>这种方式可能是最常用的方式了,就是直接调用<code>NSStream</code>的<code>public func scheduleInRunLoop(aRunLoop: NSRunLoop, forMode mode: String)</code>方法,把事件回调的代理绑定到某一个RunLoop上.通常的写法为:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loop = <span class="type">NSRunLoop</span>.currentRunLoop()</span><br><span class="line">inputStream.scheduleInRunLoop(loop, forMode: <span class="type">NSDefaultRunLoopMode</span>)</span><br></pre></td></tr></table></figure>
<p>这样的话,他就会在当前线程的RunLoop来执行这个<code>schedule</code>.同时,由于一般来说,当前线程都是主线程,那么如果在主线程来进行监听的话.进行命令处理的时候会把主线程阻塞.因此,就需要在调用<code>scheduleInRunLoop</code>的时候启动子线程,让inputStream的<code>schedule</code>在子线程中进行监听:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(dispatch_get_global_queue(<span class="type">DISPATCH_QUEUE_PRIORITY_HIGH</span>, <span class="number">0</span>)) &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">let</span> loop = <span class="type">NSRunLoop</span>.currentRunLoop()</span><br><span class="line">inputStream.scheduleInRunLoop(loop, forMode: <span class="type">NSDefaultRunLoopMode</span>)</span><br><span class="line">inputStream.open()</span><br><span class="line">loop.run()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是最后一句的<code>loop.run()</code>,这个是必须要要的.否则不能阻塞新的异步队列.</p>
<p>采用这种方式存在一个问题,那就是如果要想关闭<code>NSStream</code>的时候,是没有办法关闭启动的异步线程的.由于我们在异步线程的内部没有进行循环的操作,而是使用<code>loop.run</code>的方式来阻塞的.所以,那怕是使用标志位的方式都是不能结束这个异步loop的.</p>
<h4 id="使用CFReadStreamSetDispatchQueue">使用<code>CFReadStreamSetDispatchQueue</code></h4><p>针对上一种方式无法关闭的问题,我们可以直接使用<code>CFStream</code>中提供的<code>public func CFReadStreamSetDispatchQueue(stream: CFReadStream!, _ q: dispatch_queue_t!)</code>方法来给<code>NSStream</code>指定异步的队列:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sharedWorkQueue = dispatch_queue_create(<span class="string">"socketWork.queue"</span>, <span class="type">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">CFReadStreamSetDispatchQueue</span>(inputStream, sharedWorkQueue)</span><br></pre></td></tr></table></figure>
<p>它同样可以达到和<code>RunLoop</code>相同的效果.并且他的优势是由于没有显示的启动新的异步线程,使用了异步队列的方式,在我们关闭<code>NSStream</code>的时候就可以做相反的操作即可.</p>
<h3 id="处理流对象的事件代理">处理流对象的事件代理</h3><p>这个就是实现<code>func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent)</code>方法即可.我们可以通过<code>switch</code>语法来分别的处理<code>eventCode</code>.然后通过调用<code>NSStream</code>的<code>streamStatus</code>来获取流对象的状态,以及调用<code>streamError</code>来获取流对象可能存在的错误.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">stream</span><span class="params">(aStream: NSStream, handleEvent eventCode: NSStreamEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (eventCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">NSStreamEvent</span>.<span class="type">HasSpaceAvailable</span>:</span><br><span class="line">                reconnectionLock.readLock()</span><br><span class="line">                defer&#123;reconnectionLock.readUnlock()&#125;</span><br><span class="line">                hasSpaceAvailableDelegate?(aStream)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="type">NSStreamEvent</span>.<span class="type">HasBytesAvailable</span>:</span><br><span class="line">                reconnectionLock.readLock()</span><br><span class="line">                defer&#123;reconnectionLock.readUnlock()&#125;</span><br><span class="line">                hasBytesAvailableDelegate?(aStream)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="type">NSStreamEvent</span>.<span class="type">EndEncountered</span>:  </span><br><span class="line">                connected = <span class="literal">false</span></span><br><span class="line">                endEncounteredDelegate?(aStream)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="type">NSStreamEvent</span>.<span class="type">ErrorOccurred</span>:</span><br><span class="line">                errorOccurredDelegate?(aStream)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="type">NSStreamEvent</span>.<span class="type">OpenCompleted</span>:</span><br><span class="line">                <span class="keyword">if</span> aStream <span class="keyword">is</span> <span class="type">NSInputStream</span> &#123;</span><br><span class="line">                    inputLock.writeUnlock()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> aStream <span class="keyword">is</span> <span class="type">NSOutputStream</span> &#123;</span><br><span class="line">                    outputLock.writeUnlock()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"接收到事件:<span class="subst">\(eventCode)</span> :<span class="subst">\(aStream)</span>"</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我这个例子里面使用了闭包来处理事件的响应,其实完全是可以把事件的响应直接写到这个函数中的.</p>
<h3 id="从NSInputStream中读取数据">从NSInputStream中读取数据</h3><p>从NSInputStream中读取数据需要使用<code>public func read(buffer: UnsafeMutablePointer&lt;UInt8&gt;, maxLength len: Int) -&gt; Int</code>方法,他的入参是一个[UInt8]的指针以及期望读取的长度,返回值是实际读取的字节数.因此,我们通常需要预先的初始化一个<code>UInt8</code>的数组,并根据<code>maxLength</code>赋初始值,然后调用<code>read</code>方法来填充这个<code>UInt8</code>的数组,并进行返回:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buff:[<span class="type">UInt8</span>] = [<span class="type">UInt8</span>](<span class="built_in">count</span>:expectlen,repeatedValue:<span class="number">0x0</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> len = inputStream.read(&amp;buff, maxLength: expectlen)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> len &gt; <span class="number">0</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> result = buff[<span class="number">0</span>..&lt;len]</span><br><span class="line">   <span class="keyword">return</span> <span class="type">Array</span>(result)</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"读取出来的len为0,错误:<span class="subst">\(inputStream.streamError)</span>"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>当然,在Swift中,<code>NSData</code>类型通常会比<code>[UInt8]</code>类型有更多的使用场景,那么就牵涉到<code>[UInt8]</code>和<code>NSData</code>类型之间的转换了.由于<code>[UInt8]</code>其实就是一个字节数组,因此完全可以使用<code>NSData(bytes:UnsafePointer&lt;Void&gt;,length:Int)</code>的方式进行初始化的,为了方便书写,我们可以写一个NSData的扩展:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">NSData</span> </span>&#123;</span><br><span class="line">	convenience <span class="keyword">init</span>(<span class="keyword">var</span> uints:[<span class="type">UInt8</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(bytes:&amp;uints,length:uints.<span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以把从<code>NSInputStream</code>中获取的<code>[UInt8]</code>转换成<code>NSData</code>了:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">guard <span class="keyword">let</span> uints = _connection.read(<span class="number">102400</span>, timeout: _sessionTimeout) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"读取错误"</span>)</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">let</span> data = <span class="type">NSData</span>(uints: uints)</span><br></pre></td></tr></table></figure>
<h3 id="当完成数据读取时,关闭并销毁流对象">当完成数据读取时,关闭并销毁流对象</h3><p>当需要关闭流的时候,只需要反向进行操作即可. 但是对于使用<code>RunLoop</code>的方式进行监听事件的来说,是无法跳出<code>RunLoop</code>的. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span>-&gt;(<span class="type">Bool</span>,<span class="type">String</span>)&#123;</span><br><span class="line">        _closed = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        outputStream?.delegate = <span class="literal">nil</span></span><br><span class="line">        inputStream?.delegate = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> stream = inputStream &#123;</span><br><span class="line">            <span class="type">CFReadStreamSetDispatchQueue</span>(stream, <span class="literal">nil</span>)</span><br><span class="line">            stream.close()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> stream = outputStream &#123;</span><br><span class="line">            <span class="type">CFWriteStreamSetDispatchQueue</span>(stream, <span class="literal">nil</span>)</span><br><span class="line">            stream.close()</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream = <span class="literal">nil</span></span><br><span class="line">        inputStream = <span class="literal">nil</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.connected = <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">true</span>,<span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用的是<code>RunLoop</code>的方式,那么就把代码中的<code>CFReadStreamSetDispatchQueue(stream, nil)</code>修改为:<code>stream.removeFromRunLoop(NSRunLoop.currentRunLoop(),forMode:NSDefaultRunLoopMode)</code>即可</p>
<h2 id="使用NSOutputStream写入数据">使用NSOutputStream写入数据</h2><p>NSOutputStream写入数据和使用NSInputStream读取数据其实在大体上是一模一样的,他们两个通常都会成对的出现,同样是有以下几个步骤:</p>
<ol>
<li>从数据源中创建和初始化一个NSOutputStream</li>
<li>将NSOutputStream实例放入一个runloop中,并打开流</li>
<li>处理流对象的事件代理</li>
<li>当完成数据写入后,关闭并销毁流对象</li>
</ol>
<p>具体的步骤细节这就不说了,我们主要介绍一下不同的地方:</p>
<ol>
<li>在<code>stream:handleEvent:</code>方法中,主要是监听的<code>HasSpaceAvailable</code>事件.</li>
<li>写入数据的方法为:<code>public func write(buffer: UnsafePointer&lt;UInt8&gt;, maxLength len: Int) -&gt; Int</code>,他的入参同样是<code>[UInt8]</code>的指针以及<code>maxLength</code></li>
<li>绑定异步队列时使用<code>CFWriteStreamSetDispatchQueue</code>方法</li>
</ol>
<p>同样,在swift中我们更多的是使用<code>NSData</code>或<code>String</code>来表示数据,这同样会有<code>NSData</code>或<code>String</code>到<code>[UInt8]</code>的转换:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">send</span><span class="params">(<span class="keyword">var</span> data d:[UInt8])</span></span>-&gt;(<span class="type">Bool</span>,<span class="type">String</span>)&#123;</span><br><span class="line">       outputLock.readLock()</span><br><span class="line">       defer&#123;outputLock.readUnlock()&#125;</span><br><span class="line">       </span><br><span class="line">       guard <span class="keyword">let</span> outputStream = outputStream <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="literal">false</span>,<span class="string">"outputStream is closed"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> len = outputStream.write(&amp;d, maxLength: d.<span class="built_in">count</span>)</span><br><span class="line">       <span class="keyword">return</span> len==d.<span class="built_in">count</span> ? (<span class="literal">true</span>,<span class="string">""</span>) : (<span class="literal">false</span>,<span class="string">"send error"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   public <span class="func"><span class="keyword">func</span> <span class="title">send</span><span class="params">(str s:String)</span></span>-&gt;(<span class="type">Bool</span>,<span class="type">String</span>)&#123;</span><br><span class="line">       </span><br><span class="line">       guard <span class="keyword">let</span> data = s.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="literal">false</span>,<span class="string">"string format error"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> send(data: data)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public <span class="func"><span class="keyword">func</span> <span class="title">send</span><span class="params">(data d:NSData)</span></span>-&gt;(<span class="type">Bool</span>,<span class="type">String</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> buff:[<span class="type">UInt8</span>] = [<span class="type">UInt8</span>](<span class="built_in">count</span>:d.length,repeatedValue:<span class="number">0x0</span>)</span><br><span class="line">       d.getBytes(&amp;buff, length: d.length)</span><br><span class="line">       <span class="keyword">return</span> send(data: buff)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="流的错误处理">流的错误处理</h2><p>当流出现错误的时候,会停止对数据的处理.<br>在<code>NSStream</code>中可以由以下的几种方式来知道错误的发生:</p>
<ol>
<li>如果流被绑定到<code>RunLoop</code>或使用<code>CFReadStreamSetDispatchQueue</code>来打开.那么,可以在<code>stream:handleEvent:</code>方法中监听并处理<code>ErrorOccurred</code>事件.</li>
<li>在任何时候,都可以调用<code>streamStatus</code>和<code>streamError</code>属性来获取错误.</li>
<li>如果在调用<code>write:maxLength:</code>或者<code>read:maxLength:</code>方法写入或读取的实际数量为-1时,则表示发生了一个错误.</li>
</ol>
<h2 id="流的其他设置">流的其他设置</h2><p>当需要在连接中使用SSL等的时候,需要对<code>NSInputStream</code>和<code>NSInputStream</code>的属性进行特别的设置.在<code>NSStream</code>中有<code>public func setProperty(property: AnyObject?, forKey key: String) -&gt; Bool</code>方法来给<code>NSStream</code>的连接添加上特别的属性.它要求是在调用<code>open</code>方法前使用.</p>
<p>比如如果要创建SSL连接,就可以这样设置:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputStream.setProperty(<span class="type">NSStreamSocketSecurityLevelNegotiatedSSL</span>, forKey: <span class="type">NSStreamSocketSecurityLevelKey</span>)</span><br><span class="line"><span class="keyword">let</span> settings: [<span class="type">NSObject</span>: <span class="type">NSObject</span>] = [kCFStreamSSLValidatesCertificateChain: <span class="type">NSNumber</span>(bool:<span class="literal">false</span>), kCFStreamSSLPeerName: kCFNull]</span><br><span class="line">inputStream.setProperty(settings, forKey: kCFStreamPropertySSLSettings <span class="keyword">as</span> <span class="type">String</span>)</span><br></pre></td></tr></table></figure>
<p>同样,如果需要获取连接中的特殊属性,可以使用<code>public func propertyForKey(key: String) -&gt; AnyObject?</code>方法</p>
<h2 id="总结">总结</h2><p>本文介绍了<code>NSStream</code>的常用方法.以及通过例子,讲解了具体如何的创建,使用,销毁<code>NSStream</code>.<br>如果有其他的使用细节,我们会在后面再详细讨论.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Swift中使用NSStream">Swift中使用NSStream</h1><p>因为我的开源项目<a href="https://github.com/sunxiang0918/zkClient4Swift">zkClient4Swift</a>的需要,要在Swift连接Socket,因此涉及到了使用NSStream来进行网络的流交互.特此把使用的过程整理出来供大家参考.</p>
<h2 id="流交互">流交互</h2><p>通常在跨语言的交互中,由于语言对于数据结构的存储是不一样的,因此,会使用流的方式来进行交互.流交互方式与语言和设备无关.流是在通信隧道中串行传输的连续的比特位序列.从编码的角度来说,流是单向同步的.因此,一般流都分为了输入流(InputStream)和输出流(OutputStream).这些流的数据通常只能使用一次,消耗完后,就无法从流对象中再次的获取或写入.</p>
<h2 id="Swift中的流">Swift中的流</h2><p>在Swift中,与流相关的主要是三个类:<code>NSStream</code>,<code>NSInputStream</code>,<code>NSOutputStream</code>.除开<code>NSStream</code>是一个抽象的基类外,剩下的两个类分别对应了输入流和输出流的所有属性和操作.</p>
<p>在<code>NSInputStream</code>或<code>NSOutputStream</code>中,可以对<code>文件</code>,<code>Socket</code>,<code>NSData</code>中获取数据.由于我这次是进行网络交互,因此,主要说下针对<code>Socket</code>进行的操作.</p>
<p><code>NSStream</code>对象中有一个属性<code>delegate</code>用来指定流事件的代理对象,这个也是整个<code>NSStream</code>最总要的方法.我们可以自己实现<code>NSStreamDelegate</code>协议并复制给<code>NSInputStream</code>或<code>NSOutputStream</code>的<code>delegate</code>属性,每当有流事件的时候,就会调用<code>NSStreamDelegate</code>协议的<code>public func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent)</code>方法实现,从而处理流相关的所有处理.</p>
<p>而对于输入流来说,我们可以使用<code>public func read(buffer: UnsafeMutablePointer&lt;UInt8&gt;, maxLength len: Int) -&gt; Int</code>方法来获取数据.<br>而对于输出流来说,我们可以使用<code>public func write(buffer: UnsafePointer&lt;UInt8&gt;, maxLength len: Int) -&gt; Int</code>方法来写入数据.</p>
<p>对于<code>NSStreamDelegate</code>协议的<code>public func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent)</code>方法,主要是需要了解<code>NSStreamEvent</code>事件类型,它们主要有:</p>
<ul>
<li><strong>None</strong> : </li>
<li><strong>OpenCompleted</strong> : 当连接创建完毕时触发</li>
<li><strong>HasBytesAvailable</strong> : 当有数据可读取时触发</li>
<li><strong>HasSpaceAvailable</strong> : 当可以发送数据时触发</li>
<li><strong>ErrorOccurred</strong> : 当出现错误时触发</li>
<li><strong>EndEncountered</strong> : 当连接结束时触发</li>
</ul>]]>
    
    </summary>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift中基本数据类型与NSData转换]]></title>
    <link href="http://sunxiang0918.github.io/2016/02/15/Swift%E4%B8%AD%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8ENSData%E8%BD%AC%E6%8D%A2/"/>
    <id>http://sunxiang0918.github.io/2016/02/15/Swift中基本数据类型与NSData转换/</id>
    <published>2016-02-15T10:01:21.000Z</published>
    <updated>2016-02-16T08:21:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Swift中基本数据类型与NSData转换">Swift中基本数据类型与NSData转换</h1><p>最近由于程序的需要,要与JAVA的服务端进行Socket的交互,那么这就牵涉到了数据的交互.Socket的数据交互一般都是直接采用二进制Bytes的方式来传递,那么就需要把Swift中的各种基本数据转换成为JAVA服务器可以认可的Bytes字节数组,以及把JAVA的字节数组反序列化为Swift中的基本数据.</p>
<h2 id="big-endian_and_little-endian">big-endian and little-endian</h2><p>要在不同程序中进行字节数组的数据交换,有个很重要的东西就是<code>字节序</code>.<code>字节序</code>顾名思义就是字节的顺序,也就是大于1个字节类型的数据在内存中存放的顺序.这个在跨平台以及网络程序交互中非常的重要.</p>
<p>常见的字节序主要有两类:<code>Big-Endian</code>和<code>Little-Endian</code>.它们的定义为:</p>
<ul>
<li>Big-Endian:高位字节排放在内存的低地址端,地位字节排放在内存的高地址端.</li>
<li>Little-Endian:地位字节排放在内存的低地址端,高位字节排放在内存的高地址端.<br>这样说可能比较抽象,我们来举个例子就非常清楚了:<br>比如一个32位的Int类型数据: <code>let a = Int32(2)</code>分别采用<code>Big-Endian</code>和<code>Little-Endian</code>的情况如下:</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">字节号</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Big-endian</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">02</td>
</tr>
<tr>
<td style="text-align:center">Little-Endian</td>
<td style="text-align:center">02</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
</tr>
</tbody>
</table>
<p>也就是他们两个是相反的.<code>Big-Endian</code>和<code>Little-Endian</code>跟CPU的指令有关,每一种CPU不是<code>Big-Endian</code>就是<code>Little-Endian</code>.常见的IA架构的CPU,比如Intel或AMD的都是使用的<code>Little-Endian</code>,而PowerPC活着SPARC的处理器则是<code>Big-Endian</code>的.而在互联网的网络交互以及TCP协议中使用的是<code>Big-Endian</code>,JAVA的虚拟机中的字节序是<code>Big-Endian</code>的.而Swift由于是运行在IA架构的CPU上的,因此,它的字节序是<code>Little-Endian</code>的.</p>
<p>正是由于运行在X86上的<code>Swift</code>和<code>JAVA</code>的字节序是相反的,因此,它们两个进行跨语言的网络数据交互的时候,就需要对数据进行字节序的转换.否则就会出现数据读取错误的情况,比如用<code>JAVA</code>采用<code>Big-Endian</code>序的Int32<code>02000000</code>,<code>Swift</code>采用<code>Little-Endian</code>序解析出来是<code>33554432</code>而不是期望的<code>2</code>.</p>
<a id="more"></a>
<p>在Swift中,Apple在<code>CoreFoundation</code>中提供了一些列的函数来提供字节序的转换.它们都在<code>CFByteOrder</code>中有所定义:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt16BigToHost</span><span class="params">(arg: UInt16)</span></span> -&gt; <span class="type">UInt16</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt32BigToHost</span><span class="params">(arg: UInt32)</span></span> -&gt; <span class="type">UInt32</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt64BigToHost</span><span class="params">(arg: UInt64)</span></span> -&gt; <span class="type">UInt64</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt16HostToBig</span><span class="params">(arg: UInt16)</span></span> -&gt; <span class="type">UInt16</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt32HostToBig</span><span class="params">(arg: UInt32)</span></span> -&gt; <span class="type">UInt32</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt64HostToBig</span><span class="params">(arg: UInt64)</span></span> -&gt; <span class="type">UInt64</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt16LittleToHost</span><span class="params">(arg: UInt16)</span></span> -&gt; <span class="type">UInt16</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt32LittleToHost</span><span class="params">(arg: UInt32)</span></span> -&gt; <span class="type">UInt32</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt64LittleToHost</span><span class="params">(arg: UInt64)</span></span> -&gt; <span class="type">UInt64</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt16HostToLittle</span><span class="params">(arg: UInt16)</span></span> -&gt; <span class="type">UInt16</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt32HostToLittle</span><span class="params">(arg: UInt32)</span></span> -&gt; <span class="type">UInt32</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFSwapInt64HostToLittle</span><span class="params">(arg: UInt64)</span></span> -&gt; <span class="type">UInt64</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertFloat32HostToSwapped</span><span class="params">(arg: Float32)</span></span> -&gt; <span class="type">CFSwappedFloat32</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertFloat32SwappedToHost</span><span class="params">(arg: CFSwappedFloat32)</span></span> -&gt; <span class="type">Float32</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertFloat64HostToSwapped</span><span class="params">(arg: Float64)</span></span> -&gt; <span class="type">CFSwappedFloat64</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertFloat64SwappedToHost</span><span class="params">(arg: CFSwappedFloat64)</span></span> -&gt; <span class="type">Float64</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertFloatHostToSwapped</span><span class="params">(arg: Float)</span></span> -&gt; <span class="type">CFSwappedFloat32</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertFloatSwappedToHost</span><span class="params">(arg: CFSwappedFloat32)</span></span> -&gt; <span class="type">Float</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertDoubleHostToSwapped</span><span class="params">(arg: Double)</span></span> -&gt; <span class="type">CFSwappedFloat64</span></span><br><span class="line"></span><br><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">CFConvertDoubleSwappedToHost</span><span class="params">(arg: CFSwappedFloat64)</span></span> -&gt; <span class="type">Double</span></span><br></pre></td></tr></table></figure>
<p>使用这些函数就可以对字节序进行转换. 更多的可以参考<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreFoundation/Reference/CFByteOrderUtils/index.html" target="_blank" rel="external">Apple的官方手册</a></p>
<p><strong>2016-02-16 Update</strong><br>最新的swift中,对<code>UInt64</code>和<code>UInt32</code>,已经自带了成员方法:<code>public var bigEndian: UInt32 { get }</code> <code>public var littleEndian: UInt32 { get }</code>等等. 也就是说,不需要使用<code>CFSwapInt32BigToHost(val)</code>这样转换了,直接<code>val.bigEndian</code>即可.</p>
<h2 id="基础数据与NSData的转换">基础数据与NSData的转换</h2><p>为了能让Swift和JAVA进行网络的交互,那么就必须把它们的基础数据转换成为Bytes字节数组.<br>在Swift中使用<code>NSData</code>或者<code>NSMutableData</code>来表示.因此,也就是需要把基础数据放入到NSData中.</p>
<h3 id="Int32与Int64">Int32与Int64</h3><p>在Swift中,<code>Int</code>是一个特殊的整数类型,它的长度与当前平台的原生字长相同:</p>
<ul>
<li>在32位平台上,<code>Int</code>与<code>Int32</code>长度相同</li>
<li>在64位平台上,<code>Int</code>与<code>Int64</code>长度相同.相当于C中的Long.</li>
</ul>
<p>因此,在网络传输的时候,是需要区分的对待Int32和Int64的.需要把一个<code>Int</code>类型强转为需要的长度.<br>具体的代码为:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">NSMutableData</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">appendInt</span><span class="params">(value:Int)</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> networkOrderVal = <span class="type">CFSwapInt32HostToBig</span>(<span class="type">UInt32</span>(value))</span><br><span class="line">        <span class="keyword">self</span>.appendBytes(&amp;networkOrderVal, length: <span class="built_in">sizeof</span>(<span class="type">UInt32</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">appendLong</span><span class="params">(value:Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> networkOrderVal = <span class="type">CFSwapInt64HostToBig</span>(<span class="type">UInt64</span>(value));</span><br><span class="line">        <span class="keyword">self</span>.appendBytes(&amp;networkOrderVal, length: <span class="built_in">sizeof</span>(<span class="type">UInt64</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">getInt</span><span class="params">(range:NSRange = NSRange<span class="params">(location:<span class="number">0</span>,length:<span class="built_in">sizeof</span><span class="params">(UInt32)</span></span></span></span>)) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> val: <span class="type">UInt32</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.getBytes(&amp;val, range: range)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">CFSwapInt32BigToHost</span>(val))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">getLong</span><span class="params">(range:NSRange = NSRange<span class="params">(location:<span class="number">0</span>,length:<span class="built_in">sizeof</span><span class="params">(UInt64)</span></span></span></span>)) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> val: <span class="type">UInt64</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.getBytes(&amp;val, range: range)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">CFSwapInt64BigToHost</span>(val))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用了扩展机制,直接在<code>NSMutableData</code>上增加扩展.</p>
<p>首先,使用<code>CFSwapInt32HostToBig</code>函数把字节序给改变了.然后调用<code>NSMutableData.appendBytes</code>方法,赋值给<code>NSData</code>.由于<code>NSMutableData</code>现在还是<code>Objective-C</code>的实现,因此,调用方式稍微有点奇怪,是使用指针的方式进行赋值的.更多的可以参见<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html" target="_blank" rel="external">Using Swift with Cocoa and Objective-C</a>.</p>
<p>反序列化也是相似的,首先定义了一个变量.然后使用<code>NSMutableData.getBytes</code>,同样传入一个指针以及数据的返回.然后最后在进行一次字节序的转换即可.</p>
<p><strong>2016-02-16 Update:</strong><br>对于需要在网络传输中传输负数的情况需要先把负数的<code>Int</code>转换为无符号的整数<code>UInt</code>.在计算机中,负数的表示方法是采用补码的形式.在swift中,可以使用<code>UInt32(bitPattern:Int32)</code>以及<code>Int32(bitPattern:UInt32)</code>方法来相互的转换.比如,<code>-5</code>转换为无符号的补码形式为:<code>fffffffb</code>. 因此我们的<code>appendInt</code>和<code>getInt</code>可以改成这样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="func"><span class="keyword">func</span> <span class="title">appendInt</span><span class="params">(value:Int)</span></span>&#123;</span><br><span class="line">       <span class="keyword">var</span> networkOrderVal = <span class="type">UInt32</span>(bitPattern:<span class="type">Int32</span>(value)).bigEndian</span><br><span class="line">       <span class="keyword">self</span>.appendBytes(&amp;networkOrderVal, length: <span class="built_in">sizeof</span>(<span class="type">UInt32</span>))</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public <span class="func"><span class="keyword">func</span> <span class="title">appendLong</span><span class="params">(value:Int)</span></span> &#123;</span><br><span class="line">       <span class="keyword">var</span> networkOrderVal = <span class="type">UInt64</span>(bitPattern:<span class="type">Int64</span>(value)).bigEndian</span><br><span class="line">       <span class="keyword">self</span>.appendBytes(&amp;networkOrderVal, length: <span class="built_in">sizeof</span>(<span class="type">UInt64</span>))</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public <span class="func"><span class="keyword">func</span> <span class="title">getInt</span><span class="params">(range:NSRange = NSRange<span class="params">(location:<span class="number">0</span>,length:<span class="built_in">sizeof</span><span class="params">(UInt32)</span></span></span></span>)) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">       <span class="keyword">var</span> val: <span class="type">UInt32</span> = <span class="number">0</span></span><br><span class="line">       <span class="keyword">self</span>.getBytes(&amp;val, range: range)</span><br><span class="line">       <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">Int32</span>(bitPattern:val.bigEndian))</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public <span class="func"><span class="keyword">func</span> <span class="title">getLong</span><span class="params">(range:NSRange = NSRange<span class="params">(location:<span class="number">0</span>,length:<span class="built_in">sizeof</span><span class="params">(UInt64)</span></span></span></span>)) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">       <span class="keyword">var</span> val: <span class="type">UInt64</span> = <span class="number">0</span></span><br><span class="line">       <span class="keyword">self</span>.getBytes(&amp;val, range: range)</span><br><span class="line">       <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">Int64</span>(bitPattern:val.bigEndian))</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Float32与Float64">Float32与Float64</h3><p>它的情况与<code>Int</code>的非常相似.同样需要经历字节序的转换,以及<code>NSMutableData.appendBytes</code>的调用.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">NSMutableData</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Float32与Float64</span></span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">appendFloat</span><span class="params">(value:Float)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> networkOrderVal = <span class="type">CFConvertFloat32HostToSwapped</span>(<span class="type">Float32</span>(value))</span><br><span class="line">        <span class="keyword">self</span>.appendBytes(&amp;networkOrderVal, length: <span class="built_in">sizeof</span>(<span class="type">Float32</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">appendDouble</span><span class="params">(value:Double)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> networkOrderVal = <span class="type">CFConvertFloat64HostToSwapped</span>(<span class="type">Float64</span>(value))</span><br><span class="line">        <span class="keyword">self</span>.appendBytes(&amp;networkOrderVal, length: <span class="built_in">sizeof</span>(<span class="type">Float64</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">getFloat</span><span class="params">(range:NSRange = NSRange<span class="params">(location:<span class="number">0</span>,length:<span class="built_in">sizeof</span><span class="params">(Float32)</span></span></span></span>)) -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> val: <span class="type">CFSwappedFloat32</span> = <span class="type">CFSwappedFloat32</span>(v: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">self</span>.getBytes(&amp;val, range: range)</span><br><span class="line">        <span class="keyword">let</span> result = <span class="type">CFConvertFloat32SwappedToHost</span>(val)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">getDouble</span><span class="params">(range:NSRange = NSRange<span class="params">(location:<span class="number">0</span>,length:<span class="built_in">sizeof</span><span class="params">(Float64)</span></span></span></span>)) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> val: <span class="type">CFSwappedFloat64</span> = <span class="type">CFSwappedFloat64</span>(v: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">self</span>.getBytes(&amp;val, range: range)</span><br><span class="line">        <span class="keyword">let</span> result = <span class="type">CFConvertFloat64SwappedToHost</span>(val)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bool">Bool</h3><p><code>Bool</code>类型由于是单字节的数据,不存在字节序的问题.因此,它与NSData的转换最为简单.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">NSMutableData</span> </span>&#123;</span><br><span class="line">	<span class="comment">// MARK: Bool</span></span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">appendBool</span><span class="params">(<span class="keyword">var</span> val:Bool)</span></span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.appendBytes(&amp;val, length: <span class="built_in">sizeof</span>(<span class="type">Bool</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">getBool</span><span class="params">(range:NSRange = NSRange<span class="params">(location:<span class="number">0</span>,length:<span class="built_in">sizeof</span><span class="params">(Bool)</span></span></span></span>)) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> val:<span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">self</span>.getBytes(&amp;val, range: range)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="String">String</h3><p>字符串的处理又相对的要麻烦些了.因为字符串的长度是可变的.不像其他的数据类型是有固定的长度的.因此,一般在网络传输中,都会在字符串的bytes前接上一个<code>Int32</code>的字节数组来表示这个字符串的长度.</p>
<p>因此,我们在转换<code>String</code>到<code>NSData</code>的时候,实际上是两个步骤.首先计算出字符串的字节长度.然后把这个字节长度放入NSData中,接着,再把字符串的内容转换为字节数组放入NSData中:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">NSMutableData</span> </span>&#123;</span><br><span class="line">	<span class="comment">// MARK: String</span></span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">appendString</span><span class="params">(val:String,encoding:NSStringEncoding = NSUTF8StringEncoding)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取到字节的长度,使用某一种编码</span></span><br><span class="line">        <span class="keyword">let</span> pLength : <span class="type">Int</span> = val.lengthOfBytesUsingEncoding(encoding)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放入字符串的长度</span></span><br><span class="line">        <span class="keyword">self</span>.appendInt(pLength)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把字符串按照某种编码转化为字节数组</span></span><br><span class="line">        <span class="keyword">let</span> data = val.dataUsingEncoding(encoding)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//放入NSData中</span></span><br><span class="line">        <span class="keyword">self</span>.appendData(data!)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="func"><span class="keyword">func</span> <span class="title">getString</span><span class="params">(location:Int = <span class="number">0</span>,encoding:NSStringEncoding = NSUTF8StringEncoding)</span></span> throws -&gt; (<span class="type">String</span>,<span class="type">Int</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先获取到长度</span></span><br><span class="line">        <span class="keyword">let</span> len = <span class="keyword">self</span>.getInt(<span class="type">NSRange</span>(location:location,length:<span class="built_in">sizeof</span>(<span class="type">UInt32</span>)))</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//找到子字节数组</span></span><br><span class="line">        <span class="keyword">let</span> subData = <span class="keyword">self</span>.subdataWithRange(<span class="type">NSRange</span>(location: location+<span class="built_in">sizeof</span>(<span class="type">UInt32</span>), length: len))</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接使用String的构造函数,采用某种编码格式获取字符串</span></span><br><span class="line">        <span class="keyword">let</span> string = <span class="type">String</span>(data: subData, encoding: encoding)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果凑不起字符串,就表示数据不正确,那么就抛出异常</span></span><br><span class="line">        guard <span class="keyword">let</span> _string = string <span class="keyword">else</span> &#123;</span><br><span class="line">            throw <span class="type">AppException</span>.<span class="type">FormatCastException</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> (_string,len+<span class="built_in">sizeof</span>(<span class="type">UInt32</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>以上就是简单的介绍了在Swift中如何把几种常用的数据类型转换为网络交互格式的Bytes数组的.至于其他的数据类型,或者自定义的数据结构,无外乎都是从这几种基础数据类型上拼接出来的,稍微灵活修改下即可.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Swift中基本数据类型与NSData转换">Swift中基本数据类型与NSData转换</h1><p>最近由于程序的需要,要与JAVA的服务端进行Socket的交互,那么这就牵涉到了数据的交互.Socket的数据交互一般都是直接采用二进制Bytes的方式来传递,那么就需要把Swift中的各种基本数据转换成为JAVA服务器可以认可的Bytes字节数组,以及把JAVA的字节数组反序列化为Swift中的基本数据.</p>
<h2 id="big-endian_and_little-endian">big-endian and little-endian</h2><p>要在不同程序中进行字节数组的数据交换,有个很重要的东西就是<code>字节序</code>.<code>字节序</code>顾名思义就是字节的顺序,也就是大于1个字节类型的数据在内存中存放的顺序.这个在跨平台以及网络程序交互中非常的重要.</p>
<p>常见的字节序主要有两类:<code>Big-Endian</code>和<code>Little-Endian</code>.它们的定义为:</p>
<ul>
<li>Big-Endian:高位字节排放在内存的低地址端,地位字节排放在内存的高地址端.</li>
<li>Little-Endian:地位字节排放在内存的低地址端,高位字节排放在内存的高地址端.<br>这样说可能比较抽象,我们来举个例子就非常清楚了:<br>比如一个32位的Int类型数据: <code>let a = Int32(2)</code>分别采用<code>Big-Endian</code>和<code>Little-Endian</code>的情况如下:</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">字节号</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Big-endian</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">02</td>
</tr>
<tr>
<td style="text-align:center">Little-Endian</td>
<td style="text-align:center">02</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
<td style="text-align:center">00</td>
</tr>
</tbody>
</table>
<p>也就是他们两个是相反的.<code>Big-Endian</code>和<code>Little-Endian</code>跟CPU的指令有关,每一种CPU不是<code>Big-Endian</code>就是<code>Little-Endian</code>.常见的IA架构的CPU,比如Intel或AMD的都是使用的<code>Little-Endian</code>,而PowerPC活着SPARC的处理器则是<code>Big-Endian</code>的.而在互联网的网络交互以及TCP协议中使用的是<code>Big-Endian</code>,JAVA的虚拟机中的字节序是<code>Big-Endian</code>的.而Swift由于是运行在IA架构的CPU上的,因此,它的字节序是<code>Little-Endian</code>的.</p>
<p>正是由于运行在X86上的<code>Swift</code>和<code>JAVA</code>的字节序是相反的,因此,它们两个进行跨语言的网络数据交互的时候,就需要对数据进行字节序的转换.否则就会出现数据读取错误的情况,比如用<code>JAVA</code>采用<code>Big-Endian</code>序的Int32<code>02000000</code>,<code>Swift</code>采用<code>Little-Endian</code>序解析出来是<code>33554432</code>而不是期望的<code>2</code>.</p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Akka in JAVA(四)]]></title>
    <link href="http://sunxiang0918.github.io/2016/02/10/Akka-in-JAVA-4/"/>
    <id>http://sunxiang0918.github.io/2016/02/10/Akka-in-JAVA-4/</id>
    <published>2016-02-10T12:35:02.000Z</published>
    <updated>2016-02-14T02:45:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Akka_in_JAVA(四)">Akka in JAVA(四)</h1><p>最后这个部分讲一讲AKKA中的事件消息类型. 在Akka中主要是有三种消息类型,每一种类型对应了不同的使用场景.他们分别是:<code>Fire and Forget模式</code>,<code>Send and Receive模式</code>和<code>Publisher-Subscriber模式</code>.</p>
<h2 id="Fire_and_Forget模式">Fire and Forget模式</h2><p>这种发送消息的模式是Akka中所推荐的,也是我们前面一直在使用的方式.也就是单向消息模式,Actor在发送消息之后,并不需要获取响应.这种方式在JAVA中需要使用<code>ActorRef</code>或<code>ActorSelection</code>的<code>tell</code>方法.和消息队列类似,直接调用该方法即可,程序不会阻塞,会直接执行后面的操作,但是消息已经发送给目标的Actor了.这种方式的具体使用方法前面已经列举了很多了,这里就不再重复的举例了.</p>
<h2 id="Send_and_Receive模式">Send and Receive模式</h2><p>这种发送消息的模式是双向的,当Actor在发送消息之后,会接收到一个Future对象.和JAVA的Future一样,通过这个可以异步的接收到对方的结果消息.</p>
<p>在整个AKKA中,提供了一套完整的Future机制,不光是在Actor传递消息间可以使用,也可以在非Actor中直接使用.</p>
<a id="more"></a>
<h3 id="在代码中用来异步运算">在代码中用来异步运算</h3><p>在一般的代码中,我们除了可以直接使用JAVA提供了<code>Future</code>机制实现异步处理外,还可以使用<code>Akka</code>提供了<code>Future</code>机制来实现异步处理,这样的好处在于可以直接的与Akka做无缝的集成.</p>
<p>与<code>Future</code>相关的类和方法都在<code>akka.dispatch</code>和<code>akka.pattern.Patterns</code>中.</p>
<p>比如我们来看一个很简单的例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"helloakka"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*通过Futures的静态方法future创建一个Future类.入参就是一个异步的计算*/</span></span><br><span class="line">        Future&lt;String&gt; f = Futures.future(() -&gt; &#123;</span><br><span class="line">        	  Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> Random(System.currentTimeMillis()).nextBoolean())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Hello"</span>+<span class="string">"World!"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);       </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,system.dispatcher());</span><br><span class="line"></span><br><span class="line">        f.onSuccess(<span class="keyword">new</span> PrintResult&lt;String&gt;(),system.dispatcher());</span><br><span class="line">        f.onFailure(<span class="keyword">new</span> FailureResult(),system.dispatcher());</span><br><span class="line">        System.out.println(<span class="string">"这个地方是外面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintResult</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">OnSuccess</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FailureResult</span> <span class="keyword">extends</span> <span class="title">OnFailure</span> </span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable failure)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"进入错误的处理"</span>);</span><br><span class="line">            failure.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子使用<code>Futures.future</code>创建了一个异步的代码执行块.然后可以指定<code>Future</code>的<code>onSuccess</code>和<code>onFailure</code>等状态的响应.当Future执行到这些状态的时候,就会执行响应代码中的方法.<br>比如这个例子中,在<code>Futures.future</code>异步执行体中随机的返回正常结果或抛出异常.然后增加了<code>future</code>成功和失败的两个状态的处理,分别是打印正常的结果和打印失败的异常.当我们执行这段代码后,由于异步代码块中休眠了10毫秒,因此必然会先打印<code>这个地方是外面</code>这句话,这也证明了这些代码全是异步执行的.然后随机的会打印成功或失败的信息.</p>
<p>除了可以给<code>Future</code>设定<code>onSuccess</code> <code>onFailure</code>和<code>onComplete</code>外,还有一个很有用的功能就是可以设定<code>Future</code>的后续操作,也就是多个<code>Future</code>联合操作.比如接着上一个例子中的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f.andThen(<span class="keyword">new</span> OnComplete&lt;String&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(Throwable failure, String success)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"这里是andThen"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,system.dispatcher()).andThen(<span class="keyword">new</span> OnComplete&lt;String&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(Throwable failure, String success)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"这里是andThen2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,system.dispatcher());</span><br></pre></td></tr></table></figure>
<p>当执行完<code>f</code>的<code>onSuccess</code>方法后,接下来会执行第一个<code>andThen</code>中所指定的异步操作,而后继续执行第二个<code>andThen</code>中的操作.通过这样的操作,就可以形成一条异步调用链.</p>
<p>除此之外,<code>Future</code>还有很多有用的方法,比如<code>foreach</code> <code>transform</code> <code>map</code> <code>filter</code>等等.这些个方法和JDK1.8中的<code>StreamAPI</code>非常的相似.具体的可以参考<a href="http://doc.akka.io/docs/akka/2.4.1/java/futures.html" target="_blank" rel="external">这里</a>.</p>
<h3 id="在Actor中用来发送消息">在Actor中用来发送消息</h3><p>除了直接在代码中使用<code>Future</code>功能来使用异步操作外,另外一个用法就是真正的在Actor中进行消息的传递了. 在<a href="/2016/01/10/Akka-in-JAVA-1/">Akka in JAVA(一)</a>中我们已经演示过通过<code>MailInbox</code>的方式来接收消息的反馈,而使用Akka的<code>Future</code>方式进行<code>Send and Receive模式</code>的消息传递是第二种方式.</p>
<p>Akka提供了<code>ask</code>和<code>pipe</code>两个方法来实现<code>Send and Receive模式</code>的消息通信.</p>
<p><code>ask</code>方法是<code>Patterns</code>类提供的.它最常用的方法签名是<code>Future&lt;Object&gt; ask(ActorRef actor, Object message, Timeout timeout)</code>.也就是像某一个或某一组Actor发送一个消息,并设定一个超时时间,它返回一个<code>Future</code>对象.这样就可以像上面的例子那样的设定响应的事件处理了. 但是需要注意的是,ask的被调用Actor必须在<code>onReceive</code>方法中显示的调用<code>getSender().tell(xxxx,getSelf())</code>发送Response为返回的Future填充数据.<br>同时,Akka还提供了一个<code>Await.result</code>方法来阻塞的获取<code>Future</code>的结果.比如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Timeout timeout = <span class="keyword">new</span> Timeout(Duration.create(<span class="number">5</span>, <span class="string">"seconds"</span>));</span><br><span class="line">Future&lt;Object&gt; future = Patterns.ask(actor, msg, timeout);</span><br><span class="line">String result = (String) Await.result(future, timeout.duration());</span><br></pre></td></tr></table></figure>
<p>而<code>pipe</code>方法同样是<code>Patterns</code>类提供的.它的最主要的作用是把一个<code>Future</code>的结果发送给某一个Actor.也就是指定当某一个<code>future</code>执行结束后,把结果发送给某个Actor.</p>
<p>在我们的<a href="/2016/01/18/Akka-in-JAVA-3/">上一篇博客</a>的例子中<code>FactorialBackend</code>类就使用了这个语法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是数字</span></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">final</span> Integer n = (Integer) message;</span><br><span class="line">            <span class="comment">/*使用akka的future功能,异步的计算阶乘*/</span></span><br><span class="line">            Future&lt;BigInteger&gt; f = future(() -&gt; factorial(n), getContext().dispatcher());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*合并计算的结果*/</span></span><br><span class="line">            Future&lt;FactorialResult&gt; result = f.map(</span><br><span class="line">                    <span class="keyword">new</span> Mapper&lt;BigInteger, FactorialResult&gt;() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> FactorialResult <span class="title">apply</span><span class="params">(BigInteger factorial)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> FactorialResult(n, factorial);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, getContext().dispatcher());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*把结果返回Sender*/</span></span><br><span class="line">            pipe(result, getContext().dispatcher()).to(getSender());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unhandled(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>它使用<code>future</code>函数,异步的计算阶乘.并且把计算结果进行封装处理.然后通过<code>pipe</code>方法,把这个异步的结果尝试发送给<code>getSender()</code>,从而达到整个代码完全非阻塞的结果.</p>
<h2 id="Publisher-Subscriber模式">Publisher-Subscriber模式</h2><p>这种模式也就是消息的订阅和发布.用处非常的广泛,比如一个Publisher和多个Subscriber的组合应用,形成事件的广播,前者会将消息同时发送给所有的订阅者,实现分布式的并行处理.比如针对订单的处理,当用户下了订单后,既要生成订单数据,又要通知库存还要通知卖方和买房.于是,就可以将这些不同的任务交给不同的Subscriber,当接收到消息后,同时对订单进行处理.另外,这种模式还可以对Actor的生命周期进行完整的监听,当Actor的节点成员发生变化后,其他节点可以及时的进行各种处理.<br>具体的例子,可以参考上一篇博客中的<code>SimpleClusterListener</code>,它就是在<code>preStart</code>方法中调用了<code>cluster.subscribe</code>方法订阅了集群中的<code>MemberEvent.class</code> <code>UnreachableMember.class</code>两个事件.<br>除了监听集群中的状态外,还可以通过调用<code>system.eventStream()</code>来获取消息总线,从而调用<code>subscribe</code>和<code>publish</code>方法来发布和订阅消息.</p>
<h2 id="Demo">Demo</h2><p>这里使用一个稍微复杂点的例子来对Akka做一个简单的总结.它涉及到了Akka中的远程调用,本地调用,集群调用.使用了<code>Future</code> <code>Publisher-Subscriber</code>等特性,算是一个比较全面的例子.</p>
<p>这个例子原载于<a href="http://shiyanjun.cn/archives/1186.html" target="_blank" rel="external">http://shiyanjun.cn/archives/1186.html</a>上,是使用<code>scala</code>写的,我用<code>JAVA</code>重写了一次,并增加了一些东西.这个例子主要的功能是实现一个简单的模拟日志实时处理的集群系统,类似于<code>Flume</code>,可以从某一个数据源中输入数据,然后程序收集数据,然后经过一个拦截器层,处理数据,并且转换为特定的格式,最后把数据写入<code>Kafka</code>中.具体的逻辑如下图:</p>
<p><img src="/img/2016/02/10/1.png" alt=""></p>
<p>在上图中,将日志处理系统分为了3个子部分,通过Akka的Role来进行划分,3个角色分别为<code>collector</code>收集器,<code>interceptor</code>拦截器,<code>processor</code>处理器,3个子系统中的节点都是整个Akka集群中的成员.整个集群系统的数据流向是:<code>collector</code>接收数据,然后将数据发送到<code>interceptor</code>,<code>interceptor</code>接收到数据后,解析出真实IP地址,拦截存在于黑名单中的IP请求,如果IP地址不在黑名单,则发送给<code>processor</code>去转换为最终的模型,然后保存到Kafka中.</p>
<p>首先,我们需要定义的是几个子系统间传递的消息:</p>
<p><strong>EventMessages.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventMessages</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventMessage</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 内存中的Nginx的日志</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RawNginxRecord</span> <span class="keyword">extends</span> <span class="title">EventMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String sourceHost;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String line;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RawNginxRecord</span><span class="params">(String sourceHost, String line)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sourceHost = sourceHost;</span><br><span class="line">            <span class="keyword">this</span>.line = line;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> line;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSourceHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sourceHost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 解析出了事件内容的Nginx记录</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NginxRecord</span> <span class="keyword">extends</span> <span class="title">EventMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String sourceHost;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String eventCode;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NginxRecord</span><span class="params">(String sourceHost, String line, String eventCode)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sourceHost = sourceHost;</span><br><span class="line">            <span class="keyword">this</span>.line = line;</span><br><span class="line">            <span class="keyword">this</span>.eventCode = eventCode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSourceHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sourceHost;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> line;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getEventCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> eventCode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过了拦截器的日志记录</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FilteredRecord</span> <span class="keyword">extends</span> <span class="title">EventMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String sourceHost;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String eventCode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String logDate;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String realIp;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FilteredRecord</span><span class="params">(String sourceHost, String line, String eventCode, String logDate, String realIp)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sourceHost = sourceHost;</span><br><span class="line">            <span class="keyword">this</span>.line = line;</span><br><span class="line">            <span class="keyword">this</span>.eventCode = eventCode;</span><br><span class="line">            <span class="keyword">this</span>.logDate = logDate;</span><br><span class="line">            <span class="keyword">this</span>.realIp = realIp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSourceHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sourceHost;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> line;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getEventCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> eventCode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLogDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> logDate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getRealIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> realIp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 子系统注册的消息</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Registration</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是抽象出来的订阅集群事件相关的逻辑.</p>
<p><strong>ClusterRoledWorker.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClusterRoledWorker</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*记录日志*/</span></span><br><span class="line">    <span class="keyword">protected</span> LoggingAdapter log = Logging.getLogger(getContext().system(), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*集群系统*/</span></span><br><span class="line">    <span class="keyword">protected</span> Cluster cluster = Cluster.get(getContext().system());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来缓存下游注册过来的子系统ActorRef</span></span><br><span class="line">    <span class="keyword">protected</span> List&lt;ActorRef&gt; workers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 订阅集群事件</span></span><br><span class="line">        cluster.subscribe(getSelf(), ClusterEvent.initialStateAsEvents(), ClusterEvent.MemberUp.class,ClusterEvent.MemberEvent.class, ClusterEvent.UnreachableMember.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postStop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 取消事件监听</span></span><br><span class="line">        cluster.unsubscribe(getSelf());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下游子系统节点发送注册消息</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Member member,String actorPath)</span> </span>&#123;</span><br><span class="line">        ActorSelection actorSelection = getContext().actorSelection(actorPath);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*发送注册消息*/</span></span><br><span class="line">        actorSelection.tell(<span class="keyword">new</span> EventMessages.Registration(),getSelf());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后,就是对整个Akka的集群进行配置: </p>
<p><strong>demo8.conf</strong></p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">akka &#123;</span><br><span class="line">  actor &#123;</span><br><span class="line">    <span class="variable">provider =</span> <span class="string">"akka.cluster.ClusterActorRefProvider"</span></span><br><span class="line">  &#125;</span><br><span class="line">  remote &#123;</span><br><span class="line">    <span class="variable">log-remote-lifecycle-events =</span> off</span><br><span class="line">    netty.tcp &#123;</span><br><span class="line">      <span class="variable">hostname =</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">      <span class="variable">port =</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster &#123;</span><br><span class="line">    <span class="variable">seed-nodes =</span> [</span><br><span class="line">      <span class="string">"akka.tcp://event-cluster-system@127.0.0.1:2751"</span>,</span><br><span class="line">      <span class="string">"akka.tcp://event-cluster-system@127.0.0.1:2752"</span>,</span><br><span class="line">      <span class="string">"akka.tcp://event-cluster-system@127.0.0.1:2753"</span>]</span><br><span class="line">    <span class="variable">seed-node-timeout =</span> <span class="number">60</span>s</span><br><span class="line">    <span class="variable">auto-down-unreachable-after =</span> <span class="number">10</span>s</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就是Collector的实现,它是一个Acotr,继承自ClusterRoledWorker抽象类:</p>
<p><strong>EventCollector.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventCollector</span> <span class="keyword">extends</span> <span class="title">ClusterRoledWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger recordCounter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberUp) &#123;</span><br><span class="line">            ClusterEvent.MemberUp member = (ClusterEvent.MemberUp) message;</span><br><span class="line">            log.info(<span class="string">"Member is Up: &#123;&#125;"</span>, member.member().address());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.UnreachableMember) &#123;</span><br><span class="line">            ClusterEvent.UnreachableMember mUnreachable = (ClusterEvent.UnreachableMember) message;</span><br><span class="line">            log.info(<span class="string">"Member detected as unreachable: &#123;&#125;"</span>, mUnreachable.member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberRemoved) &#123;</span><br><span class="line">            ClusterEvent.MemberRemoved mRemoved = (ClusterEvent.MemberRemoved) message;</span><br><span class="line">            log.info(<span class="string">"Member is Removed: &#123;&#125;"</span>, mRemoved.member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberEvent) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">            log.info(<span class="string">"Member Event: &#123;&#125;"</span>, ((ClusterEvent.MemberEvent) message).member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> EventMessages.Registration) &#123;</span><br><span class="line">            <span class="comment">// watch发送注册消息的interceptor，如果对应的Actor终止了，会发送一个Terminated消息</span></span><br><span class="line">            getContext().watch(getSender());</span><br><span class="line">            workers.add(getSender());</span><br><span class="line">            log.info(<span class="string">"Interceptor registered: "</span> + getSender());</span><br><span class="line">            log.info(<span class="string">"Registered interceptors: "</span> + workers.size());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Terminated) &#123;</span><br><span class="line">            <span class="comment">// interceptor终止，更新缓存的ActorRef</span></span><br><span class="line">            Terminated terminated = (Terminated) message;</span><br><span class="line">            workers.remove(terminated.actor());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> EventMessages.RawNginxRecord) &#123;</span><br><span class="line">            EventMessages.RawNginxRecord rawNginxRecord = (EventMessages.RawNginxRecord) message;</span><br><span class="line">            String line = rawNginxRecord.getLine();</span><br><span class="line">            String sourceHost = rawNginxRecord.getSourceHost();</span><br><span class="line">            String eventCode = findEventCode(line);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构造NginxRecord消息，发送到下游interceptor</span></span><br><span class="line">            log.info(<span class="string">"Raw message: eventCode="</span> + eventCode + <span class="string">", sourceHost="</span> + sourceHost + <span class="string">", line="</span> + line);</span><br><span class="line">            <span class="keyword">int</span> counter = recordCounter.incrementAndGet();</span><br><span class="line">            <span class="keyword">if</span> (workers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 模拟Roudrobin方式，将日志记录消息发送给下游一组interceptor中的一个</span></span><br><span class="line">                <span class="keyword">int</span> interceptorIndex = (counter &lt; <span class="number">0</span> ? <span class="number">0</span> : counter) % workers.size();</span><br><span class="line">                workers.get(interceptorIndex).tell(<span class="keyword">new</span> EventMessages.NginxRecord(sourceHost, line, eventCode), getSelf());</span><br><span class="line">                log.info(<span class="string">"Details: interceptorIndex="</span> + interceptorIndex + <span class="string">", interceptors="</span> + workers.size());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">findEventCode</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"eventcode=(\\d+)"</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(line);</span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是Interceptor的实现,和Collector类似,同样是继承自<code>ClusterRoledWorker</code>抽象类:</p>
<p><strong>EventInterceptor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventInterceptor</span> <span class="keyword">extends</span> <span class="title">ClusterRoledWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger interceptedRecords = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*IP地址的正则表达式*/</span></span><br><span class="line">    <span class="keyword">private</span> Pattern IP_PATTERN = Pattern.compile(<span class="string">"[^\\s]+\\s+\\[([^\\]]+)\\].+\"(\\d+\\.\\d+\\.\\d+\\.\\d+)"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*黑名单*/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; blackIpList = Arrays.asList(<span class="string">"5.9.116.101"</span>, <span class="string">"103.42.176.138"</span>, <span class="string">"123.182.148.65"</span>, <span class="string">"5.45.64.205"</span>,</span><br><span class="line">            <span class="string">"27.159.226.192"</span>, <span class="string">"76.164.228.218"</span>, <span class="string">"77.79.178.186"</span>, <span class="string">"104.200.31.117"</span>,</span><br><span class="line">            <span class="string">"104.200.31.32"</span>, <span class="string">"104.200.31.238"</span>, <span class="string">"123.182.129.108"</span>, <span class="string">"220.161.98.39"</span>,</span><br><span class="line">            <span class="string">"59.58.152.90"</span>, <span class="string">"117.26.221.236"</span>, <span class="string">"59.58.150.110"</span>, <span class="string">"123.180.229.156"</span>,</span><br><span class="line">            <span class="string">"59.60.123.239"</span>, <span class="string">"117.26.222.6"</span>, <span class="string">"117.26.220.88"</span>, <span class="string">"59.60.124.227"</span>,</span><br><span class="line">            <span class="string">"142.54.161.50"</span>, <span class="string">"59.58.148.52"</span>, <span class="string">"59.58.150.85"</span>, <span class="string">"202.105.90.142"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberUp)&#123;</span><br><span class="line">            ClusterEvent.MemberUp member = (ClusterEvent.MemberUp) message;</span><br><span class="line">            log.info(<span class="string">"Member is Up: &#123;&#125;"</span>, member.member().address());</span><br><span class="line">            </span><br><span class="line">            register(member.member(), getCollectorPath(member.member()));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.CurrentClusterState) &#123;</span><br><span class="line"></span><br><span class="line">            ClusterEvent.CurrentClusterState state = (ClusterEvent.CurrentClusterState) message;</span><br><span class="line">            Iterable&lt;Member&gt; members = state.getMembers();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果加入Akka集群的成员节点是Up状态，并且是collector角色，则调用register向collector进行注册</span></span><br><span class="line">            members.forEach(o -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.status() == MemberStatus.up())&#123;</span><br><span class="line">                    register(o,getCollectorPath(o));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.UnreachableMember) &#123;</span><br><span class="line">            ClusterEvent.UnreachableMember mUnreachable = (ClusterEvent.UnreachableMember) message;</span><br><span class="line">            log.info(<span class="string">"Member detected as unreachable: &#123;&#125;"</span>, mUnreachable.member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberRemoved) &#123;</span><br><span class="line">            ClusterEvent.MemberRemoved mRemoved = (ClusterEvent.MemberRemoved) message;</span><br><span class="line">            log.info(<span class="string">"Member is Removed: &#123;&#125;"</span>, mRemoved.member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberEvent) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">            log.info(<span class="string">"Member Event: &#123;&#125;"</span>, ((ClusterEvent.MemberEvent) message).member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> EventMessages.Registration) &#123;</span><br><span class="line">            <span class="comment">// watch发送注册消息的interceptor，如果对应的Actor终止了，会发送一个Terminated消息</span></span><br><span class="line">            getContext().watch(getSender());</span><br><span class="line">            workers.add(getSender());</span><br><span class="line">            log.info(<span class="string">"Interceptor registered: "</span> + getSender());</span><br><span class="line">            log.info(<span class="string">"Registered interceptors: "</span> + workers.size());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Terminated) &#123;</span><br><span class="line">            <span class="comment">// interceptor终止，更新缓存的ActorRef</span></span><br><span class="line">            Terminated terminated = (Terminated) message;</span><br><span class="line">            workers.remove(terminated.actor());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> EventMessages.NginxRecord) &#123;</span><br><span class="line">            EventMessages.NginxRecord nginxRecord = (EventMessages.NginxRecord) message;</span><br><span class="line"></span><br><span class="line">            CheckRecord checkRecord = checkRecord(nginxRecord.getEventCode(), nginxRecord.getLine());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!checkRecord.isIpInBlackList)&#123;</span><br><span class="line">                <span class="keyword">int</span> records = interceptedRecords.incrementAndGet();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (workers.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> processorIndex = (records&lt;<span class="number">0</span>?<span class="number">0</span>:records) % workers.size();</span><br><span class="line">                    workers.get(processorIndex).tell(<span class="keyword">new</span> EventMessages.FilteredRecord(nginxRecord.getSourceHost(),nginxRecord.getLine(), nginxRecord.getEventCode() , checkRecord.data.get(<span class="string">"eventdate"</span>), checkRecord.data.get(<span class="string">"realip"</span>)),getSelf());</span><br><span class="line">                    log.info(<span class="string">"Details: processorIndex="</span> + processorIndex + <span class="string">", processors="</span> + workers.size());</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">"Intercepted data: data="</span> + checkRecord.data);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"Discarded: "</span> + nginxRecord.getLine());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 检查和解析每一行日志的记录</span><br><span class="line">     * <span class="doctag">@param</span> eventCode</span><br><span class="line">     * <span class="doctag">@param</span> line</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CheckRecord <span class="title">checkRecord</span><span class="params">(String eventCode,String line)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        Map&lt;String,String&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> isIpInBlackList = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Matcher matcher = IP_PATTERN.matcher(line);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            String rawDt = matcher.group(<span class="number">1</span>);</span><br><span class="line">            String realIp = matcher.group(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            data.put(<span class="string">"eventdate"</span>, rawDt);</span><br><span class="line">            data.put(<span class="string">"realip"</span>, realIp);</span><br><span class="line">            data.put(<span class="string">"eventcode"</span>, eventCode);</span><br><span class="line">            </span><br><span class="line">            isIpInBlackList = blackIpList.contains(realIp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheckRecord(isIpInBlackList,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取Collector的路径</span><br><span class="line">     * <span class="doctag">@param</span> member</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCollectorPath</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> member.address()+<span class="string">"/user/collectingActor"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckRecord</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> isIpInBlackList;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> Map&lt;String,String&gt; data;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CheckRecord</span><span class="params">(<span class="keyword">boolean</span> isIpInBlackList, Map&lt;String, String&gt; data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.isIpInBlackList = isIpInBlackList;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是Interceptor这个子系统的启动器:</p>
<p><strong>EventInterceptorMain.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventInterceptorMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> String port = args.length &gt; <span class="number">0</span> ? args[<span class="number">0</span>] : <span class="string">"0"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*修改配置文件中的端口和角色*/</span></span><br><span class="line">        <span class="keyword">final</span> Config config = ConfigFactory.parseString(<span class="string">"akka.remote.netty.tcp.port="</span> + port).</span><br><span class="line">                withFallback(ConfigFactory.parseString(<span class="string">"akka.cluster.roles = [interceptor]"</span>)).</span><br><span class="line">                withFallback(ConfigFactory.load(<span class="string">"demo8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"event-cluster-system"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*实例化EventInterceptor Actor*/</span></span><br><span class="line">        ActorRef interceptingActor = system.actorOf(Props.create(EventInterceptor.class), <span class="string">"interceptingActor"</span>);</span><br><span class="line"></span><br><span class="line">        system.log().info(<span class="string">"Processing Actor: "</span> + interceptingActor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在接着就是Processor的实现了:</p>
<p><strong>EventProcessor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventProcessor</span> <span class="keyword">extends</span> <span class="title">ClusterRoledWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*内容的正则表达式*/</span></span><br><span class="line">    <span class="keyword">private</span> Pattern PATTERN = Pattern.compile(<span class="string">"[\\?|&amp;]([^=]+)=([^&amp;]+)&amp;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*kafka的连接工具*/</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate = <span class="keyword">new</span> KafkaTemplate(<span class="string">"127.0.0.1:8092"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberUp) &#123;</span><br><span class="line">            ClusterEvent.MemberUp member = (ClusterEvent.MemberUp) message;</span><br><span class="line">            log.info(<span class="string">"Member is Up: &#123;&#125;"</span>, member.member().address());</span><br><span class="line"></span><br><span class="line">            register(member.member(), getProcessorPath(member.member()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.CurrentClusterState) &#123;</span><br><span class="line"></span><br><span class="line">            ClusterEvent.CurrentClusterState state = (ClusterEvent.CurrentClusterState) message;</span><br><span class="line">            Iterable&lt;Member&gt; members = state.getMembers();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果加入Akka集群的成员节点是Up状态，并且是collector角色，则调用register向collector进行注册</span></span><br><span class="line">            members.forEach(o -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.status() == MemberStatus.up()) &#123;</span><br><span class="line">                    register(o, getProcessorPath(o));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.UnreachableMember) &#123;</span><br><span class="line">            ClusterEvent.UnreachableMember mUnreachable = (ClusterEvent.UnreachableMember) message;</span><br><span class="line">            log.info(<span class="string">"Member detected as unreachable: &#123;&#125;"</span>, mUnreachable.member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberRemoved) &#123;</span><br><span class="line">            ClusterEvent.MemberRemoved mRemoved = (ClusterEvent.MemberRemoved) message;</span><br><span class="line">            log.info(<span class="string">"Member is Removed: &#123;&#125;"</span>, mRemoved.member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ClusterEvent.MemberEvent) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">            log.info(<span class="string">"Member Event: &#123;&#125;"</span>, ((ClusterEvent.MemberEvent) message).member());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> EventMessages.FilteredRecord) &#123;</span><br><span class="line">            EventMessages.FilteredRecord filteredRecord = (EventMessages.FilteredRecord) message;</span><br><span class="line">            <span class="comment">/*处理每一行日志内容,转换成Map模型*/</span></span><br><span class="line">            Map&lt;String, String&gt; data = process(filteredRecord.getEventCode(), filteredRecord.getLine(), filteredRecord.getLogDate(), filteredRecord.getRealIp());</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"Processed: data="</span> + data);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将解析后的消息一JSON字符串的格式，保存到Kafka中</span></span><br><span class="line">            kafkaTemplate.convertAndSend(<span class="string">"app_events"</span>, JSON.toJSONString(data));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; process(String eventCode, String line, String logDate, String realIp) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        Matcher matcher = PATTERN.matcher(line);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            String key = matcher.group(<span class="number">1</span>);</span><br><span class="line">            String value = matcher.group(<span class="number">2</span>);</span><br><span class="line">            data.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data.put(<span class="string">"eventdate"</span>, logDate);</span><br><span class="line">        data.put(<span class="string">"realip"</span>, realIp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getProcessorPath</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> member.address()+<span class="string">"/user/interceptingActor"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面涉及到kafka消息的发送,我使用了一个工具类来进行消息的发送:</p>
<p><strong>KafkaTemplate.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Producer&lt;String, Serializable&gt; producer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaTemplate</span><span class="params">(String urls)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"metadata.broker.list"</span>, urls);</span><br><span class="line">        props.put(<span class="string">"serializer.class"</span>, <span class="string">"cn.sunxiang0918.akka.demo8.kafka.ObjectEncoder"</span>);</span><br><span class="line">        props.put(<span class="string">"request.required.acks"</span>, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        ProducerConfig config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line"></span><br><span class="line">        producer = <span class="keyword">new</span> Producer&lt;&gt;(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertAndSend</span><span class="params">(String destinationName, Object message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> message <span class="keyword">instanceof</span> Serializable;</span><br><span class="line">        KeyedMessage&lt;String, Serializable&gt; data = <span class="keyword">new</span> KeyedMessage&lt;&gt;(destinationName, destinationName, (Serializable) message);</span><br><span class="line">        producer.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDecoder</span> <span class="keyword">implements</span> <span class="title">Decoder</span>&lt;<span class="title">Serializable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectDecoder</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectDecoder</span><span class="params">(VerifiableProperties props)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.encoding = props == null?"UTF8":props.getString("serializer.encoding", "UTF8");</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">fromBytes</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return (Serializable) SerializationUtils.deserialize(bytes);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">            <span class="keyword">return</span> (Serializable) ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Failed to deserialize object"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to deserialize object type"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectEncoder</span> <span class="keyword">implements</span> <span class="title">Encoder</span>&lt;<span class="title">Serializable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectEncoder</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectEncoder</span><span class="params">(VerifiableProperties props)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.encoding = props == null?"UTF8":props.getString("serializer.encoding", "UTF8");</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] toBytes(Serializable object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">            oos.writeObject(object);</span><br><span class="line">            oos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Failed to serialize object of type: "</span> + object.getClass(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样需要Processor子系统的启动器:</p>
<p><strong>EventProcessorMain.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventProcessorMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String port = args.length &gt; <span class="number">0</span> ? args[<span class="number">0</span>] : <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Config config = ConfigFactory.parseString(<span class="string">"akka.remote.netty.tcp.port="</span> + port).</span><br><span class="line">                withFallback(ConfigFactory.parseString(<span class="string">"akka.cluster.roles = [processor]"</span>)).</span><br><span class="line">                withFallback(ConfigFactory.load(<span class="string">"demo8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"event-cluster-system"</span>, config);</span><br><span class="line"></span><br><span class="line">        ActorRef processingActor = system.actorOf(Props.create(EventProcessor.class), <span class="string">"processingActor"</span>);</span><br><span class="line"></span><br><span class="line">        system.log().info(<span class="string">"Processing Actor: "</span> + processingActor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后就是需要写一个模拟的发送日志的客户端了,并且包含了Collector子系统的启动器:</p>
<p><strong>EventClient.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*假的Nginx的日志,Key是Nginx的端口,Value是日志内容,一行一个*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,List&lt;String&gt;&gt; events=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/*构造假的日志内容*/</span></span><br><span class="line">        events.put(<span class="number">2751</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        events.put(<span class="number">2752</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        events.put(<span class="number">2753</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        events.get(<span class="number">2751</span>).add(<span class="string">"\"\"10.10.2.72 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000lAOX&amp;udid=25371384b2eb1a5dc5643e14626ecbd4&amp;sessionid=25371384b2eb1a5dc5643e14626ecbd41440152875362&amp;imsi=460002830862833&amp;operator=1&amp;network=1&amp;timestamp=1440152954&amp;action=14&amp;eventcode=300039&amp;page=200002&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.4.4; R8207 Build/KTU84P)\" \"121.25.190.146\"\"\""</span>);</span><br><span class="line">        events.get(<span class="number">2751</span>).add(<span class="string">"\"\"10.10.2.8 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000VACO&amp;udid=f6b0520cbc36fda6f63a72d91bf305c0&amp;imsi=460012927613645&amp;operator=2&amp;network=1&amp;timestamp=1440152956&amp;action=1840&amp;eventcode=100003&amp;type=1&amp;result=0&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.4.2; GT-I9500 Build/KOT49H)\" \"61.175.219.69\"\"\""</span>);</span><br><span class="line"></span><br><span class="line">        events.get(<span class="number">2752</span>).add(<span class="string">"\"\"10.10.2.72 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000gCo4&amp;udid=636d127f4936109a22347b239a0ce73f&amp;sessionid=636d127f4936109a22347b239a0ce73f1440150695096&amp;imsi=460036010038180&amp;operator=3&amp;network=4&amp;timestamp=1440152902&amp;action=1566&amp;eventcode=101010&amp;playid=99d5a59f100cb778b64b5234a189e1f4&amp;radioid=1100000048450&amp;audioid=1000001535718&amp;playtime=3&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.4.4; R8205 Build/KTU84P)\" \"106.38.128.67\"\"\""</span>);</span><br><span class="line">        events.get(<span class="number">2752</span>).add(<span class="string">"\"\"10.10.2.72 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000kPSC&amp;udid=2ee585cde388ac57c0e81f9a76f5b797&amp;operator=0&amp;network=1&amp;timestamp=1440152968&amp;action=6423&amp;eventcode=100003&amp;type=1&amp;result=0&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/v3.3.85 (Linux; U; Android L; P8 Build/KOT49H)\" \"202.103.133.112\"\"\""</span>);</span><br><span class="line">        events.get(<span class="number">2752</span>).add(<span class="string">"\"\"10.10.2.72 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000lABW&amp;udid=face1161d739abacca913dcb82576e9d&amp;sessionid=face1161d739abacca913dcb82576e9d1440151582673&amp;operator=0&amp;network=1&amp;timestamp=1440152520&amp;action=1911&amp;eventcode=101010&amp;playid=b07c241010f8691284c68186c42ab006&amp;radioid=1100000000762&amp;audioid=1000001751983&amp;playtime=158&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.1; H5 Build/JZO54K)\" \"221.232.36.250\"\"\""</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        events.get(<span class="number">2753</span>).add(<span class="string">"\"\"10.10.2.8 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000krJw&amp;udid=939488333889f18e2b406d2ece8f938a&amp;sessionid=939488333889f18e2b406d2ece8f938a1440137301421&amp;imsi=460028180045362&amp;operator=1&amp;network=1&amp;timestamp=1440152947&amp;action=1431&amp;eventcode=300030&amp;playid=e1fd5467085475dc4483d2795f112717&amp;radioid=1100000001123&amp;audioid=1000000094911&amp;playtime=951992&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/1.6.0 (Linux; U; Android 4.0.4; R813T Build/IMM76D)\" \"5.45.64.205\"\"\""</span>);</span><br><span class="line">        events.get(<span class="number">2753</span>).add(<span class="string">"\"\"10.10.2.72 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000kcpz&amp;udid=cbc7bbb560914c374cb7a29eef8c2144&amp;sessionid=cbc7bbb560914c374cb7a29eef8c21441440152816008&amp;imsi=460008782944219&amp;operator=1&amp;network=1&amp;timestamp=1440152873&amp;action=360&amp;eventcode=200003&amp;page=200003&amp;radioid=1100000046018&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/v3.3.85 (Linux; U; Android 4.4.2; MX4S Build/KOT49H)\" \"119.128.106.232\"\"\""</span>);</span><br><span class="line">        events.get(<span class="number">2753</span>).add(<span class="string">"\"\"10.10.2.8 [21/Aug/2015:18:29:19 +0800] \"GET /t.gif?installid=0000juRL&amp;udid=3f9a5ffa69a5cd5f0754d2ba98c0aeb2&amp;imsi=460023744091238&amp;operator=1&amp;network=1&amp;timestamp=1440152957&amp;action=78&amp;eventcode=100003&amp;type=1&amp;result=0&amp; HTTP/1.0\" \"-\" 204 0 \"-\" \"Dalvik/v3.3.85 (Linux; U; Android 4.4.3; S?MSUNG. Build/KOT49H)\" \"223.153.72.78\"\"\""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; ports = Arrays.asList(<span class="number">2751</span>,<span class="number">2752</span>, <span class="number">2753</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,ActorRef&gt; actors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*根据端口号的多少,启动多少个Collector在集群中*/</span></span><br><span class="line">        ports.forEach(port -&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> Config config = ConfigFactory.parseString(<span class="string">"akka.remote.netty.tcp.port="</span> + port).</span><br><span class="line">                    withFallback(ConfigFactory.parseString(<span class="string">"akka.cluster.roles = [collector]"</span>)).</span><br><span class="line">                    withFallback(ConfigFactory.load(<span class="string">"demo8"</span>));</span><br><span class="line">            <span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"event-cluster-system"</span>, config);</span><br><span class="line"></span><br><span class="line">            ActorRef collectingActor = system.actorOf(Props.create(EventCollector.class), <span class="string">"collectingActor"</span>);</span><br><span class="line"></span><br><span class="line">            actors.put(port,collectingActor);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*使用JDK中的scheduleAtFixedRate,每5秒发送一次日志给Collector*/</span></span><br><span class="line">        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">        service.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            ports.forEach(port -&gt; &#123;</span><br><span class="line">                events.get(port).forEach(line -&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">"RAW: port="</span> + port + <span class="string">", line="</span> + line);</span><br><span class="line">                    actors.get(port).tell(<span class="keyword">new</span> EventMessages.RawNginxRecord(<span class="string">"host.me:"</span> + port, line),ActorRef.noSender());</span><br><span class="line">                &#125; );</span><br><span class="line">            &#125; );</span><br><span class="line">        &#125;,<span class="number">0</span>,<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后就是整个Demo的入口:</p>
<p><strong>Demo8App.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动一个Client</span></span><br><span class="line">        EventClient.main(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动两个Interceptor</span></span><br><span class="line">        EventInterceptorMain.main(<span class="keyword">new</span> String[] &#123; <span class="string">"2851"</span> &#125;);</span><br><span class="line">        EventInterceptorMain.main(<span class="keyword">new</span> String[] &#123; <span class="string">"2852"</span> &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动两个Processor</span></span><br><span class="line">        EventProcessorMain.main(<span class="keyword">new</span> String[]&#123;<span class="string">"2951"</span>&#125;);</span><br><span class="line">        EventProcessorMain.main(<span class="keyword">new</span> String[]&#123;<span class="string">"2952"</span>&#125;);</span><br><span class="line">        EventProcessorMain.main(<span class="keyword">new</span> String[]&#123;<span class="string">"2953"</span>&#125;);</span><br><span class="line">        EventProcessorMain.main(<span class="keyword">new</span> String[]&#123;<span class="string">"2954"</span>&#125;);</span><br><span class="line">        EventProcessorMain.main(<span class="keyword">new</span> String[]&#123;<span class="string">"2955"</span>&#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当执行了这个Demo后,首先会看到的就是和上一篇博客中一样的集群启动和加入的消息.而后会看到每5秒接收到一批Nginx的日志,并发送给Kafka.这时可以通过Kafka的客户端看到这些处理后的日志:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">installid</span>":<span class="value"><span class="string">"0000VACO"</span></span>,"<span class="attribute">imsi</span>":<span class="value"><span class="string">"460012927613645"</span></span>,"<span class="attribute">network</span>":<span class="value"><span class="string">"1"</span></span>,"<span class="attribute">action</span>":<span class="value"><span class="string">"1840"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"1"</span></span>,"<span class="attribute">eventdate</span>":<span class="value"><span class="string">"2015-08-21 18:29:19"</span></span>,"<span class="attribute">realip</span>":<span class="value"><span class="string">"61.175.219.69"</span></span>&#125;</span><br><span class="line">&#123;"<span class="attribute">installid</span>":<span class="value"><span class="string">"0000kcpz"</span></span>,"<span class="attribute">sessionid</span>":<span class="value"><span class="string">"cbc7bbb560914c374cb7a29eef8c21441440152816008"</span></span>,"<span class="attribute">operator</span>":<span class="value"><span class="string">"1"</span></span>,"<span class="attribute">timestamp</span>":<span class="value"><span class="string">"1440152873"</span></span>,"<span class="attribute">eventcode</span>":<span class="value"><span class="string">"200003"</span></span>,"<span class="attribute">radioid</span>":<span class="value"><span class="string">"1100000046018"</span></span>,"<span class="attribute">eventdate</span>":<span class="value"><span class="string">"2015-08-21 18:29:19"</span></span>,"<span class="attribute">realip</span>":<span class="value"><span class="string">"119.128.106.232"</span></span>&#125;</span><br><span class="line">&#123;"<span class="attribute">installid</span>":<span class="value"><span class="string">"0000lAOX"</span></span>,"<span class="attribute">sessionid</span>":<span class="value"><span class="string">"25371384b2eb1a5dc5643e14626ecbd41440152875362"</span></span>,"<span class="attribute">operator</span>":<span class="value"><span class="string">"1"</span></span>,"<span class="attribute">timestamp</span>":<span class="value"><span class="string">"1440152954"</span></span>,"<span class="attribute">eventcode</span>":<span class="value"><span class="string">"300039"</span></span>,"<span class="attribute">eventdate</span>":<span class="value"><span class="string">"2015-08-21 18:29:19"</span></span>,"<span class="attribute">realip</span>":<span class="value"><span class="string">"121.25.190.146"</span></span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>经过这四篇的博客,简单的介绍了一下Akka是什么,大概的用处是什么,以及Akka在JAVA中该如何的使用.由于篇幅以及本人经验的原因,还有很多都没有讲到,以后如有涉及,再慢慢的补上.总之,Akka是一个非常强大的框架,在现在大数据,高性能,分布式的环境下可以发挥很多的作用,各位可以试一试.</p>
<p>PS:本系列文章中所有的Demo的源码已上传至<a href="https://github.com/sunxiang0918/AkkaDemo" target="_blank" rel="external">GitHub</a>中.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Akka_in_JAVA(四)">Akka in JAVA(四)</h1><p>最后这个部分讲一讲AKKA中的事件消息类型. 在Akka中主要是有三种消息类型,每一种类型对应了不同的使用场景.他们分别是:<code>Fire and Forget模式</code>,<code>Send and Receive模式</code>和<code>Publisher-Subscriber模式</code>.</p>
<h2 id="Fire_and_Forget模式">Fire and Forget模式</h2><p>这种发送消息的模式是Akka中所推荐的,也是我们前面一直在使用的方式.也就是单向消息模式,Actor在发送消息之后,并不需要获取响应.这种方式在JAVA中需要使用<code>ActorRef</code>或<code>ActorSelection</code>的<code>tell</code>方法.和消息队列类似,直接调用该方法即可,程序不会阻塞,会直接执行后面的操作,但是消息已经发送给目标的Actor了.这种方式的具体使用方法前面已经列举了很多了,这里就不再重复的举例了.</p>
<h2 id="Send_and_Receive模式">Send and Receive模式</h2><p>这种发送消息的模式是双向的,当Actor在发送消息之后,会接收到一个Future对象.和JAVA的Future一样,通过这个可以异步的接收到对方的结果消息.</p>
<p>在整个AKKA中,提供了一套完整的Future机制,不光是在Actor传递消息间可以使用,也可以在非Actor中直接使用.</p>]]>
    
    </summary>
    
      <category term="Akka" scheme="http://sunxiang0918.github.io/tags/Akka/"/>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<转>使用Swift的面向协议编程定义Segue标识]]></title>
    <link href="http://sunxiang0918.github.io/2016/02/01/%E4%BD%BF%E7%94%A8Swift%E7%9A%84%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%E5%AE%9A%E4%B9%89Segue%E6%A0%87%E8%AF%86/"/>
    <id>http://sunxiang0918.github.io/2016/02/01/使用Swift的面向协议编程定义Segue标识/</id>
    <published>2016-02-01T03:57:15.000Z</published>
    <updated>2016-02-01T05:33:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="使用Swift的面向协议编程定义Segue标识">使用Swift的面向协议编程定义Segue标识</h1><p>作者：<a href="https://www.natashatherobot.com/protocol-oriented-segue-identifiers-swift/" target="_blank" rel="external">Natasha</a>，原文链接，原文日期：2015-12-17<br>译者：<a href="http://www.jianshu.com/users/3b40e55ec6d5/latest_articles" target="_blank" rel="external">小锅</a>；校对：<a href="http://swift.gg/2016/02/01/protocol-oriented-segue-identifiers-swift/undefined" target="_blank" rel="external">&amp;nbsp</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
<p>回溯到八月份，我观看了 <a href="https://developer.apple.com/videos/play/wwdc2015-411/" target="_blank" rel="external">Swift in Practice WWDC15 </a>这个超赞的视频。视频的第一部分让我印象十分深刻，因此我针对这部分写了一篇博客—— <a href="http://natashatherobot.com/non-optional-uiimage-named-swift/" target="_blank" rel="external">A Beautiful Solution to Non-Optional UIImage Named in Swift</a> ——然后我最终开始准备写关于这个视频的第二部分，甚至其它更多令人激动的部分（毕竟，假期是最好的写博客的时机）（译者注：大神就是这样啊，假期不是用来玩的，反而是写博客的大好时机）。<br>这次，我准备写的是：<strong>处理多个 segue 标识的优雅解决方案。</strong>你猜对了！就是使用协议。</p>
<p>今天就让我们开始针对你的选择展开旅程吧。你会选择：红色药丸还是蓝色药丸…（译者注：如果你看不懂这个梗的话，我建议你去补习一下黑客帝国）<br><img src="/img/2016/02/01/1.png" alt=""></p>
<a id="more"></a>
<h2 id="问题的出现">问题的出现</h2><p>很不幸地，Segue 标识一般都是基于字符串的硬编码。当它们与 Storyboard 一起使用时，你必须在代码当中到处复制这些字符串 – 这确实很容易产生错误拼写的情况。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">onRedPillButtonTap</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">    	 <span class="comment">// 我在这里硬编码了红色药丸的segue标识</span></span><br><span class="line">        performSegueWithIdentifier(<span class="string">"TheRedPillExperience"</span>, sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">onBluePillButtonTap</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">    	 <span class="comment">// 我在这里硬编码了蓝色药丸的segue标识</span></span><br><span class="line">        performSegueWithIdentifier(<span class="string">"TheBluePillExperience"</span>, sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当然，将来如果你决定要改变一个 segue 的标识，你就必须在硬编码这些字符串的全部地方去修改它们的名称。这当然就有可能导致更多潜在的错误，比如错误的复制/粘贴以及错误的拼写。</p>
<p>为了减少错误情况的发生，当一个 ViewController 中使用到了多个 segue 的标识时，我都使用枚举来处理。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">SegueIdentifier</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">TheRedPillExperience</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">TheBluePillExperience</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>但是这又带来了别的问题。最主要的就是代码的丑陋和臃肿：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">onRedPillButtonTap</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 这行代码有点长了</span></span><br><span class="line">        performSegueWithIdentifier(<span class="type">SegueIdentifier</span>.<span class="type">TheRedPillExperience</span>.rawValue, sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">onBluePillButtonTap</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 这个也很长</span></span><br><span class="line">        performSegueWithIdentifier(<span class="type">SegueIdentifier</span>.<span class="type">TheBluePillExperience</span>.rawValue, sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当我们处理 <code>prepareForSegue</code> 时，这个问题就更加明显了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">prepareForSegue</span><span class="params">(segue: UIStoryboardSegue, sender: AnyObject?)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解包所有东西！！！</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> identifier = segue.identifier &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> segueIdentifier = <span class="type">SegueIdentifier</span>(rawValue: identifier) &#123;</span><br><span class="line">                <span class="keyword">switch</span> segueIdentifier &#123;</span><br><span class="line">                <span class="keyword">case</span> .<span class="type">TheRedPillExperience</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"😈"</span>)</span><br><span class="line">                <span class="keyword">case</span> .<span class="type">TheBluePillExperience</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"👼"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这是我在 Swift 2.0 之前实际使用过的方式。现在我们至少可以使用 guard 关键字来避免所谓的“金字塔噩梦”，但是这依然还是不够好：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">prepareForSegue</span><span class="params">(segue: UIStoryboardSegue, sender: AnyObject?)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        guard <span class="keyword">let</span> identifier = segue.identifier,</span><br><span class="line">            segueIdentifier = <span class="type">SegueIdentifier</span>(rawValue: identifier) <span class="keyword">else</span> &#123;</span><br><span class="line">            fatalError(<span class="string">"Invalid segue identifier <span class="subst">\(segue.identifier)</span>."</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> segueIdentifier &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">TheRedPillExperience</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"😈"</span>)</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">TheBluePillExperience</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"👼"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>毕竟，在整个app中的每个视图控制器都会碰到这个问题。你会如何来让这些代码更加整洁呢？机智如你，应该已经猜到了，协议可以用来解决这个问题。</p>
<h2 id="解决方案">解决方案</h2><p>这是一个靠我自己无法想出的优雅解决方案。感谢苹果在今年 WWDC 中关于架构的超赞演讲。我是认真的，真的超赞。<br>首先，创建一个 SegueHandlerType 来将 Segueidentifier 枚举标识为一个类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  SegueHandlerType.swift</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="type">UIKit</span></span><br><span class="line"><span class="keyword">import</span> <span class="type">Foundation</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SegueHandlerType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">SegueIdentifier</span>: <span class="type">RawRepresentable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在可以使用协议扩展的功能来为 UIViewController 创建基于字符串的 Segueidentifer 枚举：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  SegueHandlerType.swift</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 注意这里我们使用了 where 来让这个方法只适用于特定的类 😍</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SegueHandlerType</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span>,</span><br><span class="line">    <span class="title">SegueIdentifier</span>.<span class="title">RawValue</span> == <span class="title">String</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">performSegueWithIdentifier</span><span class="params">(segueIdentifier: SegueIdentifier,</span><br><span class="line">        sender: AnyObject?)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        performSegueWithIdentifier(segueIdentifier.rawValue, sender: sender)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">segueIdentifierForSegue</span><span class="params">(segue: UIStoryboardSegue)</span></span> -&gt; <span class="type">SegueIdentifier</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里还是需要使用 guard 语句，但是至少我们可以获取到变量的值  </span></span><br><span class="line">        guard <span class="keyword">let</span> identifier = segue.identifier,</span><br><span class="line">            segueIdentifier = <span class="type">SegueIdentifier</span>(rawValue: identifier) <span class="keyword">else</span> &#123; </span><br><span class="line">                fatalError(<span class="string">"Invalid segue identifier <span class="subst">\(segue.identifier)</span>."</span>) &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> segueIdentifier</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以注意到，协议扩展中的方法并没有在协议中声明，它们不是用于被重写的。这是我见过的关于这个用例的最好的使用方法。<br>现在这样，使用起来就更加的简单和漂亮了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="type">UIKit</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 只需要让 UIViewController 遵守 SegueHandlerType，简直太 easy 了有没有 🎂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">SegueHandlerType</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 现在你如果不实现这个方法，编译器就会报错</span></span><br><span class="line">    <span class="comment">// 遵守 SegueHandlerType 协议需要实现这个方法</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">SegueIdentifier</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">TheRedPillExperience</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">TheBluePillExperience</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">prepareForSegue</span><span class="params">(segue: UIStoryboardSegue, sender: AnyObject?)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 🎉 再见！金字塔噩梦！</span></span><br><span class="line">        <span class="keyword">switch</span> segueIdentifierForSegue(segue) &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">TheRedPillExperience</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"😈"</span>)</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">TheBluePillExperience</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"👼"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">onRedPillButtonTap</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        <span class="comment">// ✅ 这才是我想写的代码！太优雅了！</span></span><br><span class="line">        performSegueWithIdentifier(.<span class="type">TheRedPillExperience</span>, sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">onBluePillButtonTap</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        performSegueWithIdentifier(.<span class="type">TheBluePillExperience</span>, sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>在视频中提到的关于使用 <strong>SegueHandlerType</strong> 的好处有：</p>
<ul>
<li>如果使用了未定义的 segue 标识，就会有编译期错误</li>
<li>更好地支持重用</li>
<li>方便的语法</li>
</ul>
<p>我们同时还见识到了协议的强大：</p>
<ul>
<li>使用协议以及关联类型来让整个app的约束更紧密</li>
<li>使用特定的协议扩展来共享方法的实现</li>
</ul>
<p>这里面最大的好处就是利用了编译器的优势。你如果使用了这种方法来构建你的代码，编译器将会与你同在，当你犯错时，它就会提醒你。</p>
<p>你可以在<a href="https://github.com/NatashaTheRobot/POSegueIdentifiers" target="_blank" rel="external">Github 上下载到完整的示例程序。</a></p>
<pre><code>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <span class="string">http:</span><span class="comment">//swift.gg。</span>
</code></pre><hr>
<p>原文链接: <a href="http://swift.gg/2016/02/01/protocol-oriented-segue-identifiers-swift/" target="_blank" rel="external">http://swift.gg/2016/02/01/protocol-oriented-segue-identifiers-swift/</a></p>
<p>转载这篇文章的主要原因就是我也遇到了这个问题.在开发IOS程序的时候遇到了大量的这类的东西,当时是使用了全局的常量类来解决的,也是很不优雅.  同时,这个文章也提供了一个思路,以后遇到类似的问题都可以使用 协议扩展的方式来有眼的解决.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="使用Swift的面向协议编程定义Segue标识">使用Swift的面向协议编程定义Segue标识</h1><p>作者：<a href="https://www.natashatherobot.com/protocol-oriented-segue-identifiers-swift/">Natasha</a>，原文链接，原文日期：2015-12-17<br>译者：<a href="http://www.jianshu.com/users/3b40e55ec6d5/latest_articles">小锅</a>；校对：<a href="http://swift.gg/2016/02/01/protocol-oriented-segue-identifiers-swift/undefined">&amp;nbsp</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
<p>回溯到八月份，我观看了 <a href="https://developer.apple.com/videos/play/wwdc2015-411/">Swift in Practice WWDC15 </a>这个超赞的视频。视频的第一部分让我印象十分深刻，因此我针对这部分写了一篇博客—— <a href="http://natashatherobot.com/non-optional-uiimage-named-swift/">A Beautiful Solution to Non-Optional UIImage Named in Swift</a> ——然后我最终开始准备写关于这个视频的第二部分，甚至其它更多令人激动的部分（毕竟，假期是最好的写博客的时机）（译者注：大神就是这样啊，假期不是用来玩的，反而是写博客的大好时机）。<br>这次，我准备写的是：<strong>处理多个 segue 标识的优雅解决方案。</strong>你猜对了！就是使用协议。</p>
<p>今天就让我们开始针对你的选择展开旅程吧。你会选择：红色药丸还是蓝色药丸…（译者注：如果你看不懂这个梗的话，我建议你去补习一下黑客帝国）<br><img src="/img/2016/02/01/1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用UniqueID的生成方法]]></title>
    <link href="http://sunxiang0918.github.io/2016/01/24/%E5%B8%B8%E7%94%A8UniqueID%E7%9A%84%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"/>
    <id>http://sunxiang0918.github.io/2016/01/24/常用UniqueID的生成方法/</id>
    <published>2016-01-24T12:58:39.000Z</published>
    <updated>2016-01-27T08:57:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="常用UniqueID的生成方法">常用UniqueID的生成方法</h1><p>这几天在与其他的系统进行联调的时候,出现了对方的唯一ID使用的是<code>Int32</code>来存储,而我们提供的UniqueID是标准的UUID,从而导致他们无法存储的问题.由于他们是一个历史的老系统,牵扯很深,所以无法进行改造,只能我们来适应它(幸好和它们交互的数据不会太多.应该不会超过Int32的上限).从而引出了对UniqueID生成方法的思考.这里列出了几种常用的UniqueID的生成办法.</p>
<h2 id="基于数据库的发号器">基于数据库的发号器</h2><p>这个是最常见和最容易想到的生成UniqueID的方法.也就是依赖数据库的自增ID来获取唯一ID,由于在分布式系统中数据库都是做了分布式或同步的,因此能保证数据库的自增键或序列是不会重复的.</p>
<ul>
<li>在Oracle中,可以创建一个序列,然后使用序列的<code>nextVal</code>来获取.</li>
<li>在Mysql中,由于没有序列的概念,只能创建一个表,表的主键设置为自增.要获取UniqueID的时候就不断的往这个表中插入记录,获取<code>last_insert_id()</code>即可.为了避免表的记录数过多,可以考虑采用使用回滚的方式来规避.</li>
<li>在redis中,可以使用<code>INCR key</code>这个命令来获取一个自增的key,每调用一次,key值增加1.如果没有这个key值,则初始化key值为0.</li>
</ul>
<p>使用这种方案的优点就是可以满足像<code>Int32</code>这种短数据的唯一.而缺点就是增加了系统的复杂性.需要在系统中强依赖数据库,并且获取<code>UniqueID</code>是需要与数据库交互的,虽然可以一次批量的获取几个ID,但是总体来说,性能会有损失.</p>
<a id="more"></a>
<h2 id="基于规则计算的UniqueID">基于规则计算的UniqueID</h2><p>这一大类就是通过某些计算的规则,在分布式的每台机器上独立计算获取UniqueID,最常见的就是UUID了.</p>
<h3 id="UUID">UUID</h3><p>UUID全称<code>Universally Unique IDentifier</code>.它是由OSF(开源软件基金会 Open Software Foundation)所颁布的一种唯一ID计算的规则.它是一个可以表示层32个16进制字符的128bit的数字.中间用<code>-</code>符号分隔.常见的形式为:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.<br>其中前面的16个字符表示的是时间戳和UUID版本号,接下来的4个字符表示的是时间序列以及保留字段,最后12个字符是节点标识.</p>
<p>目前有Version1-5 5个版本:</p>
<ul>
<li><strong>Version1</strong>:基于时间的UUID,这个版本的UUID可以保证在全球范围内的唯一性.<br>  这个版本有60位的字节来表示时间,精确到纳秒,因此基本上保证了时间上的不重复,并且最后还有48位字节的节点信息,是由MAC地址等硬件信息来表达的.中间的16位时钟序列则用于避免其他信息改变(机器时间错误,MAC地址手动填写冲突等)的情况下增加的一个随机码. 基本上可以说这个版本的UUID就可以满足高并发的分布式系统下的UniqueID的唯一.</li>
<li><strong>Version2</strong>:DCE安全的UUID,这个版本的UUID的算法和Version1的是相同的,但是会把时间戳的前4位置换为POSIX的UID或GID.这个版本的UUID使用的比较少.</li>
<li><strong>Version3</strong>:基于名字MD5的UUID,这个版本的UUID通过计算名字和名字空间的MD5散列值而得到结果.这个版本的UUID保证了:相同命名空间中不同名字生成的UUID是唯一的,不同命名空间中的UUID的唯一性,但是相同名字空间中相同名字的UUID是可能会重复的.因此,一般不用作UniqueID的生成.</li>
<li><strong>Version4</strong>:这个版本也是使用的比较多的,也是JAVA中<code>UUID.randomUUID()</code>方法的实现规则.它不关心UUID的各个位置上的规则,直接使用<code>SecureRandom</code>生成16个随机的字节.然后把第6个字节设置为<code>Version4</code>,把第8个字节设置为<code>IETF</code>标识.</li>
<li><strong>Version5</strong>:基于名字SHA1的UUID,这个版本的UUID算法和Version3的是一样的,只是把名字和命名空间的散列算法改为了SHA1</li>
</ul>
<p>从这几个版本中可以看出,<code>Version1</code>和<code>Version2</code>是最适合于分布式计算环境下,具有高度唯一性的UniqueID,而<code>Version3</code>和<code>Version5</code>适用于一定范围内名字唯一的情况.而<code>Version4</code>在分布式的情况下,最好不要用,虽然是随机的,但是说不准在高并发的情况下,就有可能重复.<br>因此,如果要在JAVA中生成Version1的UUID,可以使用以下这个jar包</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.eaio.uuid<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>uuid<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="MongoDB的ObjectID">MongoDB的ObjectID</h3><p>在Mongo数据库中,每一个文档必须有一个”_id”建,默认情况下这个是一个ObjectId的值.而ObjectId就是使用了序列计算的方式来获取这个唯一值.</p>
<p>ObjectID使用了12个字节来进行存储,每个字节表示两位十六进制数字,是一个24位的字符串.<br>它的前4位表示的是时间戳,单位为秒.通过这个可以大致的保证唯一性,并且可以通过这4个字符来获取文档的创建时间.<br>接下来的3字节是所在主机的唯一标识符,通常是机器的主机名的散列值.<br>再后面的两字节表示的是生成这个ObjectID的进程的ID号(PID)<br>这样,前9位就保证了同一秒中不同机器不同进程产生的ObejctId是唯一的.而后3字节就是一个自增的计数器,确保相同进程同一秒内产生的ObjectId也是不一样的.这样同一秒中类允许最多每个进程拥有16777215个不同的ObjectID.这基本上是不可能重复了.</p>
<h3 id="Twitter的snowflake算法">Twitter的snowflake算法</h3><p>为了满足Twitter每秒上万条消息的请求,每条消息都必须分配一个唯一的ID,这些id还需要一些大致的顺序.因此,Twitter公布了他们的Snowflake算法来生成这个唯一UniqueID.</p>
<p>Snowflake算法生成的唯一键是由64位组成的.在默认的情况下:分为了4组.<br>第一位的0预留不使用.<br>第二组是41位的时间戳.精确到毫秒.<br>第三组的10位是工作机器的Id.默认可以使用MAC地址来唯一标识,当然使用进程号也是可以的.<br>第四组是12位的序列号,同mongo的ObjectID相同,也是一个自增的ID.可以保证1毫秒产生4095个不重复的自增序列.<br>这个算法的优势就是一个Int64就可以进行存储,比UUID等的128位减少了很多</p>
<h2 id="总结">总结</h2><p>基本上常见的分布式情况下的UniqueID的生成方法就分为了两大类,一类是基于分配的发号器,另外一类是基于规则计算的唯一序列.而后者的常用算法通常就是UUID以及OjbectID和SnowFlake<br>基于发号器的优势在于可以按照准连续的增加,可以用于Int32等的存储.但是性能和系统复杂度上存在一定的缺陷.<br>而基于计算规则的优势主要是分布式情况下,各机器独立运算,性能上有保证.但是通常都需要使用64位以上的空间来进行存储.<br>具体如何选择,需要在项目中具体的分析.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="常用UniqueID的生成方法">常用UniqueID的生成方法</h1><p>这几天在与其他的系统进行联调的时候,出现了对方的唯一ID使用的是<code>Int32</code>来存储,而我们提供的UniqueID是标准的UUID,从而导致他们无法存储的问题.由于他们是一个历史的老系统,牵扯很深,所以无法进行改造,只能我们来适应它(幸好和它们交互的数据不会太多.应该不会超过Int32的上限).从而引出了对UniqueID生成方法的思考.这里列出了几种常用的UniqueID的生成办法.</p>
<h2 id="基于数据库的发号器">基于数据库的发号器</h2><p>这个是最常见和最容易想到的生成UniqueID的方法.也就是依赖数据库的自增ID来获取唯一ID,由于在分布式系统中数据库都是做了分布式或同步的,因此能保证数据库的自增键或序列是不会重复的.</p>
<ul>
<li>在Oracle中,可以创建一个序列,然后使用序列的<code>nextVal</code>来获取.</li>
<li>在Mysql中,由于没有序列的概念,只能创建一个表,表的主键设置为自增.要获取UniqueID的时候就不断的往这个表中插入记录,获取<code>last_insert_id()</code>即可.为了避免表的记录数过多,可以考虑采用使用回滚的方式来规避.</li>
<li>在redis中,可以使用<code>INCR key</code>这个命令来获取一个自增的key,每调用一次,key值增加1.如果没有这个key值,则初始化key值为0.</li>
</ul>
<p>使用这种方案的优点就是可以满足像<code>Int32</code>这种短数据的唯一.而缺点就是增加了系统的复杂性.需要在系统中强依赖数据库,并且获取<code>UniqueID</code>是需要与数据库交互的,虽然可以一次批量的获取几个ID,但是总体来说,性能会有损失.</p>]]>
    
    </summary>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
      <category term="大数据" scheme="http://sunxiang0918.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<转>超越继承之路：协议混合]]></title>
    <link href="http://sunxiang0918.github.io/2016/01/20/%E8%B6%85%E8%B6%8A%E7%BB%A7%E6%89%BF%E4%B9%8B%E8%B7%AF%EF%BC%9A%E5%8D%8F%E8%AE%AE%E6%B7%B7%E5%90%88/"/>
    <id>http://sunxiang0918.github.io/2016/01/20/超越继承之路：协议混合/</id>
    <published>2016-01-20T11:29:27.000Z</published>
    <updated>2016-01-20T11:45:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="超越继承之路：协议混合">超越继承之路：协议混合</h1><p>只要你学习过面向对象的语言比如 ObjC ，都知道继承的概念，他的一个用途是在多个类之间共享代码。但是这种解决方案存在一些问题。这篇文章我们来初探一下 Swift 的协议扩展，以及如何混合使用这些协议 - Mixins，英文原文<a href="http://alisoftware.github.io/swift/protocol/2015/11/08/mixins-over-inheritance/#fnref2" target="_blank" rel="external">地址</a></p>
<p>如果感觉太长了，读不下去，可以直接下载代码 <a href="http://alisoftware.github.io/assets/Mixins.playground.zip" target="_blank" rel="external">Swift Playground Code</a></p>
<h2 id="继承的问题">继承的问题</h2><p>比如你有个 app，其中有大量的<code>UIViewController</code>类都要共享相同的行为，例如他们都有一个相同样式的汉堡菜单。你不想在每个<code>View Controllers</code>中都实现一遍『汉堡菜单』的逻辑（设置 <code>leftBarButtonItem</code>，按钮点击时打开/关闭菜单）</p>
<p>解决方法很简单，创建一个通用的<code>CommonViewController</code>，继承自<code>UIViewController</code>，然后实现所有的行为，接着让其他的<code>UIViewController</code>继承自这个<code>CommonViewController</code>，而不是直接继承自<code>UIViewController</code>。通过这种方式，这些 VC 将拥有这些相同的方法和行为，不需要再每次都自己实现一遍了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonViewController</span>: <span class="title">UIViewController</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">setupBurgerMenu</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">onBurgerMenuTapped</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="keyword">var</span> burgerMenuIsOpen: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123; … &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">CommonViewController</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    setupBurgerMenu()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在随后的开发过程中，你突然需要一个<code>UITableViewController</code>或 <code>UICollectionViewController</code>…靠！不能使用<code>CommonViewController</code>了，因为他是 <code>UIViewController</code> 而不是<code>UITableViewController</code>！</p>
<p>我们该怎么做？新建一个<code>CommonTableViewController</code>实现和<code>CommonViewController</code>一样的功能，但只是继承改为<code>UITableViewController</code>？这会产生好多重复代码，绝对是个糟糕透顶的设计。</p>
<a id="more"></a>
<h2 id="Composition_来拯救我们啦">Composition 来拯救我们啦</h2><p>当然，政治正确的答案就是：</p>
<pre><code>使用 <span class="keyword">Composition</span>，不要使用继承啦！
</code></pre><p>这就意味着为了替代继承，我们需要创建自己的<code>UIViewController</code>，该 VC 由这些内部类的集合组成，而这些内部类负责提供相应的行为。</p>
<p>在我们的例子中，可以想象一个<code>BurgerMenuManager</code>类会提供所有必须的方法来设置汉堡菜单的图标，然后使用<code>BurgerMenuManager</code>进行交互，而我们大量的<code>UIViewControllers</code>都将会设置一个 <code>property</code> 来引用这个<code>BurgerMenuManager</code>，进而与汉堡菜单交互。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BurgerMenuManager</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">setupBurgerMenu</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">onBurgerMenuTapped</span><span class="params">()</span></span> &#123; burgerMenuIsOpen = !burgerMenuisOpen &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">burgerMenuIsOpen</span>: <span class="title">Bool</span> </span>&#123; <span class="keyword">didSet</span> &#123; … &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">UIViewController</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> menuManager: <span class="type">BurgerMenuManager</span>()</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    menuManager.setupBurgerMenu()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOtherViewController</span>: <span class="title">UITableViewController</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> menuManager: <span class="type">BurgerMenuManager</span>()</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    menuManager.setupBurgerMenu()</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可悲的是这样也太笨重了吧，每次都需要引用一个中间对象<code>menuManager</code>，好麻烦~</p>
<h2 id="多重继承">多重继承</h2><p>另一个现实原因是：大部分的面向对象语言都不允许多重继承（这是因为存在一个<a href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem" target="_blank" rel="external">菱形类继承问题</a>）</p>
<p><strong>意味着一个类不能有多个父类</strong></p>
<p>假如你实现了一个模型类，用来表示科幻人物。假如你已经创建了<code>DocEmmettBrown</code>,<code>DoctorWho</code> &amp; <code>TimeLord</code>, <code>IronMan</code>, <code>Superman</code>… 然后他们如何直接关联？一些人能够时间旅行，一些能够太空旅行，还有些所有的事都能做，有些人能飞有些不能，一些是人类一些不是…</p>
<p><code>class IronMan</code>（钢铁侠）和 <code>class Superman</code>（超人）都能飞，我们可以创建一个会飞的父类 <code>class Flyer</code>，由他来提供飞行方法的实现<code>func fly()</code> 。但 <code>IronMan</code> 和 <code>DocEmmettBrown</code> 都是人类，所以我们还可以创建一个人类的父类<code>Human</code>，与此同时<code>Superman</code>和 <code>TimeLord</code> 都是外星人 <code>class Alien</code> 的子类。稍等一下… <code>IronMan</code>（钢铁侠）同时继承了 <code>Flyer</code> 和 <code>Human</code>？这在 Swift 中是不可能的（因为 Swift 也是面向对象编程的语言）</p>
<p>我们在继承中只能二选一，如果让 <code>IronMan</code> （钢铁侠）继承自 <code>Human</code>（人类），那么飞行 <code>func fly()</code> 这个方法该如何实现？我们不能显式地在 <code>Human</code>（人类）中实现飞行这个方法，因为不是所有的人都会飞啊，但是<code>Superman</code>（超人）又需要飞行方法，我们不想再重复一遍。</p>
<p>所以，我们可以在这里使用组合，如同让 <code>class SuperMan</code> 超人类包含一个<strong>飞行引擎</strong>属性 <code>var flyingEngine: Flyer</code></p>
<p>但是只是用 <code>superman.flyingEngine.fly()</code> 代替 <code>superman.fly()</code> ，看起来并不是那么优雅。</p>
<h2 id="混合_&amp;_特性">混合 &amp; 特性</h2><p>以下是 <strong>混合 &amp; 特性</strong>（Mixins &amp; Traits）施展手脚的地方</p>
<ul>
<li>通过继承，一般定义你的类是什么，比如所有的 🐶 <code>Dog</code> 都是一个动物 <code>Animal</code></li>
<li>而 <code>Traits</code> 特性，定义了你的类可以做什么，比如，所有的动物 <code>Animal</code> 都能吃 <code>eat()</code>，但人类也能吃，神秘博士 <strong>Doctor Who</strong> 虽然既不是人类也不是动物，但也能吃炸鱼条和蛋冻奶。</li>
</ul>
<p>所以对于特性来说，他们是什么并不重要，而关键在于他们能做什么</p>
<p>继承定义了这个对象是什么，而特性则定义了这个对象能做什么</p>
<p>更棒的消息是：一个类可以部署很多特性，也就是可以同时做很多事情，这是只从单一父类继承而来的子类所不可企及的，因为他们一次只能做一件事情。</p>
<p>那么在 Swift 中该如何应用？</p>
<h2 id="带默认实现的协议">带默认实现的协议</h2><p>在 Swift 2.0 中，当你定义了一个 <code>protocol</code>，可以通过 <code>extension</code> 为其附加相关的实现方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I believe I can flyyyyy ♬"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>鉴于此，我们创建了一个遵守 <code>Flyer</code> 协议的类或结构体对象，该对象会免费获得 <code>fly()</code> 方法！</p>
<p>你可以根据需要随时重载这个默认实现，当然也可以什么都不做，这样就自动获得一个默认实现：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span>: <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="comment">// we don't implement fly() there so we get the default implementation and hear Clark sing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IronMan</span>: <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="comment">// be we can also give a specific implementation if needs be</span></span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    thrusters.start()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"><span class="type">Protocols</span> 提供默认实现这一特性棒极了，正如你所愿将 **<span class="type">Traits</span>** 的概念带进了 <span class="type">Swift</span></span><br><span class="line"></span><br><span class="line">##同一身份，多种能力</span><br><span class="line">关于特性最赞的一点就是：特性不依赖于应用这些特性的对象。他们（特性）不关心这些类是什么，继承自何方，他们只是在这些类中定义了一些方法。</span><br><span class="line"></span><br><span class="line">这就解决了 `<span class="type">Doctor</span> <span class="type">Who</span>` 既是时间旅行者又是外星人，以及 `<span class="type">Dr</span> <span class="type">Emmett</span> <span class="type">Brown</span>` 既是时间旅行者又是人类的难题。再如钢铁侠作为一个人类，和超人作为外星人，但他们都能飞。</span><br><span class="line"></span><br><span class="line">你是谁并不能决定你的能力</span><br><span class="line"></span><br><span class="line">现在，让我们利用 **<span class="type">Traits</span>** 来实现我们的模型类吧</span><br><span class="line"></span><br><span class="line">首先，让我们定义各种各样的 **<span class="type">Traits</span>**（特性）：</span><br><span class="line"></span><br><span class="line">```<span class="built_in">swift</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TimeTraveler</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> currentDate: <span class="type">NSDate</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">  <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(date: NSDate)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着给出默认实现：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I believe I can flyyyyy ♬"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TimeTraveler</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(date: NSDate)</span></span> &#123;</span><br><span class="line">    currentDate = date</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于定义超级英雄角色这一点上（他们是谁），我们依然先使用继承，下面来实现几个父类：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Character</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>: <span class="title">Character</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> countryOfOrigin: <span class="type">String</span>?</span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>, countryOfOrigin: <span class="type">String</span>? = <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.countryOfOrigin = countryOfOrigin</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span>: <span class="title">Character</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">let</span> species: <span class="type">String</span></span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>, species: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.species = species</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在能够同时通过他们的身份（继承）和能力（特性/协议）来定义我们的超级英雄了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeLord</span>: <span class="title">Alien</span>, <span class="title">TimeTraveler</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> currentDate = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"I'm the Doctor"</span>, species: <span class="string">"Gallifreyan"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocEmmettBrown</span>: <span class="title">Human</span>, <span class="title">TimeTraveler</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> currentDate = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Emmett Brown"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span>: <span class="title">Alien</span>, <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Clark Kent"</span>, species: <span class="string">"Kryptonian"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IronMan</span>: <span class="title">Human</span>, <span class="title">Flyer</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Tony Stark"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Superman</code>（超人）和 <code>IronMan</code>（钢铁侠）都使用相同的飞行 <code>fly()</code> 实现，即使他们继承自不同的父类（一个是外星人，另一个是人类），并且 Docotors（博士们）都懂得时间旅行：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tony = <span class="type">IronMan</span>()  </span><br><span class="line">tony.fly() <span class="comment">// prints "I believe I can flyyyyy ♬"  </span></span><br><span class="line">tony.name  <span class="comment">// returns "Tony Stark"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clark = <span class="type">Superman</span>()  </span><br><span class="line">clark.fly() <span class="comment">// prints "I believe I can flyyyyy ♬"  </span></span><br><span class="line">clark.species  <span class="comment">// returns "Kryptonian"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> docBrown = <span class="type">DocEmmettBrown</span>()  </span><br><span class="line">docBrown.travelTo(<span class="type">NSDate</span>(timeIntervalSince1970: <span class="number">499161600</span>))  </span><br><span class="line">docBrown.name <span class="comment">// "Emmett Brown"  </span></span><br><span class="line">docBrown.countryOfOrigin <span class="comment">// "USA"  </span></span><br><span class="line">docBrown.currentDate <span class="comment">// Oct 26, 1985, 9:00 AM</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doctorWho = <span class="type">TimeLord</span>()  </span><br><span class="line">doctorWho.travelTo(<span class="type">NSDate</span>(timeIntervalSince1970: <span class="number">1303484520</span>))  </span><br><span class="line">doctorWho.species <span class="comment">// "Gallifreyan"  </span></span><br><span class="line">doctorWho.currentDate <span class="comment">// Apr 22, 2011, 5:02 PM</span></span><br></pre></td></tr></table></figure>
<h2 id="时空探险">时空探险</h2><p>现在让我们探索一种新的空间旅行能力/特性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SpaceTraveler</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(location: String)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供一个默认实现：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SpaceTraveler</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(location: String)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Let's go to <span class="subst">\(location)</span>!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用 Swift 的 <code>extensions</code> 为现有类添加共性的协议了，接下来为已定义的英雄角色添加这些能力。如果我们不计较钢铁侠在《复仇者联盟 1》『纽约之战』中英勇地抱着核弹飞到外太空的话，那么只有 Doctor（博士）和 Superman（超人）拥有空间旅行的能力：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TimeLord</span>: <span class="title">SpaceTraveler</span> </span>&#123;&#125;  </span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Superman</span>: <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>是的，这就是需要添加超能力，现在他们可以使用 <code>travelTo()</code>飞往任何地方！代码相当整洁，不是吗？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doctorWho.travelTo(<span class="string">"Trenzalore"</span>) <span class="comment">// prints "Let's go to Trenzalore!"</span></span><br></pre></td></tr></table></figure>
<h3 id="多邀请点人加入我们的派对">多邀请点人加入我们的派对</h3><p>现在让我们为更多的英雄赋予能力：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Come along, Pond!</span></span><br><span class="line"><span class="keyword">let</span> amy = <span class="type">Human</span>(name: <span class="string">"Amelia Pond"</span>, countryOfOrigin: <span class="string">"UK"</span>)  </span><br><span class="line"><span class="comment">// Damn, isn't she not a Time and Space Traveler too? Which doesn't make her a TimeLord, though</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Astraunaut</span>: <span class="title">Human</span>, <span class="title">SpaceTraveler</span> </span>&#123;&#125;  </span><br><span class="line"><span class="keyword">let</span> neilArmstrong = <span class="type">Astraunaut</span>(name: <span class="string">"Neil Armstrong"</span>, countryOfOrigin: <span class="string">"USA"</span>)  </span><br><span class="line"><span class="keyword">let</span> laika = <span class="type">Astraunaut</span>(name: <span class="string">"Laïka"</span>, countryOfOrigin: <span class="string">"Russia"</span>)  </span><br><span class="line"><span class="comment">// Wait, Laïka is a Dog, right?</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilleniumFalconPilot</span>: <span class="title">Human</span>, <span class="title">SpaceTraveler</span> </span>&#123;&#125;  </span><br><span class="line"><span class="keyword">let</span> hanSolo = <span class="type">MilleniumFalconPilot</span>(name: <span class="string">"Han Solo"</span>)  </span><br><span class="line"><span class="keyword">let</span> chewbacca = <span class="type">MilleniumFalconPilot</span>(name: <span class="string">"Chewie"</span>)  </span><br><span class="line"><span class="comment">// Wait, isn't MilleniumFalconPilot defined as "Human"?!</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spock</span>: <span class="title">Alien</span>, <span class="title">SpaceTraveler</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Spock"</span>, species: <span class="string">"Vulcan"</span>)</span><br><span class="line">    <span class="comment">// Woops not 100% right</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫休斯顿，我们遇到一个问题。<code>Laika</code> 不是人类也不是 <code>Chewie</code>，<code>Spock</code> 是半人类半瓦肯星人，所以这些定义都是错的。</p>
<p>我们理所应当地认为人类 <code>Human</code> 和外星人 <code>Alien</code> 都可以抽象为单独的类，如果我们继承了这些类，就会被看做是强制认同了这种身份类型。可惜在科幻小说中并不是这样，这才是困扰我们的问题所在。</p>
<p>这也是为什么我们需要在 Swift 中使用 Protocols 并提供协议默认实现的原因。它能帮助我们移除由类继承所带来的限制。</p>
<p>如果将 <code>Human</code> 和 <code>Alien</code> 由类改为协议，会获得到以下优势：</p>
<ul>
<li>我们可以定义一个 <code>MilleniumFalconPilot</code> （飞行器）类型而不用强迫他是一个人类，接着让 <code>Chewie</code> 来驾驶</li>
<li>我们可以定义 <code>Laïka</code> 是一个宇航员 <code>Astronaut</code>，即使她并不是一个人类</li>
<li>我们可以定义 <code>Spock</code> 既是人类 <code>Human</code> 又是外星人 <code>Alien</code></li>
<li>我们甚至可以将继承完全从我们的例子中移除，用结构体 <code>structs</code> 代替类 <code>classes</code> 来定义我们的类型。结构体并不支持继承，但可以遵从多个协议。</li>
</ul>
<h2 id="协议无处不在">协议无处不在</h2><p>至此可以公布我们的解决方案了：就是完全用协议来取代继承，毕竟，我们并不在乎这些超级英雄是什么？只关心他们有哪些超能力罢了。</p>
<p>我打包了一份 <strong>Playground</strong> 代码，你可以点这里下载。我用两页的篇幅演示了完全用 <code>Protocol</code> 和 <code>Structs</code> 是如何实现这一切的，别犹豫，打开看一看！</p>
<p>当然，这并不意味着你必须不惜一切代价避免继承（不要都听 Dalek 的，他们毕竟缺乏感情）。继承仍然有其用武之地，比如 <code>UILabel</code> 是 <code>UIView</code> 子类，你依然能感受到其中的逻辑性。但是，这并不妨碍我们去探索一片新天地 <strong>Mixins &amp; Protocols</strong>（附带默认实现）</p>
<h2 id="总结">总结</h2><p>你在 Swift 之路走得越远，就越能意识到这其实是一门<strong>面向协议编程</strong>的语言，Swift 中大范围应用的<strong>协议</strong>远比 OC 中要强大的多。毕竟，像 <code>Equatable</code>，<code>CustomStringConvertible</code> 以及 <code>-able</code> 这种 Swift 标准库中的协议其实也是混合在一起使用的（Mixins）</p>
<p>通过 Swift 的协议和附带的默认实现，你可以实现 <strong>Mixins &amp; Traits</strong>（混合 &amp; 特性），不仅如此，你还可以实现抽象类的功能，这一切都会让你的编码之路会更加灵活。</p>
<p>采取 <strong>Mixins &amp; Traits</strong> 方式组织的代码不仅定义了这些类型能做什么，还说明了他们是什么。更重要的，你可以按需有选择地部署能力。这有点像你去超市购物，为类型挑选他们喜欢的能力放进购物车中，而并不去关心这些类型继承自何方。</p>
<p>回到最初的例子中，你可以创建一个 <code>protocol BurgerMenuManager</code> 以及一个默认实现，然后简单地让你的 <code>View Controllers</code>（UIViewController 或 UITableViewController…）遵从这个协议就好啦，该 VC 会自动获取所有定义在 <code>BurgerMenuManager</code> 中的能力，而不用去担心 <code>UIViewController</code> 的父类是什么！</p>
<p>关于 <code>Protocol Extensions</code> 还能说很多，<strong>Don’t Panic</strong> 我会在今后的文章中徐徐道来，协议扩展可以在很多方面增强你的代码。这篇文章够长啦，今后再写啦，别走开马上回来~</p>
<hr>
<p>原文链接:<a href="http://chengway.in/chao-yue-ji-cheng-zhi-lu-xie-yi-hun-he/" target="_blank" rel="external">http://chengway.in/chao-yue-ji-cheng-zhi-lu-xie-yi-hun-he/</a></p>
<p>PS:现在JAVA的JDK1.8中也支持了接口的默认实现,也就是说,JAVA也可以面向协议来编程了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="超越继承之路：协议混合">超越继承之路：协议混合</h1><p>只要你学习过面向对象的语言比如 ObjC ，都知道继承的概念，他的一个用途是在多个类之间共享代码。但是这种解决方案存在一些问题。这篇文章我们来初探一下 Swift 的协议扩展，以及如何混合使用这些协议 - Mixins，英文原文<a href="http://alisoftware.github.io/swift/protocol/2015/11/08/mixins-over-inheritance/#fnref2">地址</a></p>
<p>如果感觉太长了，读不下去，可以直接下载代码 <a href="http://alisoftware.github.io/assets/Mixins.playground.zip">Swift Playground Code</a></p>
<h2 id="继承的问题">继承的问题</h2><p>比如你有个 app，其中有大量的<code>UIViewController</code>类都要共享相同的行为，例如他们都有一个相同样式的汉堡菜单。你不想在每个<code>View Controllers</code>中都实现一遍『汉堡菜单』的逻辑（设置 <code>leftBarButtonItem</code>，按钮点击时打开/关闭菜单）</p>
<p>解决方法很简单，创建一个通用的<code>CommonViewController</code>，继承自<code>UIViewController</code>，然后实现所有的行为，接着让其他的<code>UIViewController</code>继承自这个<code>CommonViewController</code>，而不是直接继承自<code>UIViewController</code>。通过这种方式，这些 VC 将拥有这些相同的方法和行为，不需要再每次都自己实现一遍了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonViewController</span>: <span class="title">UIViewController</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">setupBurgerMenu</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">onBurgerMenuTapped</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="keyword">var</span> burgerMenuIsOpen: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123; … &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">CommonViewController</span> </span>&#123;  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    setupBurgerMenu()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在随后的开发过程中，你突然需要一个<code>UITableViewController</code>或 <code>UICollectionViewController</code>…靠！不能使用<code>CommonViewController</code>了，因为他是 <code>UIViewController</code> 而不是<code>UITableViewController</code>！</p>
<p>我们该怎么做？新建一个<code>CommonTableViewController</code>实现和<code>CommonViewController</code>一样的功能，但只是继承改为<code>UITableViewController</code>？这会产生好多重复代码，绝对是个糟糕透顶的设计。</p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Akka in JAVA(三)]]></title>
    <link href="http://sunxiang0918.github.io/2016/01/18/Akka-in-JAVA-3/"/>
    <id>http://sunxiang0918.github.io/2016/01/18/Akka-in-JAVA-3/</id>
    <published>2016-01-18T13:23:13.000Z</published>
    <updated>2016-02-13T14:54:11.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Akka_in_JAVA(三)">Akka in JAVA(三)</h1><p>上两个部分讲了<code>Akka</code>的基本知识和常见的用法.接下来讲一讲<code>Akka</code>的远程调用以及集群的使用.因为在现在的项目中,基本上都是分布式的,单个的应用程序都快成为”熊猫”了.因此<code>Akka</code>的远程以及集群调用就是非常有必要的了.</p>
<h2 id="Remote调用">Remote调用</h2><p><code>Akka-Remoting</code>是采用了P2P(peer-to-peer)的通信方式设计的,也就是端对端的方式.特别是Akka-Remoting不能与网络地址转换和负载均衡一起的工作.<br>但是,由于<code>Akka</code>在设计的时候就考虑了远程调用以及分布式的情况.因此,<code>Akka-Remoting</code>在使用上就非常的简单,几乎等于是透明的,和本地调用几乎相同.除了传递的消息需要可序列化以及创建和查找Actor的时候路径稍有不同外,没有其他的区别了.</p>
<h3 id="远程调用的准备">远程调用的准备</h3><p>要在项目中使用<code>Akka-Remoting</code>非常的简单,只需要引入Maven中的<code>akka-remote</code>就可以了.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>akka-remote_2.11<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="配置">配置</h3><p>由于Akka几乎没有特别的为<code>Remoting</code>提供专门的API,区别仅仅在于配置.因此,接下来就是要修改项目中的akka的配置了:</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">WCMapReduceApp &#123;</span><br><span class="line"></span><br><span class="line">  akka &#123;</span><br><span class="line">    actor &#123;</span><br><span class="line">      <span class="variable">provider =</span> <span class="string">"akka.remote.RemoteActorRefProvider"</span></span><br><span class="line">    &#125;</span><br><span class="line">    remote &#123;</span><br><span class="line">      <span class="variable">enabled-transports =</span> [<span class="string">"akka.remote.netty.tcp"</span>]</span><br><span class="line">      netty.tcp &#123;</span><br><span class="line">        <span class="variable">hostname =</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">        <span class="variable">port =</span> <span class="number">2552</span>		<span class="comment"># 0表示自动选择一个可用的</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来看看这个配置和本地的有什么不同.<br>这个配置文件在<code>akka</code>的配置项中添加了一个<code>actor</code>配置项,并指定<code>provider</code>也就是Actor提供者为<code>akka.remote.RemoteActorRefProvider</code>,即远程Actor提供者.<br>然后定义了<code>remote</code>远程传输方式,使用<code>akka.remote.netty.tcp</code>即<code>netty</code>的方式提供服务,服务的IP和端口分别是<code>127.0.0.1</code>和<code>2552</code>,就这么简单.而由于是端对端的通信,因此客户端的配置和服务器端的是一样的.</p>
<p>以上只是远程调用的最小的配置,完整的可选配置如下:</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">akka &#123;</span><br><span class="line"> </span><br><span class="line">  actor &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 序列化方式</span></span><br><span class="line">    serializers &#123;</span><br><span class="line">      <span class="variable">proto =</span> <span class="string">"akka.serialization.ProtobufSerializer"</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 发布远程Akka</span></span><br><span class="line">    deployment &#123;</span><br><span class="line"> </span><br><span class="line">      default &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 手动指定Actor的远程地址</span></span><br><span class="line">        <span class="comment"># if this is set to a valid remote address, the named actor will be deployed</span></span><br><span class="line">        <span class="comment"># at that node e.g. "akka://sys@host:port"</span></span><br><span class="line">        <span class="variable">remote =</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 目标</span></span><br><span class="line">        target &#123;</span><br><span class="line"> </span><br><span class="line">          <span class="comment"># A list of hostnames and ports for instantiating the children of a</span></span><br><span class="line">          <span class="comment"># non-direct router</span></span><br><span class="line">          <span class="comment">#   The format should be on "akka://sys@host:port", where:</span></span><br><span class="line">          <span class="comment">#    - sys is the remote actor system name</span></span><br><span class="line">          <span class="comment">#    - hostname can be either hostname or IP address the remote actor</span></span><br><span class="line">          <span class="comment">#      should connect to</span></span><br><span class="line">          <span class="comment">#    - port should be the port for the remote server on the other node</span></span><br><span class="line">          <span class="comment"># The number of actor instances to be spawned is still taken from the</span></span><br><span class="line">          <span class="comment"># nr-of-instances setting as for local routers; the instances will be</span></span><br><span class="line">          <span class="comment"># distributed round-robin among the given nodes.</span></span><br><span class="line">          <span class="variable">nodes =</span> []</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  remote &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 传输方式</span></span><br><span class="line">    <span class="comment"># Which implementation of akka.remote.RemoteTransport to use</span></span><br><span class="line">    <span class="comment"># default is a TCP-based remote transport based on Netty</span></span><br><span class="line">    <span class="variable">transport =</span> <span class="string">"akka.remote.netty.NettyRemoteTransport"</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 受信模式</span></span><br><span class="line">    <span class="comment"># Enable untrusted mode for full security of server managed actors, allows</span></span><br><span class="line">    <span class="comment"># untrusted clients to connect.</span></span><br><span class="line">    <span class="variable">untrusted-mode =</span> off</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 集群检测超时时间</span></span><br><span class="line">    <span class="comment"># Timeout for ACK of cluster operations, like checking actor out etc.</span></span><br><span class="line">    <span class="variable">remote-daemon-ack-timeout =</span> <span class="number">30</span>s</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 是否记录接收的消息</span></span><br><span class="line">    <span class="comment"># If this is "on", Akka will log all inbound messages at DEBUG level, if off then they are not logged</span></span><br><span class="line">    <span class="variable">log-received-messages =</span> off</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 是否记录发送的消息</span></span><br><span class="line">    <span class="comment"># If this is "on", Akka will log all outbound messages at DEBUG level, if off then they are not logged</span></span><br><span class="line">    <span class="variable">log-sent-messages =</span> off</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Each property is annotated with (I) or (O) or (I&amp;O), where I stands for “inbound” and O for “outbound” connections.</span></span><br><span class="line">    <span class="comment"># The NettyRemoteTransport always starts the server role to allow inbound connections, and it starts</span></span><br><span class="line">    <span class="comment"># active client connections whenever sending to a destination which is not yet connected; if configured</span></span><br><span class="line">    <span class="comment"># it reuses inbound connections for replies, which is called a passive client connection (i.e. from server</span></span><br><span class="line">    <span class="comment"># to client).</span></span><br><span class="line">    netty &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 延迟阻塞超时时间</span></span><br><span class="line">      <span class="comment"># (O) In case of increased latency / overflow how long should we wait (blocking the sender)</span></span><br><span class="line">      <span class="comment"># until we deem the send to be cancelled?</span></span><br><span class="line">      <span class="comment"># 0 means "never backoff", any positive number will indicate time to block at most.</span></span><br><span class="line">      <span class="variable">backoff-timeout =</span> <span class="number">0</span>ms</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 加密cookie</span></span><br><span class="line">      <span class="comment"># (I&amp;O) Generate your own with '$AKKA_HOME/scripts/generate_config_with_secure_cookie.sh'</span></span><br><span class="line">      <span class="comment"># or using 'akka.util.Crypt.generateSecureCookie'</span></span><br><span class="line">      <span class="variable">secure-cookie =</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 是否需要cookie</span></span><br><span class="line">      <span class="comment"># (I) Should the remote server require that its peers share the same secure-cookie</span></span><br><span class="line">      <span class="comment"># (defined in the 'remote' section)?</span></span><br><span class="line">      <span class="variable">require-cookie =</span> off</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 使用被动连接</span></span><br><span class="line">      <span class="comment"># (I) Reuse inbound connections for outbound messages</span></span><br><span class="line">      <span class="variable">use-passive-connections =</span> on</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 域名,连接地址</span></span><br><span class="line">      <span class="comment"># (I) The hostname or ip to bind the remoting to,</span></span><br><span class="line">      <span class="comment"># InetAddress.getLocalHost.getHostAddress is used if empty</span></span><br><span class="line">      <span class="variable">hostname =</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 端口</span></span><br><span class="line">      <span class="comment"># (I) The default remote server port clients should connect to.</span></span><br><span class="line">      <span class="comment"># Default is 2552 (AKKA), use 0 if you want a random available port</span></span><br><span class="line">      <span class="variable">port =</span> <span class="number">2552</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># </span></span><br><span class="line">      <span class="comment"># (O) The address of a local network interface (IP Address) to bind to when creating</span></span><br><span class="line">      <span class="comment"># outbound connections. Set to "" or "auto" for automatic selection of local address.</span></span><br><span class="line">      <span class="variable">outbound-local-address =</span> <span class="string">"auto"</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 消息帧大小</span></span><br><span class="line">      <span class="comment"># (I&amp;O) Increase this if you want to be able to send messages with large payloads</span></span><br><span class="line">      <span class="variable">message-frame-size =</span> <span class="number">1</span> MiB</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 超时时间</span></span><br><span class="line">      <span class="comment"># (O) Timeout duration</span></span><br><span class="line">      <span class="variable">connection-timeout =</span> <span class="number">120</span>s</span><br><span class="line"> </span><br><span class="line">      <span class="comment">#连接备份日志大小</span></span><br><span class="line">      <span class="comment"># (I) Sets the size of the connection backlog</span></span><br><span class="line">      <span class="variable">backlog =</span> <span class="number">4096</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 执行线程池存活时间</span></span><br><span class="line">      <span class="comment"># (I) Length in akka.time-unit how long core threads will be kept alive if idling</span></span><br><span class="line">      <span class="variable">execution-pool-keepalive =</span> <span class="number">60</span>s</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 执行线程池大小</span></span><br><span class="line">      <span class="comment"># (I) Size of the core pool of the remote execution unit</span></span><br><span class="line">      <span class="variable">execution-pool-size =</span> <span class="number">4</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">#最大通道内存大小</span></span><br><span class="line">      <span class="comment"># (I) Maximum channel size, 0 for off</span></span><br><span class="line">      <span class="variable">max-channel-memory-size =</span> <span class="number">0</span>b</span><br><span class="line"> </span><br><span class="line">      <span class="comment">#总计通道内存大小</span></span><br><span class="line">      <span class="comment"># (I) Maximum total size of all channels, 0 for off</span></span><br><span class="line">      <span class="variable">max-total-memory-size =</span> <span class="number">0</span>b</span><br><span class="line"> </span><br><span class="line">      <span class="comment">#重试时间间隔</span></span><br><span class="line">      <span class="comment"># (O) Time between reconnect attempts for active clients</span></span><br><span class="line">      <span class="variable">reconnect-delay =</span> <span class="number">5</span>s</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 读取超时时间</span></span><br><span class="line">      <span class="comment"># (O) Read inactivity period (lowest resolution is seconds)</span></span><br><span class="line">      <span class="comment"># after which active client connection is shutdown;</span></span><br><span class="line">      <span class="comment"># will be re-established in case of new communication requests.</span></span><br><span class="line">      <span class="comment"># A value of 0 will turn this feature off</span></span><br><span class="line">      <span class="variable">read-timeout =</span> <span class="number">0</span>s</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 写入超时时间</span></span><br><span class="line">      <span class="comment"># (O) Write inactivity period (lowest resolution is seconds)</span></span><br><span class="line">      <span class="comment"># after which a heartbeat is sent across the wire.</span></span><br><span class="line">      <span class="comment"># A value of 0 will turn this feature off</span></span><br><span class="line">      <span class="variable">write-timeout =</span> <span class="number">10</span>s</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 所有超时时间</span></span><br><span class="line">      <span class="comment"># (O) Inactivity period of both reads and writes (lowest resolution is seconds)</span></span><br><span class="line">      <span class="comment"># after which active client connection is shutdown;</span></span><br><span class="line">      <span class="comment"># will be re-established in case of new communication requests</span></span><br><span class="line">      <span class="comment"># A value of 0 will turn this feature off</span></span><br><span class="line">      <span class="variable">all-timeout =</span> <span class="number">0</span>s</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># 重连窗口时间</span></span><br><span class="line">      <span class="comment"># (O) Maximum time window that a client should try to reconnect for</span></span><br><span class="line">      <span class="variable">reconnection-time-window =</span> <span class="number">600</span>s</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># The dispatcher used for the system actor "network-event-sender"</span></span><br><span class="line">    network-event-sender-dispatcher &#123;</span><br><span class="line">      <span class="variable">executor =</span> thread-pool-executor</span><br><span class="line">      <span class="variable">type =</span> PinnedDispatcher</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建远程Actor">创建远程Actor</h3><p>通过上面的配置后,在程序里面创建远程的Actor就非常的简单了,基本上感觉不到是创建的远程Actor.</p>
<p>只需要在创建<code>ActorSystem</code>的时候使用上面所说的配置文件即可,接下来的就和本地的Actor没有任何的区别:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActorSystem system = ActorSystem.create(<span class="string">"WCMapReduceApp"</span>, ConfigFactory.load(<span class="string">"application"</span>)</span><br><span class="line">                .getConfig(<span class="string">"WCMapReduceApp"</span>));</span><br></pre></td></tr></table></figure>
<p>通过这个<code>actorSystem</code>创建出来的Actor的路径会是这样的:<code>akka.tcp://WCMapReduceApp@127.0.0.1:2552/user/remoteActor</code>,即是一个远程的Actor.</p>
<p>当然,除了直接在服务器端创建服务外,还能在客户端远程的要求服务器端创建一个Actor,并保持引用.</p>
<p>要实现这样的功能,同样需要修改配置文件:</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">akka </span><span class="expression">&#123;</span><br><span class="line">  <span class="variable">actor</span> &#123;</span><br><span class="line">    <span class="variable">deployment</span> &#123;</span><br><span class="line">      <span class="end-block">/sampleActor </span>&#123;</span><br><span class="line">        <span class="variable">remote</span> = <span class="string">"akka.tcp://sampleActorSystem@127.0.0.1:2553"</span></span><br><span class="line">      &#125;</span><span class="xml"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这个配置文件告诉akka,在创建一个<code>/sampleActor</code>的时候,即<code>system.actorOf()</code>.指定的actor并不会在本地创建,而是会请求远程的actorSystem创建这个actor.</p>
<h3 id="查找远程Actor">查找远程Actor</h3><p>当客户端发布了一个远程的Actor后,客户端就需要调用它.而向它发送消息的先决条件就是要找到这个Actor.</p>
<p>查询远程的Actor也非常的简单.每一个远程的Actor都会有一个它自己的Path.其格式是:<code>akka://&lt;actorsystemname&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;actor path&gt;</code>,比如上面所说的<code>akka.tcp://WCMapReduceApp@127.0.0.1:2552/user/remoteActor</code>.那么获取这个Actor的<code>ActorRef</code>,就是通过<code>actorFor</code>或<code>actorSelection</code>方法传入这个<code>ActorPath</code>即可.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActorRef remoteActor = system.actorFor(<span class="string">"akka.tcp://WCMapReduceApp@127.0.0.1:2552/user/WCMapReduceActor"</span>);</span><br></pre></td></tr></table></figure>
<p>接下来的操作就和本地的Actor一模一样了.</p>
<h3 id="序列化">序列化</h3><p>既然是远程调用,那么就涉及到消息的序列化.Akka内置了集中序列化的方式,也提供了序列化的扩展,你可以使用内置的序列化方式,也可以自己实现一个.</p>
<p>要选择使用何种序列化,需要修改配置文件.在<code>akka</code>一节中配置<code>serializers</code>选项,指定序列化的实现类:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">akka</span> &#123;</span><br><span class="line">  <span class="title">actor</span> &#123;</span><br><span class="line">    <span class="title">serializers</span> &#123;</span><br><span class="line">      <span class="title">java</span> = <span class="string">"akka.serialization.JavaSerializer"</span> <span class="comment">#本地调用的默认方式</span></span><br><span class="line">      proto = <span class="string">"akka.remote.serialization.ProtobufSerializer"</span> <span class="comment">#远程调用的默认方式</span></span><br><span class="line">      myown = <span class="string">"cn.sunxiang0918.akka.demo5.CustomSerializer"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置好这个后,还可以绑定数据类型与序列化方式之间的映射:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">akka</span> &#123;</span><br><span class="line">    actor &#123;</span><br><span class="line">      serialization-<span class="keyword">bindings </span>&#123;</span><br><span class="line">        <span class="string">"java.lang.String"</span> = java</span><br><span class="line">        <span class="string">"akka.docs.serialization.Customer"</span> = java</span><br><span class="line">        <span class="string">"com.google.protobuf.Message"</span> = proto</span><br><span class="line">        <span class="string">"akka.docs.serialization.MyOwnSerializable"</span> = myown</span><br><span class="line">        <span class="string">"java.lang.Boolean"</span> = myown</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码就指定了各种数据类型分别采用不同的序列化方式.</p>
<p>如果觉得Akka内置的序列化方式不满足你的要求,可以自定义一个序列化类(通常并不需要).<br>这个也比较的简单,需要自定义的序列化类继承自<code>JSerializer</code>类.然后实现其中的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.actor.*;</span><br><span class="line"><span class="keyword">import</span> akka.serialization.*;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.*;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOwnSerializer</span> <span class="keyword">extends</span> <span class="title">JSerializer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// This is whether "fromBinary" requires a "clazz" or not</span></span><br><span class="line">      <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">includeManifest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// Pick a unique identifier for your Serializer,</span></span><br><span class="line">      <span class="comment">// you've got a couple of billions to choose from,</span></span><br><span class="line">      <span class="comment">// 0 - 16 is reserved by Akka itself</span></span><br><span class="line">      <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">identifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1234567</span>;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// "toBinary" serializes the given object to an Array of Bytes</span></span><br><span class="line">      <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">byte</span>[] toBinary(Object obj) &#123;</span><br><span class="line">        <span class="comment">//序列化方法</span></span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// "fromBinary" deserializes the given array,</span></span><br><span class="line">      <span class="comment">// using the type hint (if any, see "includeManifest" above)</span></span><br><span class="line">      <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">fromBinaryJava</span><span class="params">(<span class="keyword">byte</span>[] bytes,</span><br><span class="line">                     Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//反序列化方法</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="远程Actor的路由">远程Actor的路由</h3><p>由于<code>Akka-remoting</code>是基于点对点的.因此,并不能很好的使用网络提供的负载均衡等功能.其实,要解决这个问题,我们可以使用<code>Akka</code>的路由功能.即在配置远程Actor的时候,增加<code>router</code>的参数.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">akka.actor.deployment &#123;</span><br><span class="line">  /parent/remotePool &#123;</span><br><span class="line">    router = round-robin-pool</span><br><span class="line">    nr-of-instances = <span class="number">10</span></span><br><span class="line">    target.nodes = [<span class="string">"akka.tcp://app@10.0.0.2:2552"</span>, <span class="string">"akka://app@10.0.0.3:2552"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么当向这个<code>/parent/remotePool</code>发送消息的时候,会轮询的把消息分发到不同的远程服务上,从而实现了高可用和负载均衡.</p>
<h3 id="远程事件">远程事件</h3><p>同Akka的本地Actor的生命周期Hook相同,Akka为远程的Actor申明了很多的事件.我们可以监听这些远程调用中发生的事件,也可以订阅这些事件.只需要在<code>ActorSystem.eventStream</code>中为下面的事件增加注册监听器即可. 需要注意的是如果要订阅任意的远程事件,是订阅<code>RemotingLifecycleEvent</code>,如果只订阅涉及链接的生命周期,需要订阅<code>akka.remote.AssociationEvent</code>.</p>
<ul>
<li>DisassociatedEvent : 链接结束事件,这个事件包含了链接方向以及参与方的地址.</li>
<li>AssociatedEvent : 链接成功建立事件,这个事件包含了链接方向以及参与方的地址.</li>
<li>AssociationErrorEvent : 链接相关错误事件,这个事件包含了链接方向以及参与方的地址以及错误的原因.</li>
<li>RemotingListenEvent : 远程子系统准备好接受链接时的事件,这个事件包含了链接方向以及参与方的地址.</li>
<li>RemotingShutdownEvent :    远程子系统被关闭的事件</li>
<li>RemotingErrorEvent :     远程相关的所有错误</li>
</ul>
<h3 id="Demo">Demo</h3><p>这里举一个稍微复杂点的例子——单词计数.这个是Hadoop的入门的例子,我们使用Akka配合远程调用来实现一次. 功能是这样的,服务端提供了map/reduce方式的单词数量的计算功能,而服务端提供了文本内容的.<br>它大概的运行流程是这样的:<br><img src="/img/2016/01/18/1.png" alt=""></p>
<ol>
<li>首先客户端的FileReadActor从文本文件中读取文件.</li>
<li>然后通过ClientActor发送给远端的服务端.</li>
<li>服务端通过WCMapReduceActor接受客户端发送的消息,并发消息放入优先级MailBox</li>
<li>WCMapReduceActor把接收到的文本内容分发给MapActor做Map计算</li>
<li>Map计算把结果都发送给ReduceActor,做汇总reduce计算.</li>
<li>最后AggregateActor把计算的结果显示出来.</li>
</ol>
<p>我们先来看客户端:</p>
<p><strong>FileReadActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReadActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="comment">/*如果消息是String类型的*/</span></span><br><span class="line">            String fileName = (String) message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                        <span class="keyword">new</span> InputStreamReader(Thread.currentThread().getContextClassLoader().getResource(fileName).openStream()));</span><br><span class="line">                String line;</span><br><span class="line">                <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/*遍历,一行一个消息反馈给消息发送方*/</span></span><br><span class="line">                    getSender().tell(line,<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"All lines send !"</span>);</span><br><span class="line">                <span class="comment">/*发送一个结束标识*/</span></span><br><span class="line">                getSender().tell(String.valueOf(<span class="string">"EOF"</span>),<span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">                System.err.format(<span class="string">"IOException: %s%n"</span>, x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown message ["</span> + message + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过InputStreamReader把文本内容一行一个的发送给Sender.</p>
<p><strong>ClientActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActorRef remoteServer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> inRemoteServer</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientActor</span><span class="params">(ActorRef inRemoteServer)</span> </span>&#123;</span><br><span class="line">        remoteServer = inRemoteServer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/*如果接收到的任务是String的,那么就直接发送给remoteServer这个Actor*/</span></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String msg = (String) message;</span><br><span class="line">            <span class="keyword">if</span> (message.equals(<span class="string">"EOF"</span>))&#123;</span><br><span class="line">                <span class="comment">//这个的Sender设置为自己是为了接收聚合完成的消息</span></span><br><span class="line">                remoteServer.tell(msg, getSelf());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                remoteServer.tell(msg, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            System.out.println(<span class="string">"聚合完成"</span>);</span><br><span class="line">            <span class="comment">//聚合完成后发送显示结果的消息</span></span><br><span class="line">            remoteServer.tell(<span class="string">"DISPLAY_LIST"</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行完毕,关机</span></span><br><span class="line">            getContext().stop(self());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*记录开始时间*/</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*计算用时*/</span></span><br><span class="line">        <span class="comment">// tell the world that the calculation is complete</span></span><br><span class="line">        <span class="keyword">long</span> timeSpent = (System.currentTimeMillis() - start);</span><br><span class="line">        System.out</span><br><span class="line">                .println(String</span><br><span class="line">                        .format(<span class="string">"\n\tClientActor estimate: \t\t\n\tCalculation time: \t%s MS"</span>,</span><br><span class="line">                                timeSpent));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个Actor重载了<code>preStart()</code>和<code>postStop()</code>方法用以记录性能.</p>
<p><strong>ClientMain.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        <span class="keyword">final</span> String fileName = <span class="string">"Othello.txt"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*根据配置,找到System*/</span></span><br><span class="line">        ActorSystem system = ActorSystem.create(<span class="string">"ClientApplication"</span>, ConfigFactory.load(<span class="string">"client"</span>).getConfig(<span class="string">"WCMapReduceClientApp"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*实例化远程Actor*/</span></span><br><span class="line">        <span class="keyword">final</span> ActorRef remoteActor = system.actorFor(<span class="string">"akka.tcp://WCMapReduceApp@127.0.0.1:2552/user/WCMapReduceActor"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*实例化Actor的管道*/</span></span><br><span class="line">        <span class="keyword">final</span> ActorRef fileReadActor = system.actorOf(Props.create(FileReadActor.class));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*实例化Client的Actor管道*/</span></span><br><span class="line">        <span class="keyword">final</span> ActorRef clientActor = system.actorOf(Props.create(ClientActor.class,remoteActor));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*发送文件名给fileReadActor.设置sender或者说回调的Actor为clientActor*/</span></span><br><span class="line">        fileReadActor.tell(fileName,clientActor);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类里面就使用了远程Actor的查找方法,通过<code>system.actorFor(&quot;akka.tcp://WCMapReduceApp@127.0.0.1:2552/user/WCMapReduceActor&quot;);</code>获取到了远程的Actor</p>
<p><strong>client.conf</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">WCMapReduceClientApp &#123;</span><br><span class="line">  include <span class="string">"common"</span></span><br><span class="line">  akka &#123;</span><br><span class="line">    actor &#123;</span><br><span class="line">      provider = <span class="string">"akka.remote.RemoteActorRefProvider"</span></span><br><span class="line">    &#125;</span><br><span class="line">    remote &#123;</span><br><span class="line">      enabled-transports = [<span class="string">"akka.remote.netty.tcp"</span>]</span><br><span class="line">      netty.tcp &#123;</span><br><span class="line">        hostname = <span class="string">"127.0.0.1"</span></span><br><span class="line">        port = <span class="number">2553</span>   <span class="comment">//0表示自动选择一个可用的</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我们来看看服务器端:</p>
<p><strong>MyPriorityMailBox.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPriorityMailBox</span> <span class="keyword">extends</span> <span class="title">UnboundedPriorityMailbox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个自定义优先级的无边界的邮箱. 用来规定命令的优先级. 这个就保证了DISPLAY_LIST 这个事件是最后再来处理.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPriorityMailBox</span><span class="params">(ActorSystem.Settings settings, Config config)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating a new PriorityGenerator,</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> PriorityGenerator() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gen</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (message.equals(<span class="string">"DISPLAY_LIST"</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 'DisplayList messages should be treated</span></span><br><span class="line">                    <span class="comment">// last if possible</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (message.equals(PoisonPill.getInstance()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">3</span>; <span class="comment">// PoisonPill when no other left</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// By default they go with high priority</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这个类,自定了一个无边界的优先级邮箱,这样做的目的是保证<code>DISPLAY_LIST</code>命令最后的响应.否则会出现文本内容还没有发送完成的情况下,就进行了结果的统计显示了.要使用这个自定义的优先级邮箱,需要在配置文件中进行配置:<br><strong>server.conf</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">WCMapReduceApp &#123;</span><br><span class="line">  include <span class="string">"common"</span></span><br><span class="line">  akka &#123;</span><br><span class="line">    actor &#123;</span><br><span class="line">      provider = <span class="string">"akka.remote.RemoteActorRefProvider"</span></span><br><span class="line">    &#125;</span><br><span class="line">    remote &#123;</span><br><span class="line">      enabled-transports = [<span class="string">"akka.remote.netty.tcp"</span>]</span><br><span class="line">      netty.tcp &#123;</span><br><span class="line">        hostname = <span class="string">"127.0.0.1"</span></span><br><span class="line">        port = <span class="number">2552</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  priorityMailBox-dispatcher &#123;</span><br><span class="line">    mailbox-type = <span class="string">"cn.sunxiang0918.akka.demo2.server.MyPriorityMailBox"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MapActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停用词</span></span><br><span class="line">    String[] STOP_WORDS = &#123;<span class="string">"a"</span>, <span class="string">"about"</span>, <span class="string">"above"</span>, <span class="string">"above"</span>, <span class="string">"across"</span>, <span class="string">"after"</span>,</span><br><span class="line">            <span class="string">"afterwards"</span>, <span class="string">"again"</span>, <span class="string">"against"</span>, <span class="string">"all"</span>, <span class="string">"almost"</span>, <span class="string">"alone"</span>,</span><br><span class="line">            <span class="string">"along"</span>, <span class="string">"already"</span>, <span class="string">"also"</span>, <span class="string">"although"</span>, <span class="string">"always"</span>, <span class="string">"am"</span>, <span class="string">"among"</span>,</span><br><span class="line">            <span class="string">"amongst"</span>, <span class="string">"amoungst"</span>, <span class="string">"amount"</span>, <span class="string">"an"</span>, <span class="string">"and"</span>, <span class="string">"another"</span>, <span class="string">"any"</span>,</span><br><span class="line">            <span class="string">"anyhow"</span>, <span class="string">"anyone"</span>, <span class="string">"anything"</span>, <span class="string">"anyway"</span>, <span class="string">"anywhere"</span>, <span class="string">"are"</span>,</span><br><span class="line">            <span class="string">"around"</span>, <span class="string">"as"</span>, <span class="string">"at"</span>, <span class="string">"back"</span>, <span class="string">"be"</span>, <span class="string">"became"</span>, <span class="string">"because"</span>, <span class="string">"become"</span>,</span><br><span class="line">            <span class="string">"becomes"</span>, <span class="string">"becoming"</span>, <span class="string">"been"</span>, <span class="string">"before"</span>, <span class="string">"beforehand"</span>, <span class="string">"behind"</span>,</span><br><span class="line">            <span class="string">"being"</span>, <span class="string">"below"</span>, <span class="string">"beside"</span>, <span class="string">"besides"</span>, <span class="string">"between"</span>, <span class="string">"beyond"</span>, <span class="string">"bill"</span>,</span><br><span class="line">            <span class="string">"both"</span>, <span class="string">"bottom"</span>, <span class="string">"but"</span>, <span class="string">"by"</span>, <span class="string">"call"</span>, <span class="string">"can"</span>, <span class="string">"cannot"</span>, <span class="string">"cant"</span>,</span><br><span class="line">            <span class="string">"co"</span>, <span class="string">"con"</span>, <span class="string">"could"</span>, <span class="string">"couldnt"</span>, <span class="string">"cry"</span>, <span class="string">"de"</span>, <span class="string">"describe"</span>, <span class="string">"detail"</span>,</span><br><span class="line">            <span class="string">"do"</span>, <span class="string">"done"</span>, <span class="string">"down"</span>, <span class="string">"due"</span>, <span class="string">"during"</span>, <span class="string">"each"</span>, <span class="string">"eg"</span>, <span class="string">"eight"</span>,</span><br><span class="line">            <span class="string">"either"</span>, <span class="string">"eleven"</span>, <span class="string">"else"</span>, <span class="string">"elsewhere"</span>, <span class="string">"empty"</span>, <span class="string">"enough"</span>, <span class="string">"etc"</span>,</span><br><span class="line">            <span class="string">"even"</span>, <span class="string">"ever"</span>, <span class="string">"every"</span>, <span class="string">"everyone"</span>, <span class="string">"everything"</span>, <span class="string">"everywhere"</span>,</span><br><span class="line">            <span class="string">"except"</span>, <span class="string">"few"</span>, <span class="string">"fifteen"</span>, <span class="string">"fify"</span>, <span class="string">"fill"</span>, <span class="string">"find"</span>, <span class="string">"fire"</span>,</span><br><span class="line">            <span class="string">"first"</span>, <span class="string">"five"</span>, <span class="string">"for"</span>, <span class="string">"former"</span>, <span class="string">"formerly"</span>, <span class="string">"forty"</span>, <span class="string">"found"</span>,</span><br><span class="line">            <span class="string">"four"</span>, <span class="string">"from"</span>, <span class="string">"front"</span>, <span class="string">"full"</span>, <span class="string">"further"</span>, <span class="string">"get"</span>, <span class="string">"give"</span>, <span class="string">"go"</span>,</span><br><span class="line">            <span class="string">"had"</span>, <span class="string">"has"</span>, <span class="string">"hasnt"</span>, <span class="string">"have"</span>, <span class="string">"he"</span>, <span class="string">"hence"</span>, <span class="string">"her"</span>, <span class="string">"here"</span>,</span><br><span class="line">            <span class="string">"hereafter"</span>, <span class="string">"hereby"</span>, <span class="string">"herein"</span>, <span class="string">"hereupon"</span>, <span class="string">"hers"</span>, <span class="string">"herself"</span>,</span><br><span class="line">            <span class="string">"him"</span>, <span class="string">"himself"</span>, <span class="string">"his"</span>, <span class="string">"how"</span>, <span class="string">"however"</span>, <span class="string">"hundred"</span>, <span class="string">"ie"</span>, <span class="string">"if"</span>,</span><br><span class="line">            <span class="string">"in"</span>, <span class="string">"inc"</span>, <span class="string">"indeed"</span>, <span class="string">"interest"</span>, <span class="string">"into"</span>, <span class="string">"is"</span>, <span class="string">"it"</span>, <span class="string">"its"</span>,</span><br><span class="line">            <span class="string">"itself"</span>, <span class="string">"keep"</span>, <span class="string">"last"</span>, <span class="string">"latter"</span>, <span class="string">"latterly"</span>, <span class="string">"least"</span>, <span class="string">"less"</span>,</span><br><span class="line">            <span class="string">"ltd"</span>, <span class="string">"made"</span>, <span class="string">"many"</span>, <span class="string">"may"</span>, <span class="string">"me"</span>, <span class="string">"meanwhile"</span>, <span class="string">"might"</span>, <span class="string">"mill"</span>,</span><br><span class="line">            <span class="string">"mine"</span>, <span class="string">"more"</span>, <span class="string">"moreover"</span>, <span class="string">"most"</span>, <span class="string">"mostly"</span>, <span class="string">"move"</span>, <span class="string">"much"</span>,</span><br><span class="line">            <span class="string">"must"</span>, <span class="string">"my"</span>, <span class="string">"myself"</span>, <span class="string">"name"</span>, <span class="string">"namely"</span>, <span class="string">"neither"</span>, <span class="string">"never"</span>,</span><br><span class="line">            <span class="string">"nevertheless"</span>, <span class="string">"next"</span>, <span class="string">"nine"</span>, <span class="string">"no"</span>, <span class="string">"nobody"</span>, <span class="string">"none"</span>, <span class="string">"noone"</span>,</span><br><span class="line">            <span class="string">"nor"</span>, <span class="string">"not"</span>, <span class="string">"nothing"</span>, <span class="string">"now"</span>, <span class="string">"nowhere"</span>, <span class="string">"of"</span>, <span class="string">"off"</span>, <span class="string">"often"</span>,</span><br><span class="line">            <span class="string">"on"</span>, <span class="string">"once"</span>, <span class="string">"one"</span>, <span class="string">"only"</span>, <span class="string">"onto"</span>, <span class="string">"or"</span>, <span class="string">"other"</span>, <span class="string">"others"</span>,</span><br><span class="line">            <span class="string">"otherwise"</span>, <span class="string">"our"</span>, <span class="string">"ours"</span>, <span class="string">"ourselves"</span>, <span class="string">"out"</span>, <span class="string">"over"</span>, <span class="string">"own"</span>,</span><br><span class="line">            <span class="string">"part"</span>, <span class="string">"per"</span>, <span class="string">"perhaps"</span>, <span class="string">"please"</span>, <span class="string">"put"</span>, <span class="string">"rather"</span>, <span class="string">"re"</span>, <span class="string">"same"</span>,</span><br><span class="line">            <span class="string">"see"</span>, <span class="string">"seem"</span>, <span class="string">"seemed"</span>, <span class="string">"seeming"</span>, <span class="string">"seems"</span>, <span class="string">"serious"</span>, <span class="string">"several"</span>,</span><br><span class="line">            <span class="string">"she"</span>, <span class="string">"should"</span>, <span class="string">"show"</span>, <span class="string">"side"</span>, <span class="string">"since"</span>, <span class="string">"sincere"</span>, <span class="string">"six"</span>,</span><br><span class="line">            <span class="string">"sixty"</span>, <span class="string">"so"</span>, <span class="string">"some"</span>, <span class="string">"somehow"</span>, <span class="string">"someone"</span>, <span class="string">"something"</span>,</span><br><span class="line">            <span class="string">"sometime"</span>, <span class="string">"sometimes"</span>, <span class="string">"somewhere"</span>, <span class="string">"still"</span>, <span class="string">"such"</span>, <span class="string">"system"</span>,</span><br><span class="line">            <span class="string">"take"</span>, <span class="string">"ten"</span>, <span class="string">"than"</span>, <span class="string">"that"</span>, <span class="string">"the"</span>, <span class="string">"their"</span>, <span class="string">"them"</span>,</span><br><span class="line">            <span class="string">"themselves"</span>, <span class="string">"then"</span>, <span class="string">"thence"</span>, <span class="string">"there"</span>, <span class="string">"thereafter"</span>, <span class="string">"thereby"</span>,</span><br><span class="line">            <span class="string">"therefore"</span>, <span class="string">"therein"</span>, <span class="string">"thereupon"</span>, <span class="string">"these"</span>, <span class="string">"they"</span>, <span class="string">"thickv"</span>,</span><br><span class="line">            <span class="string">"thin"</span>, <span class="string">"third"</span>, <span class="string">"this"</span>, <span class="string">"those"</span>, <span class="string">"though"</span>, <span class="string">"three"</span>, <span class="string">"through"</span>,</span><br><span class="line">            <span class="string">"throughout"</span>, <span class="string">"thru"</span>, <span class="string">"thus"</span>, <span class="string">"to"</span>, <span class="string">"together"</span>, <span class="string">"too"</span>, <span class="string">"top"</span>,</span><br><span class="line">            <span class="string">"toward"</span>, <span class="string">"towards"</span>, <span class="string">"twelve"</span>, <span class="string">"twenty"</span>, <span class="string">"two"</span>, <span class="string">"un"</span>, <span class="string">"under"</span>,</span><br><span class="line">            <span class="string">"until"</span>, <span class="string">"up"</span>, <span class="string">"upon"</span>, <span class="string">"us"</span>, <span class="string">"very"</span>, <span class="string">"via"</span>, <span class="string">"was"</span>, <span class="string">"we"</span>, <span class="string">"well"</span>,</span><br><span class="line">            <span class="string">"were"</span>, <span class="string">"what"</span>, <span class="string">"whatever"</span>, <span class="string">"when"</span>, <span class="string">"whence"</span>, <span class="string">"whenever"</span>, <span class="string">"where"</span>,</span><br><span class="line">            <span class="string">"whereafter"</span>, <span class="string">"whereas"</span>, <span class="string">"whereby"</span>, <span class="string">"wherein"</span>, <span class="string">"whereupon"</span>,</span><br><span class="line">            <span class="string">"wherever"</span>, <span class="string">"whether"</span>, <span class="string">"which"</span>, <span class="string">"while"</span>, <span class="string">"whither"</span>, <span class="string">"who"</span>,</span><br><span class="line">            <span class="string">"whoever"</span>, <span class="string">"whole"</span>, <span class="string">"whom"</span>, <span class="string">"whose"</span>, <span class="string">"why"</span>, <span class="string">"will"</span>, <span class="string">"with"</span>,</span><br><span class="line">            <span class="string">"within"</span>, <span class="string">"without"</span>, <span class="string">"would"</span>, <span class="string">"yet"</span>, <span class="string">"you"</span>, <span class="string">"your"</span>, <span class="string">"yours"</span>,</span><br><span class="line">            <span class="string">"yourself"</span>, <span class="string">"yourselves"</span>, <span class="string">"the"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; STOP_WORDS_LIST = Arrays.asList(STOP_WORDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*reduce聚合的Actor*/</span></span><br><span class="line">    <span class="keyword">private</span> ActorRef actor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapActor</span><span class="params">(ActorRef inReduceActor)</span> </span>&#123;</span><br><span class="line">        actor = inReduceActor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动MapActor:"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 用于分词 计算单词的数量的</span><br><span class="line">     * <span class="doctag">@param</span> line</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Result&gt; <span class="title">evaluateExpression</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">        List&lt;Result&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*字符串分词器*/</span></span><br><span class="line">        StringTokenizer parser = <span class="keyword">new</span> StringTokenizer(line);</span><br><span class="line">        <span class="keyword">while</span> (parser.hasMoreTokens()) &#123;</span><br><span class="line">            <span class="comment">/*如果是,那么就判断是否是字母.然后把结果记录下来*/</span></span><br><span class="line">            String word = parser.nextToken().toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (isAlpha(word) &amp;&amp; !STOP_WORDS_LIST.contains(word)) &#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> Result(word, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断是否是字母</span><br><span class="line">     * <span class="doctag">@param</span> s</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAlpha</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        s = s.toUpperCase();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = (<span class="keyword">int</span>) s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="number">65</span> || c &gt; <span class="number">90</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String work = (String) message;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (work.equals(<span class="string">"EOF"</span>))&#123;</span><br><span class="line">                <span class="comment">/*表示已经结束了*/</span></span><br><span class="line">                actor.tell(<span class="keyword">true</span>,<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 计算这一行的单词情况</span></span><br><span class="line">            List&lt;Result&gt; list = evaluateExpression(work);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把这一行的单词情况发送给汇总的ReduceActor</span></span><br><span class="line">            actor.tell(list, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown message ["</span> + message + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当这个actor接收到消息后,判断是否是结束标识,如果是就发送消息给reduceActor表示已经结束了.否则就计算这一行中的单词的个数,并把这个个数发送给reduceActor.</p>
<p><strong>ReduceActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*管道Actor*/</span></span><br><span class="line">    <span class="keyword">private</span> ActorRef actor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReduceActor</span><span class="params">(ActorRef inAggregateActor)</span> </span>&#123;</span><br><span class="line">        actor = inAggregateActor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动ReduceActor:"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*强制转换结果*/</span></span><br><span class="line">            List&lt;Result&gt; work = (List&lt;Result&gt;) message;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第一次汇总单词表结果.</span></span><br><span class="line">            NavigableMap&lt;String, Integer&gt; reducedList = reduce(work);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把这次汇总的结果发送给最终的结果聚合Actor</span></span><br><span class="line">            actor.tell(reducedList, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            <span class="comment">//表示已经计算结束了</span></span><br><span class="line">            <span class="comment">// 把这次汇总的结果发送给最终的结果聚合Actor</span></span><br><span class="line">            actor.tell(message, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown message ["</span> + message + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 聚合计算本次结果中各个单词的出现次数</span><br><span class="line">     * <span class="doctag">@param</span> list</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> NavigableMap&lt;String, Integer&gt; reduce(List&lt;Result&gt; list) &#123;</span><br><span class="line"></span><br><span class="line">        NavigableMap&lt;String, Integer&gt; reducedMap = <span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Result result : list) &#123;</span><br><span class="line">            <span class="comment">/*遍历结果,如果在这个小的结果中已经存在相同的单词了,那么数量+1,否则新建*/</span></span><br><span class="line">            <span class="keyword">if</span> (reducedMap.containsKey(result.getWord())) &#123;</span><br><span class="line">                Integer value = reducedMap.get(result.getWord());</span><br><span class="line">                value++;</span><br><span class="line">                reducedMap.put(result.getWord(), value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reducedMap.put(result.getWord(), <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reducedMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个Actor接收到消息后,判断是什么消息,如果是结果消息,那么就对结果进行整理,得出某个单词出现的次数,否则就是结束标记,告诉管道Actor统计已经结束.</p>
<p><strong>AggregateActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AggregateActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*最终的结果*/</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; finalReducedMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动AggregateActor:"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/*如果是Map,那么就进行reduce操作*/</span></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">            Map&lt;String, Integer&gt; reducedList = (Map&lt;String, Integer&gt;) message;</span><br><span class="line">            aggregateInMemoryReduce(reducedList);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="comment">/*如果是String,那么就是打印结果*/</span></span><br><span class="line">            <span class="keyword">if</span> (((String) message).compareTo(<span class="string">"DISPLAY_LIST"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//getSender().tell(finalReducedMap.toString());</span></span><br><span class="line">                System.out.println(finalReducedMap.toString());</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            <span class="comment">/*向客户端发送已经reduce完成的信息*/</span></span><br><span class="line">            getSender().tell(<span class="keyword">true</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">aggregateInMemoryReduce</span><span class="params">(Map&lt;String, Integer&gt; reducedList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : reducedList.keySet()) &#123;</span><br><span class="line">            <span class="comment">/*最终的数量的累加*/</span></span><br><span class="line">            <span class="keyword">if</span> (finalReducedMap.containsKey(key)) &#123;</span><br><span class="line">                Integer count = reducedList.get(key) + finalReducedMap.get(key);</span><br><span class="line">                finalReducedMap.put(key, count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finalReducedMap.put(key, reducedList.get(key));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个actor接收到消息后,判断消息的类型,如果是<code>DISPLAY_LIST</code>标识,那么就打印结果.如果是<code>Boolean</code>就表示统计完成了,那么就发送消息给客户端.如果是<code>Map</code>,那么这个就是某一个map/reduce的结果,那么就把这个结果聚合到最终的结果中去.</p>
<p><strong>WCMapReduceActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WCMapReduceActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActorRef mapRouter;</span><br><span class="line">    <span class="keyword">private</span> ActorRef aggregateActor;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动WCMapReduceActor:"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="comment">/*如果接收到的是显示结果的请求,那么就调用reduce的Actor*/</span></span><br><span class="line">            <span class="keyword">if</span> (((String) message).compareTo(<span class="string">"DISPLAY_LIST"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Got Display Message"</span>);</span><br><span class="line">                aggregateActor.tell(message, getSender());</span><br><span class="line">            &#125;<span class="keyword">if</span> (message.equals(<span class="string">"EOF"</span>))&#123;</span><br><span class="line">                <span class="comment">//表示发送完毕</span></span><br><span class="line">                aggregateActor.tell(<span class="keyword">true</span>, getSender());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/*否则给map的Actor进行计算*/</span></span><br><span class="line">                mapRouter.tell(message,<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WCMapReduceActor</span><span class="params">(ActorRef inAggregateActor, ActorRef inMapRouter)</span> </span>&#123;</span><br><span class="line">        mapRouter = inMapRouter;</span><br><span class="line">        aggregateActor = inAggregateActor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消息中转和统管的Actor,它统管了其他的几个Actor,是消息的入口.</p>
<p><strong>WCMapReduceServer.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WCMapReduceServer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActorRef mapRouter;</span><br><span class="line">    <span class="keyword">private</span> ActorRef reduceRouter;</span><br><span class="line">    <span class="keyword">private</span> ActorRef aggregateActor;</span><br><span class="line">    <span class="keyword">private</span> ActorRef wcMapReduceActor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WCMapReduceServer</span><span class="params">(<span class="keyword">int</span> no_of_reduce_workers, <span class="keyword">int</span> no_of_map_workers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*创建了Actor系统*/</span></span><br><span class="line">        ActorSystem system = ActorSystem.create(<span class="string">"WCMapReduceApp"</span>, ConfigFactory.load(<span class="string">"application"</span>)</span><br><span class="line">                .getConfig(<span class="string">"WCMapReduceApp"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建聚合Actor</span></span><br><span class="line">        aggregateActor = system.actorOf(Props.create(AggregateActor.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建多个聚合的Actor</span></span><br><span class="line">        reduceRouter = system.actorOf(Props.create(ReduceActor.class,aggregateActor).withRouter(<span class="keyword">new</span> RoundRobinPool(no_of_reduce_workers)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建多个Map的Actor</span></span><br><span class="line">        mapRouter = system.actorOf(Props.create(MapActor.class,reduceRouter).withRouter(<span class="keyword">new</span> RoundRobinPool(no_of_map_workers)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create the overall WCMapReduce Actor that acts as the remote actor</span></span><br><span class="line">        <span class="comment">// for clients</span></span><br><span class="line">        Props props = Props.create(WCMapReduceActor.class,aggregateActor,mapRouter).withDispatcher(<span class="string">"priorityMailBox-dispatcher"</span>);</span><br><span class="line">        wcMapReduceActor = system.actorOf(props, <span class="string">"WCMapReduceActor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WCMapReduceServer(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端的入口程序,定义了一个50个actor的单词统计服务.并使用轮询模式来分发客服端接收到的统计任务.</p>
<p>以上就是整个DEMO的所有的代码.当执行这个程序后,会在控制台打印:</p>
<p>服务器端:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Got Display Message</span><br><span class="line">&#123;minerals=<span class="number">5</span>, half=<span class="number">35</span>, exceeding=<span class="number">5</span>, spoke=<span class="number">25</span>, mince=<span class="number">5</span>, hall=<span class="number">5</span>, disproportion=<span class="number">5</span>, youth=<span class="number">20</span>, guards=<span class="number">5</span>, wreck=<span class="number">5</span>, begins=<span class="number">10</span>, approved=<span class="number">20</span>, imperfect=<span class="number">5</span>, drunk=<span class="number">15</span>, framed=<span class="number">10</span>, pick=<span class="number">5</span>,......&#125;</span><br></pre></td></tr></table></figure>
<p>客户端:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">All lines send !</span><br><span class="line">聚合完成</span><br><span class="line">	ClientActor estimate: 		</span><br><span class="line">	Calculation time: 	<span class="number">467</span> MS</span><br></pre></td></tr></table></figure>
<p>到此,我们就实现了通过<code>AKKA-remoting</code> 来进行<code>map/reduce</code>的简单计算.</p>
<h2 id="Cluster调用">Cluster调用</h2><h3 id="原理">原理</h3><p>Akka除了remoting远程调用外,还提供了支持去中心化的基于P2P的集群服务,并且不会出现单点故障.Akka的集群是基于Gossip协议实现的,支持服务自动失效检测,能够自动发现出现问题而离开集群的成员节点,通过事件驱动的方式,将状态传播到整个集群的其他成员节点中去.Gossip协议是点对点通信协议的一种,它受社交网络中的流言传播的特点所启发,解决了在超大规模集群下其他方式无法解决的单点等问题.</p>
<p>一个Akka集群是由一组成员节点组成的,每一个成员节点都是通过<code>hostname:port:uid</code>来唯一标识,并且每一个成员节点间是完全解耦合的.</p>
<h4 id="节点状态">节点状态</h4><p>Akka集群内部为集群中的成员定义了6种状态,并提供了状态转换矩阵,这6种状态分别是:</p>
<ul>
<li>Joining : 正在加入集群的状态</li>
<li>Up :    正常提供服务的状态</li>
<li>Leaving :    正在离开集群的状态</li>
<li>Down :    节点服务下线的状态</li>
<li>Exiting :    节点离开状态</li>
<li>Removed :    节点被删除状态</li>
</ul>
<p><img src="/img/2016/01/18/2.png" alt=""></p>
<p>在Akka集群中的每一个成员节点,都只可能处在这6种状态中的一种中.当节点状态发生变化的时候,会发出节点状态事件.需要注意的是,除了Down和Removed状态外,其他状态是有可能随时变为Down状态的,即节点故障而无法提供服务.处于Down状态的节点如果想要再次加入Akka集群中,需要重新启动,并加入Joining状态,然后才能进行后续状态的变化,加入集群.</p>
<h4 id="故障监控">故障监控</h4><p>在Akka集群中,集群的每一个成员节点,都会被其他另外一组节点(默认是5个)所监控,这一组节点会通过心跳来检测被监控的节点是否处于Unreachable状态,如果不可达则这一组节点会将被监控的节点的Unreachable状态向集群中的其他所有节点传播,最终使集群中的每个成员节点都知道被监控的节点已经故障.</p>
<p>Akka集群中任一一个成员节点都有可能成为集群的Leader,这是基于Gossip协议收敛过程得到的确定性结果,并不是通过选举产生,从而避免了单点故障.在Akka集群中,Leader只是一种角色,在各轮Gossip收敛过程中Leader可能是不断变化的.Leader的职责就是让成员节点加入和离开集群.一个成员节点最开始是处于Joining状态,一旦所有其他节点都看到了新加入的该节点,则Leader会设置这个节点的状态为up.如果一个节点安全离开Akka集群,那么这个节点的状态会变为Leaving状态,当Leader看到该节点为Leaving状态,会将其状态修改为Exiting,然后通知所有其他节点,当所有节点看到该节点状态为exiting后,Leader将该节点移除,状态修改为removed状态.</p>
<h3 id="配置-1">配置</h3><p>要在项目中使用Akka集群,首先需要的就是在项目的Maven中引入akka-Cluster:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>akka-cluster_2.11<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在<code>application.conf</code>中配置必要的参数:</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">akka &#123;</span><br><span class="line">  actor &#123;</span><br><span class="line">   <span class="comment">#表示Actor的提供者是Cluster集群</span></span><br><span class="line">    <span class="variable">provider =</span> <span class="string">"akka.cluster.ClusterActorRefProvider"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#同akka-remoting,表示远程协议是什么</span></span><br><span class="line">  remote &#123;</span><br><span class="line">    <span class="variable">log-remote-lifecycle-events =</span> off</span><br><span class="line">    netty.tcp &#123;</span><br><span class="line">      <span class="variable">hostname =</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">      <span class="variable">port =</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#集群特有的配置</span></span><br><span class="line">  cluster &#123;</span><br><span class="line">    <span class="comment">#种子节点</span></span><br><span class="line">    <span class="variable">seed-nodes =</span> [</span><br><span class="line">      <span class="string">"akka.tcp://ClusterSystem@127.0.0.1:2551"</span>,</span><br><span class="line">      <span class="string">"akka.tcp://ClusterSystem@127.0.0.1:2552"</span>]</span><br><span class="line">    <span class="comment">#自动down掉不可达的成员节点</span></span><br><span class="line">    <span class="variable">auto-down-unreachable-after =</span> <span class="number">10</span>s</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的配置需要特别注意的就是<code>种子节点</code>,种子节点是akka集群中的一种特殊的节点角色.<br>种子节点最主要的用处是提供Cluster的初始化和加入点,同时也为其他节点作为中间联系人.要启动Akka-Cluster就必须配置一些列的种子节点.这些种子节点就是一开始就能够预料到的节点,有节点加入的时候,会等种子节点的返回确认才算是加入成功.</p>
<p>更多的集群配置请参见:<a href="http://doc.akka.io/docs/akka/snapshot/general/configuration.html#config-akka-cluster" target="_blank" rel="external">config-akka-cluster</a></p>
<h3 id="集群事件">集群事件</h3><p>正如上文所说,当节点发生变化的时候,Leader会发送状态的事件给集群中的所有成员节点.因此,接收和处理这些事件也是非常重要的.</p>
<ul>
<li>MemberUp : 成员节点上线</li>
<li>MemberExited : 成员节点下线</li>
<li>MemberRemoved : 成员节点被剔除</li>
<li>UnreachableMember : 成员节点无法到达</li>
<li>ReachableMember : 成员节点可到达</li>
<li>LeaderChanged : Leader变化</li>
<li>RoleLeaderChanged : 角色Leader变化</li>
<li>ClusterShuttingDown : 集群关闭</li>
<li>ClusterMetricsChanged : </li>
</ul>
<p>要说明这些节点的变化可以参考官方给出的最最简单的Akka集群的Demo,它不仅列出了一个最简单的Akka的集群要如何构建,也说明了这几个事件状态的变化.</p>
<h4 id="集群事件Demo">集群事件Demo</h4><p>在官方的文档中,编写了一个最简单的Akka-Cluster的例子,这个例子就是启动三个Akka的节点,并且监听了节点的所有事件,接收到事件后,打印出来.</p>
<p><strong>demo6.conf</strong></p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">akka &#123;</span><br><span class="line">  actor &#123;</span><br><span class="line">    <span class="variable">provider =</span> <span class="string">"akka.cluster.ClusterActorRefProvider"</span></span><br><span class="line">  &#125;</span><br><span class="line">  remote &#123;</span><br><span class="line">    <span class="variable">log-remote-lifecycle-events =</span> off</span><br><span class="line">    netty.tcp &#123;</span><br><span class="line">      <span class="variable">hostname =</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">      <span class="variable">port =</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster &#123;</span><br><span class="line">    <span class="variable">seed-nodes =</span> [</span><br><span class="line">      <span class="comment">#先启动了两个种子节点,这样当有新的节点加入时,会把事件通知给这两个节点.</span></span><br><span class="line">      <span class="string">"akka.tcp://ClusterSystem@127.0.0.1:2551"</span>,</span><br><span class="line">      <span class="string">"akka.tcp://ClusterSystem@127.0.0.1:2552"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="variable">auto-down-unreachable-after =</span> <span class="number">10</span>s</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SimpleClusterListener.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleClusterListener</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*记录日志*/</span></span><br><span class="line">    LoggingAdapter log = Logging.getLogger(getContext().system(), <span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*创建,获取集群*/</span></span><br><span class="line">    Cluster cluster = Cluster.get(getContext().system());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订阅集群中的事件</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//region subscribe</span></span><br><span class="line">        cluster.subscribe(getSelf(), ClusterEvent.initialStateAsEvents(),</span><br><span class="line">                MemberEvent.class, UnreachableMember.class);</span><br><span class="line">        <span class="comment">//endregion</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//re-subscribe when restart</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cluster.unsubscribe(getSelf());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*当接收到不同的事件的时候,打印出不同的信息*/</span></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> MemberUp) &#123;</span><br><span class="line">            MemberUp mUp = (MemberUp) message;</span><br><span class="line">            log.info(<span class="string">"Member is Up: &#123;&#125;"</span>, mUp.member());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> UnreachableMember) &#123;</span><br><span class="line">            UnreachableMember mUnreachable = (UnreachableMember) message;</span><br><span class="line">            log.info(<span class="string">"Member detected as unreachable: &#123;&#125;"</span>, mUnreachable.member());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> MemberRemoved) &#123;</span><br><span class="line">            MemberRemoved mRemoved = (MemberRemoved) message;</span><br><span class="line">            log.info(<span class="string">"Member is Removed: &#123;&#125;"</span>, mRemoved.member());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> MemberEvent) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">            log.info(<span class="string">"Member Event: &#123;&#125;"</span>, ((MemberEvent) message).member());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unhandled(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SimpleClusterApp.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleClusterApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">/*启动三个节点*/</span></span><br><span class="line">            startup(<span class="keyword">new</span> String[]&#123;<span class="string">"2551"</span>, <span class="string">"2552"</span>, <span class="string">"0"</span>&#125;);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            startup(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">(String[] ports)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String port : ports) &#123;</span><br><span class="line">            <span class="comment">// 重写配置中的远程端口</span></span><br><span class="line">            Config config = ConfigFactory.parseString(</span><br><span class="line">                    <span class="string">"akka.remote.netty.tcp.port="</span> + port).withFallback(</span><br><span class="line">                    ConfigFactory.load(<span class="string">"demo6"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建ActorSystem,名称需要和conf配置文件中的相同</span></span><br><span class="line">            ActorSystem system = ActorSystem.create(<span class="string">"ClusterSystem"</span>, config);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建集群中的Actor,并监听事件</span></span><br><span class="line">            system.actorOf(Props.create(SimpleClusterListener.class),</span><br><span class="line">                    <span class="string">"clusterListener"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个简单的例子启动了三个节点,并创建了一个Actor来监听集群中的各种事件,执行这个Demo,会在控制台打印:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.051</span>] [main] [akka.remote.Remoting] Starting remoting</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.347</span>] [main] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.356</span>] [main] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Starting up...</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.425</span>] [main] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Registered cluster JMX MBean [akka:<span class="built_in">type</span>=Cluster]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.425</span>] [main] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Started up successfully</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.429</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">14</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Metrics will be retreived from MBeans, and may be incorrect on some platforms. To increase metric accuracy add the <span class="string">'sigar.jar'</span> to the classpath and the appropriate platform-specific native libary to <span class="string">'java.library.path'</span>. Reason: java.lang.ClassNotFoundException: org.hyperic.sigar.Sigar</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.432</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">14</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Metrics collection has started successfully</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.454</span>] [main] [akka.remote.Remoting] Starting remoting</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.460</span>] [main] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.461</span>] [main] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>] - Starting up...</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.464</span>] [main] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>] - Started up successfully</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.464</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">4</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>] - Metrics will be retreived from MBeans, and may be incorrect on some platforms. To increase metric accuracy add the <span class="string">'sigar.jar'</span> to the classpath and the appropriate platform-specific native libary to <span class="string">'java.library.path'</span>. Reason: java.lang.ClassNotFoundException: org.hyperic.sigar.Sigar</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.464</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">4</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>] - Metrics collection has started successfully</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.486</span>] [main] [akka.remote.Remoting] Starting remoting</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.491</span>] [main] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.492</span>] [main] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>] - Starting up...</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.494</span>] [main] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>] - Started up successfully</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.494</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">3</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>] - Metrics will be retreived from MBeans, and may be incorrect on some platforms. To increase metric accuracy add the <span class="string">'sigar.jar'</span> to the classpath and the appropriate platform-specific native libary to <span class="string">'java.library.path'</span>. Reason: java.lang.ClassNotFoundException: org.hyperic.sigar.Sigar</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.494</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">3</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>] - Metrics collection has started successfully</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.645</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">4</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] is JOINING, roles []</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.665</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">4</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Leader is moving node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] to [Up]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">42.672</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">16</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.662</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">3</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>] is JOINING, roles []</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.662</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">3</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>] is JOINING, roles []</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.665</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">18</span>] [akka://ClusterSystem/user/clusterListener] Member Event: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>, status = Joining)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.666</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">4</span>] [akka://ClusterSystem/user/clusterListener] Member Event: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>, status = Joining)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.731</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">21</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>] - Welcome from [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.731</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">17</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>] - Welcome from [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.731</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.732</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/user/clusterListener] Member Event: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>, status = Joining)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.732</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/user/clusterListener] Member Event: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>, status = Joining)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.733</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">5</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.733</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">5</span>] [akka://ClusterSystem/user/clusterListener] Member Event: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>, status = Joining)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">47.745</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">18</span>] [akka://ClusterSystem/user/clusterListener] Member Event: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>, status = Joining)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">48.464</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">15</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Leader is moving node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>] to [Up]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">48.464</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">15</span>] [akka.cluster.Cluster(akka://ClusterSystem)] Cluster Node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2551</span>] - Leader is moving node [akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>] to [Up]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">48.465</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">15</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">48.465</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">15</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">49.463</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">16</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">49.463</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">16</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">49.481</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">21</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2552</span>, status = Up)</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">49.481</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">21</span>] [akka://ClusterSystem/user/clusterListener] Member is Up: Member(address = akka.tcp://ClusterSystem@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">57726</span>, status = Up)</span><br></pre></td></tr></table></figure>
<p>从日志中就可以看出各种状态的变化</p>
<h3 id="集群实践">集群实践</h3><h4 id="阶乘服务Demo">阶乘服务Demo</h4><p>这里通过一个简单的阶乘计算,来展示Akka-Cluster的使用.<br>这个Demo分为了前台和后台两个部分,前台只用来输入阶乘的大小以及打印计算的结果,后台节点负责真正的阶乘的计算.</p>
<p><strong>demo7.conf</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">include</span> <span class="string">"demo6"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># //#min-nr-of-members</span></span><br><span class="line">akka.cluster.<span class="built_in">min</span>-nr-<span class="operator">of</span>-members = <span class="number">3</span></span><br><span class="line"><span class="comment"># //#min-nr-of-members</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># //#role-min-nr-of-members</span></span><br><span class="line">akka.cluster.role &#123;</span><br><span class="line">  frontend.<span class="built_in">min</span>-nr-<span class="operator">of</span>-members = <span class="number">1</span></span><br><span class="line">  backend.<span class="built_in">min</span>-nr-<span class="operator">of</span>-members = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># //#role-min-nr-of-members</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># //#adaptive-router</span></span><br><span class="line">akka.actor.deployment &#123;</span><br><span class="line">  /factorialFrontend/factorialBackendRouter = &#123;</span><br><span class="line">    router = adaptive-group</span><br><span class="line">    <span class="comment"># metrics-selector = heap</span></span><br><span class="line">    <span class="comment"># metrics-selector = load</span></span><br><span class="line">    <span class="comment"># metrics-selector = cpu</span></span><br><span class="line">    metrics-selector = mix</span><br><span class="line">    nr-<span class="operator">of</span>-instances = <span class="number">100</span></span><br><span class="line">    routees.paths = [<span class="string">"/user/factorialBackend"</span>]</span><br><span class="line">    cluster &#123;</span><br><span class="line">      enabled = <span class="command"><span class="keyword">on</span></span></span><br><span class="line">      use-role = backend</span><br><span class="line">      allow-<span class="built_in">local</span>-routees = off</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># //#adaptive-router</span></span><br></pre></td></tr></table></figure>
<p><strong>FactorialResult.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorialResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> BigInteger factorial;</span><br><span class="line"></span><br><span class="line">    FactorialResult(<span class="keyword">int</span> n, BigInteger factorial) &#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.factorial = factorial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FactorialResult&#123;"</span> +</span><br><span class="line">                <span class="string">"n="</span> + n +</span><br><span class="line">                <span class="string">", factorial="</span> + factorial +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>FactorialBackend.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorialBackend</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是数字</span></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">final</span> Integer n = (Integer) message;</span><br><span class="line">            <span class="comment">/*使用akka的future功能,异步的计算阶乘*/</span></span><br><span class="line">            Future&lt;BigInteger&gt; f = future(() -&gt; factorial(n), getContext().dispatcher());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*合并计算的结果*/</span></span><br><span class="line">            Future&lt;FactorialResult&gt; result = f.map(</span><br><span class="line">                    <span class="keyword">new</span> Mapper&lt;BigInteger, FactorialResult&gt;() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> FactorialResult <span class="title">apply</span><span class="params">(BigInteger factorial)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> FactorialResult(n, factorial);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, getContext().dispatcher());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*把结果返回Sender*/</span></span><br><span class="line">            pipe(result, getContext().dispatcher()).to(getSender());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unhandled(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 进行阶乘计算</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function">BigInteger <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        BigInteger acc = BigInteger.ONE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            acc = acc.multiply(BigInteger.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>FactorialBackendMain.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorialBackendMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 重写配置文件中的集群角色和端口</span></span><br><span class="line">    <span class="keyword">final</span> String port = args.length &gt; <span class="number">0</span> ? args[<span class="number">0</span>] : <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">final</span> Config config = ConfigFactory.parseString(<span class="string">"akka.remote.netty.tcp.port="</span> + port).</span><br><span class="line">      withFallback(ConfigFactory.parseString(<span class="string">"akka.cluster.roles = [backend]"</span>)).</span><br><span class="line">      withFallback(ConfigFactory.load(<span class="string">"demo7"</span>));</span><br><span class="line"></span><br><span class="line">    ActorSystem system = ActorSystem.create(<span class="string">"ClusterSystem"</span>, config);</span><br><span class="line"></span><br><span class="line">    system.actorOf(Props.create(FactorialBackend.class), <span class="string">"factorialBackend"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>FactorialFrontend.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorialFrontend</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> upToN;        <span class="comment">//计算到多少</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> repeat;       <span class="comment">//是否重复计算</span></span><br><span class="line"></span><br><span class="line">    LoggingAdapter log = Logging.getLogger(getContext().system(), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取到Backend的Router*/</span></span><br><span class="line">    ActorRef backend = getContext().actorOf(FromConfig.getInstance().props(),</span><br><span class="line">            <span class="string">"factorialBackendRouter"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FactorialFrontend</span><span class="params">(<span class="keyword">int</span> upToN, <span class="keyword">boolean</span> repeat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upToN = upToN;</span><br><span class="line">        <span class="keyword">this</span>.repeat = repeat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为是在Start前就发送消息,所以必定超时.</span></span><br><span class="line">        sendJobs();</span><br><span class="line">        getContext().setReceiveTimeout(Duration.create(<span class="number">10</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> FactorialResult) &#123;</span><br><span class="line">            FactorialResult result = (FactorialResult) message;</span><br><span class="line">            <span class="keyword">if</span> (result.n == upToN) &#123;</span><br><span class="line">                System.out.println(<span class="string">"计算的结果:"</span> + result);</span><br><span class="line">                <span class="keyword">if</span> (repeat)</span><br><span class="line">                    sendJobs();</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    getContext().stop(getSelf());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ReceiveTimeout) &#123;</span><br><span class="line">            log.info(<span class="string">"Timeout"</span>);</span><br><span class="line">            sendJobs();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unhandled(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendJobs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Starting batch of factorials up to [&#123;&#125;]"</span>, upToN);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= upToN; n++) &#123;</span><br><span class="line">            backend.tell(n, getSelf());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>FactorialFrontendMain.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorialFrontendMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> upToN = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Config config = ConfigFactory.parseString(</span><br><span class="line">        <span class="string">"akka.cluster.roles = [frontend]"</span>).withFallback(</span><br><span class="line">        ConfigFactory.load(<span class="string">"demo7"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"ClusterSystem"</span>, config);</span><br><span class="line">    system.log().info(</span><br><span class="line">        <span class="string">"Factorials will start when 2 backend members in the cluster."</span>);</span><br><span class="line">    <span class="comment">//#registerOnUp</span></span><br><span class="line">    Cluster.get(system).registerOnMemberUp((Runnable) () -&gt; system.actorOf(Props.create(FactorialFrontend.class, upToN, <span class="keyword">false</span>),</span><br><span class="line">        <span class="string">"factorialFrontend"</span>));</span><br><span class="line">    <span class="comment">//#registerOnUp</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>FactorialApp.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactorialApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// starting 3 backend nodes and 1 frontend node</span></span><br><span class="line">    FactorialBackendMain.main(<span class="keyword">new</span> String[] &#123; <span class="string">"2551"</span> &#125;);</span><br><span class="line">    FactorialBackendMain.main(<span class="keyword">new</span> String[] &#123; <span class="string">"2552"</span> &#125;);</span><br><span class="line">    FactorialBackendMain.main(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">    FactorialFrontendMain.main(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过执行<code>FactorialApp.java</code>可以启动整个演示. 它创建了3个后台节点和一个前台节点.<br>前台节点启动后,创建<code>FactorialFrontend</code>Actor,这个Actor负责发送计算数给后台节点,以及接受计算的结果并打印出来.后台节点的Actor<code>FactorialBackend</code>负责计算阶乘,并返回结果.</p>
<p>执行这个DEMO后,控制台会打印:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.580</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">17</span>] [akka://ClusterSystem/user/factorialFrontend] Starting batch of factorials up to [<span class="number">10</span>]</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.583</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [1] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.583</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [2] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.583</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [3] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.583</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [4] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.583</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [5] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.583</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [6] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.584</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [7] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.584</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [8] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.584</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [9] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">04.584</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">2</span>] [akka://ClusterSystem/deadLetters] Message [java.lang.Integer] from Actor[akka://ClusterSystem/user/factorialFrontend<span class="comment">#1317512767] to Actor[akka://ClusterSystem/deadLetters] was not delivered. [10] dead letters encountered, no more dead letters will be logged. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.</span></span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">14.600</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">7</span>] [akka://ClusterSystem/user/factorialFrontend] Timeout</span><br><span class="line">[INFO] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">14.601</span>] [ClusterSystem-akka.actor.default-dispatcher-<span class="number">7</span>] [akka://ClusterSystem/user/factorialFrontend] Starting batch of factorials up to [<span class="number">10</span>]</span><br><span class="line">[WARN] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">14.607</span>] [ClusterSystem-akka.remote.default-remote-dispatcher-<span class="number">8</span>] [akka.serialization.Serialization(akka://ClusterSystem)] Using the default Java serializer <span class="keyword">for</span> class [java.lang.Integer] <span class="built_in">which</span> is not recommended because of performance implications. Use another serializer or <span class="built_in">disable</span> this warning using the setting <span class="string">'akka.actor.warn-about-java-serializer-usage'</span></span><br><span class="line">[WARN] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">14.622</span>] [ClusterSystem-akka.remote.default-remote-dispatcher-<span class="number">5</span>] [akka.serialization.Serialization(akka://ClusterSystem)] Using the default Java serializer <span class="keyword">for</span> class [cn.sunxiang0918.akka.demo7.FactorialResult] <span class="built_in">which</span> is not recommended because of performance implications. Use another serializer or <span class="built_in">disable</span> this warning using the setting <span class="string">'akka.actor.warn-about-java-serializer-usage'</span></span><br><span class="line">[WARN] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">14.622</span>] [ClusterSystem-akka.remote.default-remote-dispatcher-<span class="number">6</span>] [akka.serialization.Serialization(akka://ClusterSystem)] Using the default Java serializer <span class="keyword">for</span> class [cn.sunxiang0918.akka.demo7.FactorialResult] <span class="built_in">which</span> is not recommended because of performance implications. Use another serializer or <span class="built_in">disable</span> this warning using the setting <span class="string">'akka.actor.warn-about-java-serializer-usage'</span></span><br><span class="line">[WARN] [<span class="number">02</span>/<span class="number">11</span>/<span class="number">2016</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">14.622</span>] [ClusterSystem-akka.remote.default-remote-dispatcher-<span class="number">5</span>] [akka.serialization.Serialization(akka://ClusterSystem)] Using the default Java serializer <span class="keyword">for</span> class [cn.sunxiang0918.akka.demo7.FactorialResult] <span class="built_in">which</span> is not recommended because of performance implications. Use another serializer or <span class="built_in">disable</span> this warning using the setting <span class="string">'akka.actor.warn-about-java-serializer-usage'</span></span><br><span class="line">计算的结果:FactorialResult&#123;n=<span class="number">10</span>, factorial=<span class="number">3628800</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Akka_in_JAVA(三)">Akka in JAVA(三)</h1><p>上两个部分讲了<code>Akka</code>的基本知识和常见的用法.接下来讲一讲<code>Akka</code>的远程调用以及集群的使用.因为在现在的项目中,基本上都是分布式的,单个的应用程序都快成为”熊猫”了.因此<code>Akka</code>的远程以及集群调用就是非常有必要的了.</p>
<h2 id="Remote调用">Remote调用</h2><p><code>Akka-Remoting</code>是采用了P2P(peer-to-peer)的通信方式设计的,也就是端对端的方式.特别是Akka-Remoting不能与网络地址转换和负载均衡一起的工作.<br>但是,由于<code>Akka</code>在设计的时候就考虑了远程调用以及分布式的情况.因此,<code>Akka-Remoting</code>在使用上就非常的简单,几乎等于是透明的,和本地调用几乎相同.除了传递的消息需要可序列化以及创建和查找Actor的时候路径稍有不同外,没有其他的区别了.</p>
<h3 id="远程调用的准备">远程调用的准备</h3><p>要在项目中使用<code>Akka-Remoting</code>非常的简单,只需要引入Maven中的<code>akka-remote</code>就可以了.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>akka-remote_2.11<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Akka" scheme="http://sunxiang0918.github.io/tags/Akka/"/>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Akka in JAVA(二)]]></title>
    <link href="http://sunxiang0918.github.io/2016/01/13/Akka-in-JAVA-2/"/>
    <id>http://sunxiang0918.github.io/2016/01/13/Akka-in-JAVA-2/</id>
    <published>2016-01-13T14:43:04.000Z</published>
    <updated>2016-02-13T14:54:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Akka_in_JAVA(二)">Akka in JAVA(二)</h1><p>继续<a href="/2016/01/10/Akka-in-JAVA-1/">Akka in JAVA(一)</a>中所讲.</p>
<h2 id="Actor调用">Actor调用</h2><p>从上面的例子中,我们可以大概的对AKKA在JAVA中的使用有一个全局的概念.这里我们在稍微细致的讲解一下.</p>
<p>在JAVA中使用AKKA进行开发主要有这几个步骤:</p>
<ol>
<li>定义消息模型.</li>
<li>创建Actor的实现,以及业务逻辑</li>
<li>在需要使用AKKA的地方获取到ActorSystem,然后根据业务的数据流,获取到合适的Actor,给Actor发送消息.</li>
<li>在Actor的实现用,对接收到的消息进行具体的处理或转发.从而形成业务逻辑流.</li>
</ol>
<p>下面我们分别讲解一下这几个步骤.</p>
<a id="more"></a>
<h3 id="定义消息模型">定义消息模型</h3><p>在AKKA中的消息模型可以是任意实现了<code>Serializable</code>接口的对象.和大多数的远程调用框架一样,为了AKKA的高可用,以后可能会牵涉到远程调用和集群,那么消息模型就需要跨网络的进行传输,这就要求对消息模型进行序列化和反序列化.因此,要求消息模型必须实现<code>Serializable</code>接口.具体的序列化和反序列化在后面讲解远程调用的时候再细谈.</p>
<h3 id="创建Actor的实现-">创建Actor的实现.</h3><p>有了消息模型后,就需要有Actor对这些消息进行消费了.<br>在AKKA中Actor分为了<code>TypedActor</code>和<code>UnTypedActor</code>.</p>
<p>其中<code>TypedActor</code>是<code>Akka</code>基于<code>Active对象</code>(Active Object)设计模式的一个实现,该设计模式解耦了在一个对象上执行方法和调用方法的逻辑,执行方法和调用方法分别在各自的线程上独立运行.该模式的目标是通过使用异步的方法调用和内部的调度器来处理请求,从而实现方法的执行时异步处理的.通俗点来讲,<code>TypedActor</code>就是可以预先的定义一系列的接口和实现,然后通过<code>ActorSystem</code>来创建这个<code>TypedActor</code>的实例,当调用这个实例的方法的时候,其实是会异步的执行方法的,而不是同步的.至于如何异步的,这就交由AKKA内部来实现了,开发人员不需要关心.这其实就比较像<code>goLang</code>语言中的<code>fmt</code>的一些方法或<code>go</code>关键字,很简单的方法调用背后隐藏了异步的执行操作.</p>
<p>而<code>UnTypedActor</code>更像是JAVA中的JMS调用.方法的调用和执行完全依赖了消息,通过消息的类型或内容来区别不同的执行.对于消息的发送方式都是相同的,那就是直接给这个Actor的邮箱中发送Message.也就是说<code>UnTypedActor</code>更接近于我们前两个小节中所说的<code>Actor</code>这个概念.</p>
<p>事实也是如此,在AKKA中我们更多的是倾向于使用<code>UnTypedActor</code>向<code>Actor</code>系统间传递消息,而<code>TypedActor</code>更多的是用来桥接<code>Actor</code>系统和<code>非Actor</code>的.</p>
<h4 id="创建UnTypedActor">创建<code>UnTypedActor</code></h4><p>在<code>AKKA for JAVA</code>中,创建一个<code>UnTypedActor</code>非常的简单.直接继承<code>UnTypedActor</code>类,并实现<code>public void onReceive(Object message) throws Exception</code>方法即可.在<code>onReceive</code>方法中就是需要实现的业务逻辑.比如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetPrinter</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Greeting)</span><br><span class="line">            System.out.println(((Greeting) message).message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建TypedActor">创建<code>TypedActor</code></h4><p>由于AKKA是由<code>scala</code>写的,因此它其实最切合的就是使用<code>scala</code>进行开发,而JAVA作为一个强类型的静态语言,很多<code>scala</code>的特性其实是不好模仿出来的.因此,在JAVA中使用<code>TypedActor</code>其实是比较麻烦的.</p>
<ol>
<li><p>首先需要定义<code>Actor</code>的接口.对于异步的方法,需要返回<code>scala.concurrent.Future</code>对象.阻塞的异步调用,需要返回<code>akka.japi.Option</code>.同步调用直接返回结果对象.比如:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Squarer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   	<span class="function">Future&lt;Integer&gt; <span class="title">square</span><span class="params">(<span class="keyword">int</span> i)</span></span>; <span class="comment">//non-blocking send-request-reply</span></span><br><span class="line"></span><br><span class="line">   	<span class="function">Option&lt;Integer&gt; <span class="title">squareNowPlease</span><span class="params">(<span class="keyword">int</span> i)</span></span>;<span class="comment">//blocking send-request-reply</span></span><br><span class="line"></span><br><span class="line">   	<span class="function"><span class="keyword">int</span> <span class="title">squareNow</span><span class="params">(<span class="keyword">int</span> i)</span></span>; <span class="comment">//blocking send-request-reply</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写<code>TypedActor</code>的实现:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquarerImpl</span> <span class="keyword">implements</span> <span class="title">Squarer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SquarerImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"default"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SquarerImpl</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;Integer&gt; <span class="title">square</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Futures.successful(squareNow(i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Option&lt;Integer&gt; <span class="title">squareNowPlease</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Option.some(squareNow(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">squareNow</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"执行里面"</span>);</span><br><span class="line">        <span class="keyword">return</span> i * i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在调用AKKA的地方实例化<code>TypedActor</code>的实例:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"helloakka"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*默认构造方法的Actor*/</span></span><br><span class="line">       Squarer mySquarer = TypedActor.get(system).typedActorOf(<span class="keyword">new</span> TypedProps&lt;&gt;(Squarer.class, SquarerImpl.class));</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*传参构造的Actor*/</span></span><br><span class="line">       Squarer otherSquarer =</span><br><span class="line">               TypedActor.get(system).typedActorOf(<span class="keyword">new</span> TypedProps&lt;&gt;(Squarer.class,</span><br><span class="line">                               <span class="keyword">new</span> Creator&lt;SquarerImpl&gt;() &#123;</span><br><span class="line">                                   <span class="function"><span class="keyword">public</span> SquarerImpl <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                       <span class="keyword">return</span> <span class="keyword">new</span> SquarerImpl(<span class="string">"foo"</span>);</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;),</span><br><span class="line">                       <span class="string">"name"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>TypedActor</code>中的方法:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Option&lt;Integer&gt; oSquare = mySquarer.squareNowPlease(<span class="number">10</span>); <span class="comment">//Option[Int]</span></span><br><span class="line">      System.out.println(<span class="string">"阻塞异步调用执行外面"</span>);</span><br><span class="line">      <span class="comment">//获取结果</span></span><br><span class="line">      System.out.println(oSquare.get());</span><br><span class="line">      </span><br><span class="line">      Future&lt;Integer&gt; fSquare = mySquarer.square(<span class="number">10</span>); <span class="comment">//A Future[Int]</span></span><br><span class="line">      System.out.println(<span class="string">"非阻塞异步执行外面"</span>);</span><br><span class="line">      <span class="comment">//等待5秒内返回结果</span></span><br><span class="line">      System.out.println(Await.result(fSquare, Duration.apply(<span class="number">5</span>, TimeUnit.SECONDS)));</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行后会在控制台打印:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行里面</span><br><span class="line">阻塞异步调用执行外面</span><br><span class="line"><span class="number">100</span></span><br><span class="line">非阻塞异步执行外面</span><br><span class="line">执行里面</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>从这个结果很容易的看出成功的异步调用了Actor.</p>
<h4 id="小结">小结</h4><p>从上面的例子可以看出<code>TypedActor</code>其实在JAVA中是比较麻烦的,因此我们会更多的使用<code>UnTypedActor</code>.后面的例子中<code>Actor</code>指的都是<code>UnTypedActor</code></p>
<h3 id="获取Actor">获取Actor</h3><p>在创建了Actor后,接下来就是需要实例化或获取Actor了.其主要是通过<code>ActorSystem</code>中的<code>actorOf</code>和<code>actorSelection</code>以及<code>actorFor</code>三个方法.</p>
<ul>
<li><strong>actorOf</strong>：创建一个新的Actor。创建的Actor为调用该方法时所属的Context下的直接子Actor；</li>
<li><strong>actorSelection</strong>：当消息传递来时，只查找现有的Actor，而不会创建新的Actor；在创建了selection时，也不会验证目标Actors是否存在；</li>
<li><strong>actorFor</strong>(<em>已经被actorSelection所deprecated</em>):只会查找现有的Actor，而不会创建新的Actor。</li>
</ul>
<h2 id="Actor生命周期">Actor生命周期</h2><p>AKKA为Actor生命周期的每个阶段都提供了一个钩子(hook),我们可以在必要的时候重载这些方法来完成一些事情。如下图所示:</p>
<p><img src="/img/2016/01/13/2.png" alt=""><br>因此,基本上,一个Actor的生命周期依此为:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actorOf -&gt; preStart -&gt; start -&gt; receive -&gt; stop -&gt; postStop</span><br></pre></td></tr></table></figure>
<p>为了更好的理解Actor的生命周期,官方还出了一个图来进行描述:<br><img src="/img/2016/01/13/1.png" alt=""></p>
<p>从上图我们可以看到,一个Actor初始的时候路径是空的,通过调用<code>actorOf</code>方法实例化一个Actor的实例,会返回一个<code>ActorRef</code>来表示<code>Actor</code>的引用.它包含了一个<code>UID</code>和一个<code>Path</code>,这两个值共同的标识了一个Actor的唯一.重启操作<code>Path</code>和<code>UID</code>不会改变,因此重启前获取到的<code>ActorRef</code>继续有效.</p>
<p>但是<code>ActorRef</code>的生命周期在actor停止的时候结束.此时适当的生命周期Hook会被调用, 处于监控状态的actor会收到通知.在该Actor结束后, 此路径可以通过<code>actorOf</code>方法重用.此时新的<code>ActorRef</code>的路径和之前一样但是UID不同.所以在停止前获取到的<code>ActorRef</code>不再有效.</p>
<p>与<code>ActorRef</code>不同,<code>ActorSelection</code>只关心<code>Path</code>而不关心具体是哪一个<code>Actor</code>.也就是说对一个明确路径的<code>ActorSelection</code>来说,无论对应的<code>Actor</code>是重启还是重新创建,只要是路径一样的,那么都是有效的.如果要通过<code>ActorSelection</code>来获取一个具体的<code>Actor</code>,需要调用<code>ActorSelection</code>的<code>resolveOne</code>的方法来获取.</p>
<h2 id="Dispatcher">Dispatcher</h2><p>在AKKA中,actor之间都是通过消息的传递来完成彼此的交互的.而当Actor的数量比较多后,彼此之间的通信就需要协调,从而能更好的平衡整个系统的执行性能.</p>
<p>在AKKA中,负责协调Actor之间通信的就是<code>Dispatcher</code>.它在自己独立的线程上不断的进行协调,把来自各个Actor的消息分配到执行线程上.</p>
<p>在AKKA中提供了四种不同的<code>Dispatcher</code>,我们可以根据不同的情况选择不同的<code>Dispatcher</code>.</p>
<ul>
<li><strong>Dispatcher</strong>:这个是AKKA默认的<code>Dispatcher</code>.对于这种Dispatcher,每一个Actor都由自己的MailBox支持,它可以被多个Actor所共享.而Dispatcher则由ThreadPool和ForkJoinPool支持.比较适合于非阻塞的情况.</li>
<li><strong>PinnedDispatcher</strong>:这种Dispatcher为每一个Actor都单独提供了专有的线程,这意味着该Dispatcher不能再Actor之间共享.因此,这种Dispatcher比较适合处理对外部资源的操作或者是耗时比较长的Actor.PinnedDispatcher在内部使用了ThreaddPool和Executor,并针对阻塞操作进行了优化.所以这个Dispatcher比较适合阻塞的情况.但是在使用这个Dispatcher的时候需要考虑到线程资源的问题,不能启动的太多.</li>
<li><strong>BalancingDispatcher</strong>(已被废弃):它是基于事件的Dispatcher,它可以针对相同类型的Actor的任务进行协调,若某个Actor上的任务较为繁忙,就可以将它的工作分发给闲置的Actor,前提是这些Actor都属于相同的类型.对于这种Dispatcher,所有Actor只有唯一的一个MailBox,被所有相同类型的Actor所共享.</li>
<li><strong>CallingThreadDispatcher</strong>:这种Dispatcher主要用于测试,它会将任务执行在当前的线程上,不会启动新的线程,也不提供执行顺序的保证.如果调用没有及时的执行,那么任务就会放入ThreadLocal的队列中,等待前面的调用任务结束后再执行.对于这个Dispatcher,每一个Actor都有自己的MailBox,它可以被多个Actor共享.</li>
</ul>
<p>如果要配置<code>Dispatcher</code>,可以在项目的<code>resource</code>目录中创建一个<code>conf</code>文件(默认名字为<code>application.conf</code>).然后修改其中的配置:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">demo5 &#123;</span><br><span class="line">  writer-dispatcher &#123;</span><br><span class="line">    type = Dispatcher   //Dispatcher类型,Dispatcher  PinnedDispatcher</span><br><span class="line">    executor = "fork-join-executor"   //底层实现方式  fork-join-executor  thread-pool-executor</span><br><span class="line">    //执行器方式的参数</span><br><span class="line">    fork-join-executor &#123;</span><br><span class="line">      parallelism-min = 2</span><br><span class="line">      parallelism-factor = 2.0</span><br><span class="line">      parallelism-max = 10</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    thread-pool-executor &#123;</span><br><span class="line">      core-pool-size-min = 2</span><br><span class="line">      core-pool-size-factor = 2.0</span><br><span class="line">      core-pool-size-max = 10</span><br><span class="line">    &#125;</span><br><span class="line">    throughput = 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>writer-dispatcher</code>是dispatcher的名字,同一个配置文件中可以配置多个.<code>type</code>为四种类型中的某一个.<code>executor</code>是底层实现方式,通常有两种<code>fork-join-executor</code>和<code>thread-pool-executor</code>.这两种的参数为:</p>
<ul>
<li><strong>core-pool-size-min/parallelism-min</strong> : 最小线程数</li>
<li><strong>core-pool-size-max/parallelism-max</strong> : 最大线程数</li>
<li><strong>core-pool-size-factor/parallelism-factor</strong>: 线程层级因子,通常和CPU核数相关.</li>
</ul>
<p>要在AKKA中使用配置文件,需要在创建ActorSystem的时候进行指定:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"demo5"</span>, ConfigFactory.load(<span class="string">"demo5"</span>).getConfig(<span class="string">"demo5"</span>));</span><br></pre></td></tr></table></figure>
<p><code>ConfigFactory.load(&quot;demo5&quot;)</code>读取的就是<code>Resource</code>文件夹中的<code>demo5.conf</code>这个配置文件.<code>getConfig(&quot;demo5&quot;)</code>读取的是这个配置文件中的<code>demo5</code>这部分的配置.</p>
<p>而要使用配置的<code>Dispatcher</code>需要在创建Actor实例的时候,使用<code>withDispatcher(String)</code>方法来指定:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Props props = Props.create(WriterActor.class).withDispatcher(<span class="string">"writer-dispatcher"</span>);</span><br><span class="line">getContext().actorOf(props,<span class="string">"writer_"</span>+i)</span><br></pre></td></tr></table></figure>
<p>这里有一个简单的例子,就是发送消息给一堆的Actor,每一个Actor接收到消息后打印出线程的名字:</p>
<p><strong>StartCommand.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartCommand</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> actorCount =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StartCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StartCommand</span><span class="params">(<span class="keyword">int</span> actorCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actorCount = actorCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActorCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actorCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActorCount</span><span class="params">(<span class="keyword">int</span> actorCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actorCount = actorCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>WriterActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ControlActor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlActor</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> StartCommand) &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;ActorRef&gt; actors = createActors(((StartCommand) message).getActorCount());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*这里使用了JDK1.8中的StreamAPI*/</span></span><br><span class="line">            actors.stream().parallel().forEach(actorRef -&gt; actorRef.tell(<span class="string">"Insert"</span>, ActorRef.noSender()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ActorRef&gt; <span class="title">createActors</span><span class="params">(<span class="keyword">int</span> actorCount)</span> </span>&#123;</span><br><span class="line">        Props props = Props.create(WriterActor.class).withDispatcher(<span class="string">"writer-dispatcher"</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;ActorRef&gt; actors = <span class="keyword">new</span> ArrayList&lt;&gt;(actorCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; actorCount; i++) &#123;</span><br><span class="line">            actors.add(getContext().actorOf(props,<span class="string">"writer_"</span>+ i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> actors;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>AkkaMain5.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AkkaMain5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"demo5"</span>, ConfigFactory.load(<span class="string">"demo5"</span>)</span><br><span class="line">                .getConfig(<span class="string">"demo5"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个到greeter Actor的管道</span></span><br><span class="line">        <span class="keyword">final</span> ActorRef controlActor = system.actorOf(Props.create(ControlActor.class), <span class="string">"control"</span>);</span><br><span class="line"></span><br><span class="line">        controlActor.tell(<span class="keyword">new</span> StartCommand(<span class="number">100</span>),ActorRef.noSender());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//system.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行这个程序,执行的结果为:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">demo5-writer-dispatcher-<span class="number">11</span></span><br><span class="line">demo5-writer-dispatcher-<span class="number">14</span></span><br><span class="line">demo5-writer-dispatcher-<span class="number">8</span></span><br><span class="line">demo5-writer-dispatcher-<span class="number">7</span></span><br><span class="line">demo5-writer-dispatcher-<span class="number">13</span></span><br><span class="line">demo5-writer-dispatcher-<span class="number">7</span></span><br><span class="line">demo5-writer-dispatcher-<span class="number">8</span></span><br><span class="line">demo5-writer-dispatcher-<span class="number">14</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以看出线程被重复的利用了.仔细数的话,一共只有10个线程.</p>
<p>而如果把Dispatcher的类型改成<code>PinnedDispatcher</code>的话,系统就会创建100个线程出来.符合开始说的区别.</p>
<h2 id="Router">Router</h2><p>在真实的情况中,通常针对某一种消息,会启动很多个相同的Actor来进行处理.当然,你可以在程序中循环的启动很多个相同的Actor来实现,就如上一小结中启动100个Actor那样,但是这就牵涉到Actor任务的平衡,Actor个数的维护等等,比较的麻烦.因此,在AKKA中存在一种特殊的Actor,即<code>Router</code>.Akka通过<code>Router</code>机制,来有效的分配消息给actor来完成工作.而在AKKA中,被<code>Router</code>管理的actor被称作<code>Routee</code>.</p>
<p>根据项目的需求,可以使用不同的路由策略来分发一个消息到actor中.Akka附带了几个常用的路由策略,配置起就可以使用.当然,也可以自定义一个路由器.</p>
<h3 id="使用Router">使用Router</h3><p>要使用Router非常的简单,可以在Actor内通过实例化<code>Router</code>对象的方式来使用,也可以在Actor外通过<code>withRouter</code>的方式直接创建一个<code>RouterActor</code>来使用.</p>
<h4 id="Actor内使用">Actor内使用</h4><p>这种方式是通过AKKA提供的API,手动的创建<code>Router</code>对象,然后调用<code>addRoutee</code>方法手动的添加<code>Actor</code>(需要注意,每一次调用addRoutee都会返回一个新的Router对象),然后通过<code>route</code>来发送消息.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ActorRef&gt; actors = createActors(((StartCommand) message).getActorCount());</span><br><span class="line"></span><br><span class="line">  Router router = <span class="keyword">new</span> Router(<span class="keyword">new</span> RoundRobinRoutingLogic());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (ActorRef actor : actors) &#123;</span><br><span class="line">      router = router.addRoutee(actor);</span><br><span class="line">      <span class="comment">//需要注意,需要接收addRoutee的返回</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  router.route(<span class="string">"Insert"</span>,ActorRef.noSender());</span><br></pre></td></tr></table></figure>
<p>这段代码首先创建了100个相同类型的Actor,然后实例化了一个<code>Router</code>,路由策略是轮询.然后把这100个Actor显式的加入到Router中. 最后,发送消息的时候通过<code>router.route</code>的方式进行发送.AKKA会把这个消息按照路由策略分发给某一个Actor中执行.</p>
<h4 id="Actor外使用">Actor外使用</h4><p>这种方式是通过创建一个<code>RouteActor</code>来使用路由.<code>RouteActor</code>和一般的<code>Actor</code>没有什么不同,区别在于它没有什么业务逻辑,在创建它的时候,它会创建N个具备业务逻辑的子Actor.当它接收到消息后,会把消息转发给它的某个子Actor.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*使用Router方式启动100个Actor*/</span></span><br><span class="line">       Props props = Props.create(WriterActor.class).withRouter(<span class="keyword">new</span> RoundRobinPool(((StartCommand) message).getActorCount())).withDispatcher(<span class="string">"writer-dispatcher"</span>);</span><br><span class="line">       ActorRef actorRef = getContext().actorOf(props);</span><br><span class="line">       actorRef.tell(<span class="string">"Insert"</span>,ActorRef.noSender());</span><br></pre></td></tr></table></figure>
<p>这段代码确定了子Actor的类型,然后定义了路由策略.而后创建了<code>RouteActor</code>.最后发送消息的时候通过给路由Actor发送消息的方式进行处理.</p>
<h4 id="配置使用">配置使用</h4><p>这种方式是通过在AKKA的配置中来定义<code>Router</code>,创建的时候直接读取配置来获取<code>Router</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">akka.actor.deployment &#123;</span><br><span class="line">  /router &#123;</span><br><span class="line">    router = round-robin</span><br><span class="line">    nr-of-instances = <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个就是在配置中指定了一个router,策略是轮询,子Actor数是5个.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActorRef router = system.actorOf(<span class="keyword">new</span> Props(ExampleActor.class).withRouter(<span class="keyword">new</span> FromConfig()), <span class="string">"router"</span>);</span><br></pre></td></tr></table></figure>
<p>然后通过<code>FromConfig()</code>配置加载<code>Router</code>.加载的时候需要指定<code>router</code>的名字.这个名字需要和配置中的<code>Router</code>的路径相对应.</p>
<h3 id="内置Router">内置Router</h3><p>AKKA中一共内置了8种路由策略,他们分别是:</p>
<ul>
<li><p><strong>RoundRobinPool</strong>:    这个是最常用的,轮询方式分发消息</p>
  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">akka.actor.deployment &#123;</span><br><span class="line">  	/parent/router1 &#123;</span><br><span class="line">    	router = <span class="command">round</span>-robin-pool</span><br><span class="line">    	nr-<span class="keyword">of</span>-instances = <span class="number">5</span></span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RandomPool</strong>:    这个是随机方式分发消息</p>
  <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">akka.actor.deployment </span><span class="expression">&#123;</span><br><span class="line"> 		<span class="end-block">/parent</span><span class="end-block">/router</span>5 &#123;</span><br><span class="line">   		<span class="variable">router</span> = <span class="variable">random-pool</span></span><br><span class="line">   		<span class="variable">nr-of-instances</span> = 5</span><br><span class="line"> 		&#125;</span><span class="xml"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>BalancingPool</strong>: 均衡分发消息,所有的子Routee共享一个邮箱,它会尝试重新从繁忙routee分配任务到空闲routee</p>
  <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">akka.actor.deployment </span><span class="expression">&#123;</span><br><span class="line"> 		<span class="end-block">/parent</span><span class="end-block">/router</span>9 &#123;</span><br><span class="line">   		<span class="variable">router</span> = <span class="variable">balancing-pool</span></span><br><span class="line">   		<span class="variable">nr-of-instances</span> = 5</span><br><span class="line"> 		&#125;</span><span class="xml"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>SmallestMailboxPool</strong>:    最少消息邮箱分发,这个按照</p>
<ul>
<li>选择有空邮箱的空闲Routee处理</li>
<li>选择任意空邮箱的Routee</li>
<li>选择邮箱中有最少挂起消息的routee</li>
<li><p>选择任一远程routee,远程actor优先级最低,因为其邮箱大小未知</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">akka.actor.deployment </span><span class="expression">&#123;</span><br><span class="line"> 		<span class="end-block">/parent</span><span class="end-block">/router</span>11 &#123;</span><br><span class="line">   		<span class="variable">router</span> = <span class="variable">smallest-mailbox-pool</span></span><br><span class="line">   		<span class="variable">nr-of-instances</span> = 5</span><br><span class="line"> 		&#125;</span><span class="xml"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>BroadcastPool</strong>:这个Router比较特殊,是广播消息,也就是一个消息会被他所有的子Actor接收到,而不仅仅是其中的某一个.</p>
  <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">akka.actor.deployment </span><span class="expression">&#123;</span><br><span class="line"> 		<span class="end-block">/parent</span><span class="end-block">/router</span>13 &#123;</span><br><span class="line">   		<span class="variable">router</span> = <span class="variable">broadcast-pool</span></span><br><span class="line">   		<span class="variable">nr-of-instances</span> = 5</span><br><span class="line"> 		&#125;</span><span class="xml"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ScatterGatherFirstCompletedPool</strong>:这个Router也比较特殊,它会把消息发送到它所有的子Routee中,然后它会等待直到接收到第一个答复,该结果将发送回原始发送者.而其他的答复将会被丢弃.</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">akka.actor.deployment &#123;</span><br><span class="line"> 		/parent/router17 &#123;</span><br><span class="line">   		router = scatter-gather-pool</span><br><span class="line">   		nr-<span class="operator">of</span>-instances = <span class="number">5</span></span><br><span class="line">   		<span class="operator">within</span> = <span class="number">10</span> <span class="built_in">seconds</span></span><br><span class="line"> 		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>TailChoppingPool</strong>:这个Router将首先发送消息到一个随机挑取的routee,短暂的延迟后发给第二个routee(从剩余的routee中随机挑选),以此类推.它等待第一个答复,并将它转回给原始发送者.其他答复将被丢弃.这样设计的目的在于使用冗余来加快分布式情况下的查询等业务.</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">akka.actor.deployment &#123;</span><br><span class="line"> 		/parent/router21 &#123;</span><br><span class="line">   		router = tail-chopping-pool</span><br><span class="line">   		nr-<span class="operator">of</span>-instances = <span class="number">5</span></span><br><span class="line">   		<span class="operator">within</span> = <span class="number">10</span> <span class="built_in">seconds</span></span><br><span class="line">   		tail-chopping-router.interval = <span class="number">20</span> <span class="built_in">milliseconds</span></span><br><span class="line"> 		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ConsistentHashingPool</strong>:使用一致性hash的方式来分发消息.它会把传送的消息映射到它的消息环上,然后进行Actor的选择.</p>
  <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">akka.actor.deployment &#123;</span><br><span class="line"> 		/parent/router25 &#123;</span><br><span class="line">   		<span class="variable">router =</span> consistent-hashing-pool</span><br><span class="line">   		<span class="variable">nr-of-instances =</span> <span class="number">5</span></span><br><span class="line">   		<span class="variable">virtual-nodes-factor =</span> <span class="number">10</span></span><br><span class="line"> 		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="动态改变Routee数量">动态改变Routee数量</h3><p>上述的大多数Route除了在配置或实例化的时候指定固定数量的Routee外,还能配置一个resize的策略,指定最大最小的Routee的数量:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">akka.actor.deployment &#123;</span><br><span class="line">  /router2 &#123;</span><br><span class="line">    router = <span class="built_in">round</span>-robin</span><br><span class="line">    resizer &#123;</span><br><span class="line">      <span class="built_in">lower</span>-bound = <span class="number">2</span></span><br><span class="line">      <span class="built_in">upper</span>-bound = <span class="number">15</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lowerBound = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> upperBound = <span class="number">15</span>;</span><br><span class="line">DefaultResizer resizer = <span class="keyword">new</span> DefaultResizer(lowerBound, upperBound);</span><br><span class="line">ActorRef router3 = system.actorOf(<span class="keyword">new</span> Props(ExampleActor.class).withRouter(<span class="keyword">new</span> RoundRobinRouter(nrOfInstances)));</span><br></pre></td></tr></table></figure>
<h2 id="Scheduler">Scheduler</h2><p>在实际使用AKKA中,可能会需要定时或重复的发送消息给某些Actor.要处理这类的问题,除了直接使用JAVA的API或<code>Quartz</code>显式的重复调用<code>ActorRef.tell</code>外,AKKA还提供了一个简单的Scheduler.</p>
<p>AKKA的<code>Scheduler</code>比较简单,是由<code>ActorSystem</code>提供的,可以简单的对Actor发送重复或定时任务.<br>比如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActorRef actorRef = system.actorOf(Props.create(WriterActor.class));</span><br><span class="line"></span><br><span class="line">     system.scheduler().scheduleOnce(Duration.create(<span class="number">5</span>, TimeUnit.SECONDS),actorRef,<span class="string">"1111"</span>,system.dispatcher(),ActorRef.noSender());</span><br></pre></td></tr></table></figure>
<p>这个例子中,实例化了一个Actor.然后调用<code>system.scheduler()</code>获取到<code>Scheduler</code>,然后调用<code>scheduleOnce(延迟时间,目标Actor,消息,调度器,发送者)</code>方法延迟5秒再发送消息给某个Actor.</p>
<p>此外,除了延迟发送消息,Akka的<code>Scheduler</code>还提供了定时重复发送消息,比如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActorRef actorRef = system.actorOf(Props.create(WriterActor.class));</span><br><span class="line"></span><br><span class="line">system.scheduler().schedule(Duration.Zero(),Duration.create(<span class="number">1</span>, TimeUnit.SECONDS),actorRef,<span class="string">"1111"</span>,system.dispatcher(),ActorRef.noSender());</span><br></pre></td></tr></table></figure>
<p>这个例子中,调用了<code>Scheduler</code>的<code>schedule(第一次调用时间,间隔时间,目标Actor,消息,调度器,发送者)</code>方法每一秒发送一个消息给Actor.</p>
<p>需要注意的是<code>Scheduler</code>的这两个方法都会返回一个<code>Cancellable</code>对象.通过这个对象,我们可以显式的调用<code>cancellable.cancel();</code>来取消重复任务.</p>
<p>其实,除了能重复的给Actor发送消息外,AKKA的<code>scheduler</code>由于可以接收<code>Runnable</code>接口,所以基本上可以做任何的事情.例如,在Spark中,AppClient中的ClientActor需要与Master这个Remote Actor通信,从而注册所有的Spark Master.由于注册过程中牵涉到远程通信,可能会因为网络原因导致通信错误,因此需要引入重试的机会.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Akka_in_JAVA(二)">Akka in JAVA(二)</h1><p>继续<a href="/2016/01/10/Akka-in-JAVA-1/">Akka in JAVA(一)</a>中所讲.</p>
<h2 id="Actor调用">Actor调用</h2><p>从上面的例子中,我们可以大概的对AKKA在JAVA中的使用有一个全局的概念.这里我们在稍微细致的讲解一下.</p>
<p>在JAVA中使用AKKA进行开发主要有这几个步骤:</p>
<ol>
<li>定义消息模型.</li>
<li>创建Actor的实现,以及业务逻辑</li>
<li>在需要使用AKKA的地方获取到ActorSystem,然后根据业务的数据流,获取到合适的Actor,给Actor发送消息.</li>
<li>在Actor的实现用,对接收到的消息进行具体的处理或转发.从而形成业务逻辑流.</li>
</ol>
<p>下面我们分别讲解一下这几个步骤.</p>]]>
    
    </summary>
    
      <category term="Akka" scheme="http://sunxiang0918.github.io/tags/Akka/"/>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Akka in JAVA(一)]]></title>
    <link href="http://sunxiang0918.github.io/2016/01/10/Akka-in-JAVA-1/"/>
    <id>http://sunxiang0918.github.io/2016/01/10/Akka-in-JAVA-1/</id>
    <published>2016-01-10T08:46:28.000Z</published>
    <updated>2016-02-13T14:53:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Akka_in_JAVA(一)">Akka in JAVA(一)</h1><h2 id="AKKA简介">AKKA简介</h2><h3 id="什么是AKKA">什么是AKKA</h3><p>Akka是一个由<code>Scala</code>编写的,能兼容<code>Sacala</code>和<code>JAVA</code>的,用于编写高可用和高伸缩性的<code>Actor模型</code>框架.它基于了事件驱动的并发处理模式,性能非常的高,并且有很高的可用性.大大的简化了我们在应用系统中开发并发处理的过程.它在各个领域都有很好的表现.</p>
<h3 id="使用AKKA的好处">使用AKKA的好处</h3><p>就如上面简介中所说的,AKKA把并发操作的各种复杂的东西都统一的做了封装.我们主要关心的是业务逻辑的实现,只需要少量的关心<code>Actor模型</code>的串联即可构建出高可用,高性能,高扩展的应用.</p>
<h3 id="Akka_for_JAVA">Akka for JAVA</h3><p>由于AKKA是使用<code>Scala</code>编写的,而<code>Scala</code>是一种基于JVM的语言.因此<code>JAVA</code>对AKKA的支持也是很不错的.Akka自身又是采用微内核的方式来实现的,这就意味着能很容易的在自己的项目中应用AKKA,只需要引入几个akka的Lib包即可.而官方直接就提供了<code>Maven</code>库供我们在JAVA中使用AKKA.<br>这些AKKA的依赖包主要有:</p>
<ul>
<li><strong>akka-actor</strong>:最核心的依赖包,里面实现了Actor模型的大部分东西</li>
<li><strong>akka-agent</strong>:代理/整合了Scala中的一些STM特性</li>
<li><strong>akka-camel</strong>:整合了Apache的Camel</li>
<li><strong>akka-cluster</strong>:akka集群依赖,封装了集群成员的管理和路由</li>
<li><strong>akka-kernel</strong>:akka的一个极简化的应用服务器,可以脱离项目单独运行.</li>
<li><strong>akka-osgi</strong>:对OSGI容器的支持,有akka的最基本的Bundle</li>
<li><strong>akka-remote</strong>:akka远程调用</li>
<li><strong>akka-slf4j</strong>:Akka的日志事件监听</li>
<li><strong>akka-testkit</strong>:Akka的各种测试工具</li>
<li><strong>akka-zeromq</strong>:整合ZeroMQ<br>其中最总要的就是<code>akka-actor</code>,最简单的AKKA使用的话,只需要引入这个包就可以了.</li>
</ul>
<a id="more"></a>
<h2 id="Actor模型">Actor模型</h2><h3 id="什么是Actor">什么是Actor</h3><p>既然说AKKA是一个<code>Actor模型</code>框架,那么就需要搞清楚什么是<code>Actor模型</code>.<code>Actor模型</code>是由<code>Carl Hewitt</code>于上世纪70年代提出的,目的是为了解决分布式编程中的一系列问题而产生.<br>在<code>Actor模型</code>中,<strong>一切都可以抽象为Actor</strong>.<br>而Actor是封装了状态和行为的对象,他们的唯一通讯方式就是交换消息,交换的消息放在接收方的邮箱(Inbox)里.也就是说Actor之间并不直接通信,而是通过了消息来相互沟通,每一个Actor都把它要做的事情都封装在了它的内部.<br>每一个Actor是可以有状态也可以是无状态的,理论上来讲,每一个Actor都拥有属于自己的轻量级线程,保护它不会被系统中的其他部分影响.因此,我们在编写Actor时,就不用担心并发的问题.<br>通过Actor能够简化锁以及线程管理,Actor具有以下的特性:</p>
<ul>
<li>提供了一种高级的抽象,能够封装状态和操作.简化并发应用的开发.</li>
<li>提供了异步的非阻塞的/高性能的事件驱动模型</li>
<li>超级轻量级的线程事件处理能力.</li>
</ul>
<p>要在JAVA中实现一个<code>Actor</code>也非常的简单,直接继承<code>akka.actor.UntypedActor</code>类,然后实现<code>public void onReceive(Object message) throws Exception</code>方法即可.</p>
<h3 id="Actor系统">Actor系统</h3><p>光有一个一个独立的Actor显然是不行的.Akka中还有一个<code>Actor System</code>.<br><code>Actor System</code>统管了<code>Actor</code>,是Actor的系统工厂或管理者,掌控了Actor的生命周期.</p>
<p><img src="/img/2016/01/10/1.png" alt=""><br>如上图所示,我们可以通过<code>ActorSystem.create</code>来创建一个ActorSystem的实例.然后通过<code>actorOf</code>等方法来获取<code>ActorRef</code>对象.<code>ActorRef</code>即为<code>Actor Reference</code>.它是Actor的一个引用,主要的作用是发送消息给它表示的Actor.而Actor可以通过访问<code>self()</code>或<code>sender()</code>方法来获取到自身或消息发送者的Actor引用.通过引用发送消息.在Akka中,Actor之间永远都不能直接的通信,必须通过他们的代理<code>ActorRef</code>建立通信.</p>
<h3 id="Actor路径">Actor路径</h3><p>为了实现一切事物都是Actor,为了能把一个复杂的事物划分的更细致.Akka引入了父子Actor.也就是Actor是有树形结构的关系的.这样的父子结构就能递归的把任何复杂的事物原子化.这也是Actor模型的精髓所在.这样做不仅使任务本身被清晰地划分出结构,而且最终的Actor也能按照他们明确的消息类型以及处理流程来进行解析.这样的递归结构使得消息能够在正确的层次进行处理.</p>
<p><img src="/img/2016/01/10/2.png" alt=""></p>
<p>为了能管理父子结构的Actor,Akka又引入了<code>Actor Path</code>,也就是Actor路径.<br>Actor路径使用类似于URL的方式来描述一个Actor,<code>Actor Path</code>在一个<code>Actor System</code>中是唯一的.通过路径,可以很明确的看出某个Actor的父级关系是怎样的.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//本地Actor</span><br><span class="line"><span class="string">"akka://my-sys/user/service-a/worker1"</span></span><br><span class="line"></span><br><span class="line">//远程Actor</span><br><span class="line"><span class="string">"akka.tcp://my-sys@host.example.com:2552/user/service-b"</span></span><br><span class="line"></span><br><span class="line">//集群Actor服务</span><br><span class="line"><span class="string">"cluster://my-cluster/service-c"</span></span><br></pre></td></tr></table></figure>
<p>以上三种就是Akka中支持的<code>Actor</code>路径. 每一个通过ActorSystem创建出来的Actor都会有一个这样的路径.也可以通过这个路径从ActorSystem中获取一个<code>Actor</code>.</p>
<p>当我们创建一个ActorSystem的时候,AKKA会为该System默认的创建三个Actor,并处于不同的层次:</p>
<p><img src="/img/2016/01/10/3.png" alt=""><br>其中的<code>root guardian</code>是所有Actor的父.<br>而<code>User</code>Actor是所有用户创建的Actor的父.它的路径是<code>/user</code>,通过system.actorOf()创建出来的Actor都算是用户的Actor,也都是这个Actor的子.<br><code>System</code>Actor是所有系统创建的Actor的父.它的路径是<code>/system</code>,主要的作用是提供了一系列的系统的功能.</p>
<p>当我们查找一个Actor的时候,可以使用ActorSystem.actorSelection()方法.并且可以使用绝对路径或者相对路径来获取.如果是相对路径,那么<code>..</code>表示的是父Actor.比如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActorSelection selection = system.actorSelection(<span class="string">"../brother"</span>);</span><br><span class="line">ActorRef actor = selection.anchor();</span><br><span class="line">selection.tell(xxx);</span><br></pre></td></tr></table></figure>
<p>同时,也可以通过通配符来查询逻辑的Actor层级,比如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActorSelection selection = system.actorSelection(<span class="string">"../*"</span>);</span><br><span class="line">selection.tell(xxx);</span><br></pre></td></tr></table></figure>
<p>这个就表示把消息发送给当前Actor之外的所有同级的Actor.</p>
<h2 id="Hello_AKKA_Demo">Hello AKKA Demo</h2><p>原理讲了这么多,那么我们就来看一看一个最简单的Akka的例子吧.<br>这个是一个最简单的打招呼的例子,这个例子中,定义了招呼,打招呼的人两个对象或者说消息.然后定义了执行打招呼和打印招呼两个Actor.然后通过ActorSystem整合整个打招呼的过程.</p>
<p><strong>Greet.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 用于表示执行打招呼这个操作的消息</span><br><span class="line"> * <span class="doctag">@author</span> SUN</span><br><span class="line"> * <span class="doctag">@version</span> 1.0</span><br><span class="line"> * <span class="doctag">@Date</span> 16/1/6 21:43</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greet</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Greeting.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 招呼体,里面有打的什么招呼</span><br><span class="line"> * <span class="doctag">@author</span> SUN</span><br><span class="line"> * <span class="doctag">@version</span> 1.0</span><br><span class="line"> * <span class="doctag">@Date</span> 16/1/6 21:44</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greeting</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>WhoToGreet.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 打招呼的人</span><br><span class="line"> * <span class="doctag">@author</span> SUN</span><br><span class="line"> * <span class="doctag">@version</span> 1.0</span><br><span class="line"> * <span class="doctag">@Date</span> 16/1/6 21:41</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhoToGreet</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String who;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WhoToGreet</span><span class="params">(String who)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.who = who;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Greeter.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 打招呼的Actor</span><br><span class="line"> * <span class="doctag">@author</span> SUN</span><br><span class="line"> * <span class="doctag">@version</span> 1.0</span><br><span class="line"> * <span class="doctag">@Date</span> 16/1/6 21:40</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String greeting = <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> WhoToGreet)</span><br><span class="line">            greeting = <span class="string">"hello, "</span> + ((WhoToGreet) message).who;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Greet)</span><br><span class="line">            <span class="comment">// 发送招呼消息给发送消息给这个Actor的Actor</span></span><br><span class="line">            getSender().tell(<span class="keyword">new</span> Greeting(greeting), getSelf());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> unhandled(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>GreetPrinter.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 打印招呼</span><br><span class="line"> * <span class="doctag">@author</span> SUN</span><br><span class="line"> * <span class="doctag">@version</span> 1.0</span><br><span class="line"> * <span class="doctag">@Date</span> 16/1/6 21:45</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetPrinter</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Greeting)</span><br><span class="line">            System.out.println(((Greeting) message).message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>DemoMain.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@author</span> SUN</span><br><span class="line"> * <span class="doctag">@version</span> 1.0</span><br><span class="line"> * <span class="doctag">@Date</span> 16/1/6 21:39</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActorSystem system = ActorSystem.create(<span class="string">"helloakka"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个到greeter Actor的管道</span></span><br><span class="line">        <span class="keyword">final</span> ActorRef greeter = system.actorOf(Props.create(Greeter.class), <span class="string">"greeter"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建邮箱</span></span><br><span class="line">        <span class="keyword">final</span> Inbox inbox = Inbox.create(system);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先发第一个消息,消息类型为WhoToGreet</span></span><br><span class="line">        greeter.tell(<span class="keyword">new</span> WhoToGreet(<span class="string">"akka"</span>), ActorRef.noSender());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真正的发送消息,消息体为Greet</span></span><br><span class="line">        inbox.send(greeter, <span class="keyword">new</span> Greet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待5秒尝试接收Greeter返回的消息</span></span><br><span class="line">        Greeting greeting1 = (Greeting) inbox.receive(Duration.create(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(<span class="string">"Greeting: "</span> + greeting1.message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送第三个消息,修改名字</span></span><br><span class="line">        greeter.tell(<span class="keyword">new</span> WhoToGreet(<span class="string">"typesafe"</span>), ActorRef.noSender());</span><br><span class="line">        <span class="comment">// 发送第四个消息</span></span><br><span class="line">        inbox.send(greeter, <span class="keyword">new</span> Greet());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待5秒尝试接收Greeter返回的消息</span></span><br><span class="line">        Greeting greeting2 = (Greeting) inbox.receive(Duration.create(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(<span class="string">"Greeting: "</span> + greeting2.message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新创建一个Actor的管道</span></span><br><span class="line">        ActorRef greetPrinter = system.actorOf(Props.create(GreetPrinter.class));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用schedule 每一秒发送一个Greet消息给 greeterActor,然后把greeterActor的消息返回给greetPrinterActor </span></span><br><span class="line">        system.scheduler().schedule(Duration.Zero(), Duration.create(<span class="number">1</span>, TimeUnit.SECONDS), greeter, <span class="keyword">new</span> Greet(), system.dispatcher(), greetPrinter);</span><br><span class="line">        <span class="comment">//system.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是整个Demo的所有代码,并不多.接下来我们就分析一下这个程序.</p>
<p>首先是定义的几个消息.在Akka中传递的消息必须实现<code>Serializable</code>接口.<code>WhoToGreet</code>消息表示了打招呼的人,<code>Greeting</code>表示了招呼的内容,而<code>Greet</code>表示了打招呼这个动作.</p>
<p>接着就是两个最重要的Actor了.<code>GreetPrinter</code>非常简单,接收到消息后,判断消息的类型,如果是<code>Greeting</code>招呼内容,那么就直接打印消息到控制台.而<code>Greeter</code>这个Actor稍微复杂点,它消费两种不同的消息,如果是<code>WhoToGreet</code>,那么就把要打招呼的人记录到自己的上下文中,如果是<code>Greet</code>,那么就构造出招呼的内容,并把消息反馈回sender.</p>
<p>最后,再来分析下DemoMain.</p>
<ol>
<li>一来,先创建了一个<code>ActorSystem</code>,</li>
<li>然后创建了一个<code>Greeter</code>Actor的实例,命名为<code>greeter</code>.</li>
<li>接着,为这个Actor,显示的创建了一个<code>邮箱</code>.</li>
<li>而后,调用<code>greeter.tell(new WhoToGreet(&quot;akka&quot;), ActorRef.noSender());</code>,表示给greeter这个Actor发送一个消息,消息的内容是<code>WhoToGreet</code>,发送者是空.这就意味着在greeter这个Actor内部,调用sender是不能获取到发送者的.通过这个动作,就把消息限定为了单向的.</li>
<li>再然后,通过<code>inbox.send(greeter, new Greet());</code>,使用邮箱显示的发送一个Greet消息给greeter.这是给Actor发送消息的另外一种方法,这种方法通常会有更高的自主性,能完成更多更复杂的操作.但是调用起来比直接使用<code>ActorRef</code>来的复杂.</li>
<li><code>Greeting greeting1 = (Greeting) inbox.receive(Duration.create(5, TimeUnit.SECONDS));</code>表示的就是尝试在5秒钟内,从<code>Inbox</code>邮箱中获取到反馈消息.如果5秒内没有获取到,那么就抛出<code>TimeoutException</code>异常. 由于我们在greeter这个Actor中有处理,接收到<code>Greet</code>消息后,就构造一个<code>Greeting</code>消息给<code>sender</code>,因此这个地方是能够正确的获取到消息的反馈的.</li>
<li>后面的操作都是一样的,就不再重复描述.</li>
<li>只有最后一个代码稍微有点不一样<code>system.scheduler().schedule(Duration.Zero(), Duration.create(1, TimeUnit.SECONDS), greeter, new Greet(), system.dispatcher(), greetPrinter);</code>,这个使用了<code>ActorSystem</code>中的调度功能.每一秒钟给greeter这个Actor发送一个<code>Greet</code>消息,并指定消息的发送者是<code>greetPrinter</code>.这样每隔一秒钟,greeter就会收到<code>Greet</code>消息,然后构造成<code>Greeting</code>消息,又返回给<code>GreetPrinter</code>这个Actor,这个Actor接收到消息后,打印出来.形成一个环流.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Akka_in_JAVA(一)">Akka in JAVA(一)</h1><h2 id="AKKA简介">AKKA简介</h2><h3 id="什么是AKKA">什么是AKKA</h3><p>Akka是一个由<code>Scala</code>编写的,能兼容<code>Sacala</code>和<code>JAVA</code>的,用于编写高可用和高伸缩性的<code>Actor模型</code>框架.它基于了事件驱动的并发处理模式,性能非常的高,并且有很高的可用性.大大的简化了我们在应用系统中开发并发处理的过程.它在各个领域都有很好的表现.</p>
<h3 id="使用AKKA的好处">使用AKKA的好处</h3><p>就如上面简介中所说的,AKKA把并发操作的各种复杂的东西都统一的做了封装.我们主要关心的是业务逻辑的实现,只需要少量的关心<code>Actor模型</code>的串联即可构建出高可用,高性能,高扩展的应用.</p>
<h3 id="Akka_for_JAVA">Akka for JAVA</h3><p>由于AKKA是使用<code>Scala</code>编写的,而<code>Scala</code>是一种基于JVM的语言.因此<code>JAVA</code>对AKKA的支持也是很不错的.Akka自身又是采用微内核的方式来实现的,这就意味着能很容易的在自己的项目中应用AKKA,只需要引入几个akka的Lib包即可.而官方直接就提供了<code>Maven</code>库供我们在JAVA中使用AKKA.<br>这些AKKA的依赖包主要有:</p>
<ul>
<li><strong>akka-actor</strong>:最核心的依赖包,里面实现了Actor模型的大部分东西</li>
<li><strong>akka-agent</strong>:代理/整合了Scala中的一些STM特性</li>
<li><strong>akka-camel</strong>:整合了Apache的Camel</li>
<li><strong>akka-cluster</strong>:akka集群依赖,封装了集群成员的管理和路由</li>
<li><strong>akka-kernel</strong>:akka的一个极简化的应用服务器,可以脱离项目单独运行.</li>
<li><strong>akka-osgi</strong>:对OSGI容器的支持,有akka的最基本的Bundle</li>
<li><strong>akka-remote</strong>:akka远程调用</li>
<li><strong>akka-slf4j</strong>:Akka的日志事件监听</li>
<li><strong>akka-testkit</strong>:Akka的各种测试工具</li>
<li><strong>akka-zeromq</strong>:整合ZeroMQ<br>其中最总要的就是<code>akka-actor</code>,最简单的AKKA使用的话,只需要引入这个包就可以了.</li>
</ul>]]>
    
    </summary>
    
      <category term="Akka" scheme="http://sunxiang0918.github.io/tags/Akka/"/>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在IOS中使用swift调用系统相机]]></title>
    <link href="http://sunxiang0918.github.io/2016/01/02/%E5%9C%A8IOS%E4%B8%AD%E4%BD%BF%E7%94%A8swift%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E6%9C%BA/"/>
    <id>http://sunxiang0918.github.io/2016/01/02/在IOS中使用swift调用系统相机/</id>
    <published>2016-01-02T12:03:41.000Z</published>
    <updated>2016-01-10T13:48:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="在IOS中使用swift调用系统相机">在IOS中使用swift调用系统相机</h1><p>在IOS的APP开发中,很容易就会遇到使用拍照或录制视频的功能.如果要求并不是太多的话,最简单方式就是调用系统自带的图像获取器<code>UIImagePickerController</code>. </p>
<p>由于<code>UIImagePickerController</code>继承自<code>UINavigationController</code>,所以它的<code>delegate</code>需要实现<code>UIImagePickerControllerDelegate</code>和<code>UINavigationControllerDelegate</code>两个协议.</p>
<h2 id="基本知识">基本知识</h2><p>要使用这个类主要要做以下几件事情:</p>
<ol>
<li>首先要创建一个全局的<code>UIImagePickerController</code>实例.</li>
<li>判断设备是否支持数据来源:<ul>
<li><code>UIImagePickerController.isSourceTypeAvailable(.Camera)</code></li>
<li><code>UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary)</code></li>
<li><code>UIImagePickerController.isSourceTypeAvailable(.SavedPhotosAlbum)</code></li>
</ul>
</li>
<li><p>然后指定数据的来源.一共有三种来源:</p>
<ul>
<li><code>UIImagePickerControllerSourceType.PhotoLibrary</code>    来自系统图库</li>
<li><code>UIImagePickerControllerSourceType.Camera</code>       来自相机</li>
<li><code>UIImagePickerControllerSourceType.SavedPhotosAlbum</code>      来自相册</li>
</ul>
</li>
<li><p>如果数据来源是相机,那么还需要设置相机的捕获模式<code>cameraCaptureMode</code>. 主要分为<code>.Photo</code>和<code>.Video</code></p>
</li>
<li><p>实现各种代理方法接收保存和获取图像的方法.</p>
</li>
<li><p>设置媒体类型,<code>UIImagePickerController</code>根据这个的值来决定选择或拍摄的媒体类型.这个是一个[String] 字符串数组.多个值就表明了可以在拍摄的界面上切换.需要注意的是这个<code>mediaTypes</code>的定义是在<code>MobileCoreService</code>框架下的.当然也可以直接使用<code>String</code>的常量来描述.常用的媒体类型为:</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">常量名</th>
<th style="text-align:center">常量值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">kUTTypeImage</td>
<td style="text-align:center">public.image</td>
<td style="text-align:center">照片</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeMovie</td>
<td style="text-align:center">public.movie</td>
<td style="text-align:center">音视频</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeVideo</td>
<td style="text-align:center">public.video</td>
<td style="text-align:center">纯视频</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeAudio</td>
<td style="text-align:center">public.audio</td>
<td style="text-align:center">纯音频</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeLivePhoto</td>
<td style="text-align:center">com.apple.live-photo</td>
<td style="text-align:center">IOS9的动态照片(关于动态图片后面再单独开博文来说)</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>除了上面说的几个设置外,在使用<code>UIImagePickerController</code>过程中可能还用得到的设置主要有:</p>
<ul>
<li><strong>modalTransitionStyle</strong>:        取景框出现效果</li>
<li><strong>allowsEditing</strong>:    是否允许编辑,只有在<code>showsCameraControls</code>属性为<code>true</code>时才有效</li>
<li><strong>showsCameraControls</strong>:  是否显示拍照时的工具栏,如果要自定义拍摄界面,需要把这个工具栏隐藏掉</li>
<li><strong>videoMaximumDuration</strong>: 录制视频的时长, 默认是10秒</li>
<li><strong>videoQuality</strong>:  视频质量,枚举定义在<code>UIImagePickerControllerQualityType</code>中</li>
<li><strong>cameraDevice</strong>: 前置,还是后置摄像头,枚举定义在<code>UIImagePickerControllerCameraDevice</code></li>
<li><strong>cameraFlashMode</strong>:闪光灯模式,枚举定义在<code>UIImagePickerControllerCameraFlashMode</code></li>
</ul>
<p>有了这些准备,就可以开始来实现一个最简单的DEMO了.</p>
<h2 id="Demo">Demo</h2><p>DEMO很简单,在一个APP上增加一个按钮,点击这个按钮,打开系统自带的摄像头.然后可以进行拍摄,最后把拍摄结果保存到相册中.</p>
<ol>
<li><p>首先先创建一个<code>UIImagePickerController</code>:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imagePickerController:<span class="type">UIImagePickerController</span> = <span class="type">UIImagePickerController</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>给某个ViewController上增加<code>UIImagePickerControllerDelegate</code>和<code>UINavigationControllerDelegate</code>两个协议.</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIImagePickerControllerDelegate</span>,<span class="title">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class="line">	<span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">		imagePickerController.delegate = <span class="keyword">self</span></span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后设置PickerController的初始值:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imagePickerController.modalTransitionStyle = .<span class="type">FlipHorizontal</span></span><br><span class="line">   imagePickerController.allowsEditing = <span class="literal">true</span>	<span class="comment">//是否允许编辑</span></span><br><span class="line">   imagePickerController.sourceType = .<span class="type">Camera</span>	<span class="comment">//数据来源为摄像头</span></span><br><span class="line">    imagePickerController.videoMaximumDuration = <span class="number">15</span>      <span class="comment">//模式录制视频长度,单位秒</span></span><br><span class="line">    imagePickerController.mediaTypes = [<span class="string">"public.image"</span>,<span class="string">"public.movie"</span>]        <span class="comment">//允许的相机类型(拍照,摄像....)</span></span><br><span class="line">    imagePickerController.videoQuality = .<span class="type">TypeHigh</span>		     <span class="comment">//视频质量</span></span><br><span class="line">    imagePickerController.cameraCaptureMode = .<span class="type">Photo</span>		<span class="comment">//初始摄像头的模式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置界面按钮的事件响应,在相应中增加打开<code>imagePickerController</code>视图的方法:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.presentViewController(imagePickerController, animated: <span class="literal">true</span>) &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现完成照片或视频的拍摄回调代理方法:<code>func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject])</code>:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">imagePickerController</span><span class="params">(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject])</span></span> &#123;</span><br><span class="line">	  <span class="comment">//获取媒体的类型</span></span><br><span class="line">       <span class="keyword">let</span> mediaType = info[<span class="type">UIImagePickerControllerMediaType</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//如果媒体是照片</span></span><br><span class="line">       <span class="keyword">if</span> mediaType == kUTTypeImage <span class="keyword">as</span> <span class="type">String</span> &#123;</span><br><span class="line">           <span class="comment">//获取到拍摄的照片, UIImagePickerControllerEditedImage是经过剪裁过的照片,UIImagePickerControllerOriginalImage是原始的照片</span></span><br><span class="line">           <span class="keyword">let</span> image = info[<span class="type">UIImagePickerControllerEditedImage</span>] <span class="keyword">as</span>! <span class="type">UIImage</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">//调用方法保存到图像库中</span></span><br><span class="line">           <span class="type">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>,<span class="string">"image:didFinishSavingWithError:contextInfo:"</span>, <span class="literal">nil</span>)</span><br><span class="line">           </span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//视频</span></span><br><span class="line">           <span class="comment">//获取到视频的临时路径</span></span><br><span class="line">           <span class="keyword">let</span> urlStr =  (info[<span class="type">UIImagePickerControllerMediaURL</span>] <span class="keyword">as</span>! <span class="type">NSURL</span>).path</span><br><span class="line">           <span class="comment">//启动异步线程保存视频到图像库中</span></span><br><span class="line">           dispatch_async(dispatch_get_global_queue(<span class="type">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>), &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">           <span class="comment">//调用方法保存到图像库中</span></span><br><span class="line">               <span class="type">UISaveVideoAtPathToSavedPhotosAlbum</span>(urlStr!, <span class="keyword">self</span>, <span class="string">"video:didFinishSavingWithError:contextInfo:"</span>, <span class="literal">nil</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//关闭照相框</span></span><br><span class="line">       <span class="keyword">self</span>.dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现完成保存后的结果回调方法<code>func image(image: UIImage, didFinishSavingWithError error: NSError?, contextInfo:UnsafePointer&lt;Void&gt;)</code>:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">image</span><span class="params">(image: UIImage, didFinishSavingWithError error: NSError?, contextInfo:UnsafePointer&lt;Void&gt;)</span></span> &#123;</span><br><span class="line">       <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">let</span> ac = <span class="type">UIAlertController</span>(title: <span class="string">"Saved!"</span>, message: <span class="string">"成功保存照片到图库"</span>, preferredStyle: .<span class="type">Alert</span>)</span><br><span class="line">           ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</span><br><span class="line">           presentViewController(ac, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">let</span> ac = <span class="type">UIAlertController</span>(title: <span class="string">"Save error"</span>, message: error?.localizedDescription, preferredStyle: .<span class="type">Alert</span>)</span><br><span class="line">           ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</span><br><span class="line">           presentViewController(ac, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现完成保存视频后的结果回调方法<code>func video(videoPath: String, didFinishSavingWithError error: NSError?, contextInfo:UnsafePointer&lt;Void&gt;)</code>:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">video</span><span class="params">(videoPath: String, didFinishSavingWithError error: NSError?, contextInfo:UnsafePointer&lt;Void&gt;)</span></span> &#123;</span><br><span class="line">       <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">let</span> ac = <span class="type">UIAlertController</span>(title: <span class="string">"Saved!"</span>, message: <span class="string">"成功保存视频到图库"</span>, preferredStyle: .<span class="type">Alert</span>)</span><br><span class="line">           ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</span><br><span class="line">           presentViewController(ac, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">let</span> ac = <span class="type">UIAlertController</span>(title: <span class="string">"Save error"</span>, message: error?.localizedDescription, preferredStyle: .<span class="type">Alert</span>)</span><br><span class="line">           ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</span><br><span class="line">           presentViewController(ac, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这样就完成了打开系统相机,并把拍摄的结果放入系统默认的相薄中的全部功能了.</p>
<h2 id="自定义相薄">自定义相薄</h2><p>到目前为止照片等都是保存到系统默认的<code>相机胶卷</code>这个相薄中. 但是像<code>QQ</code> <code>微信</code>这些应用都是可以把图片存放到自己的相薄中的.这就要求程序中对相薄进行操作了.</p>
<p>在IOS9中,要操作相薄的话,需要引入<code>import Photos</code>库.然后使用<code>PHPhotoLibrary</code>这个类.</p>
<p>先说创建相薄:</p>
<ol>
<li><p>首先需要定义一个<code>PHAssetCollection</code>对象:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">var</span> assetCollection:<span class="type">PHAssetCollection</span>?</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增一个创建相薄的方法<code>createAlbum</code>: </p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">createAlbum</span><span class="params">()</span></span> &#123;</span><br><span class="line">	 <span class="comment">//创建一个FetchOptions,属性选择器</span></span><br><span class="line">       <span class="keyword">let</span> fetchOptions = <span class="type">PHFetchOptions</span>()</span><br><span class="line">       <span class="comment">//指定相薄的名称</span></span><br><span class="line">       fetchOptions.predicate = <span class="type">NSPredicate</span>(format: <span class="string">"title = %@"</span>, <span class="string">"测试用"</span>)</span><br><span class="line">       <span class="comment">//获取相薄的对象</span></span><br><span class="line">       <span class="keyword">let</span> collection = <span class="type">PHAssetCollection</span>.fetchAssetCollectionsWithType(.<span class="type">Album</span>, subtype: .<span class="type">Any</span>, options: fetchOptions)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//如果查询出的第一个对象存在,那么就说明相薄已经存在了,直接赋值</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">let</span> <span class="number">_</span> = collection.firstObject &#123;</span><br><span class="line">           assetCollection =  collection.firstObject <span class="keyword">as</span>? <span class="type">PHAssetCollection</span></span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">       	  <span class="comment">//否则需要创建一个新的相薄</span></span><br><span class="line">           <span class="keyword">var</span> assetCollectionPlaceholder:<span class="type">PHObjectPlaceholder</span>!</span><br><span class="line">           <span class="comment">//调用performChanges方法来创建相薄</span></span><br><span class="line">           <span class="type">PHPhotoLibrary</span>.sharedPhotoLibrary().performChanges(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">               <span class="comment">//根据title来创建一个相薄的请求</span></span><br><span class="line">               <span class="keyword">let</span> createAlbumRequest = <span class="type">PHAssetCollectionChangeRequest</span>.creationRequestForAssetCollectionWithTitle(<span class="string">"测试用"</span>)</span><br><span class="line">               <span class="comment">//获取出请求中的placeholder</span></span><br><span class="line">               assetCollectionPlaceholder = createAlbumRequest.placeholderForCreatedAssetCollection</span><br><span class="line">               &#125;) &#123; (success, error) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                   <span class="comment">//创建完成的回调</span></span><br><span class="line">                   <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                       <span class="type">NSLog</span>(<span class="string">"Error creating album: <span class="subst">\(error)</span>"</span>);</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   	<span class="comment">//如果创建成功.那么就要获取到PHAssetCollection,只有有了这个才能把照片存放到这个相薄中</span></span><br><span class="line">                       <span class="keyword">let</span> collectionFetchResult = <span class="type">PHAssetCollection</span>.fetchAssetCollectionsWithLocalIdentifiers([assetCollectionPlaceholder.localIdentifier], options: <span class="literal">nil</span>)</span><br><span class="line">                       <span class="keyword">self</span>.assetCollection =  collectionFetchResult.firstObject <span class="keyword">as</span>? <span class="type">PHAssetCollection</span></span><br><span class="line">                   &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建完成相薄后,就可以保存照片到相薄中了: </p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">imagePickerController</span><span class="params">(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject])</span></span> &#123;</span><br><span class="line">       <span class="keyword">let</span> mediaType = info[<span class="type">UIImagePickerControllerMediaType</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//尝试创建相薄</span></span><br><span class="line">       createAlbum()</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> mediaType == kUTTypeImage <span class="keyword">as</span> <span class="type">String</span> &#123;</span><br><span class="line">           <span class="comment">//图片</span></span><br><span class="line">           <span class="keyword">let</span> image = info[<span class="type">UIImagePickerControllerEditedImage</span>] <span class="keyword">as</span>! <span class="type">UIImage</span></span><br><span class="line">           <span class="comment">//使用线程同步     </span></span><br><span class="line">                  dispatch_async(dispatch_get_global_queue(<span class="type">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>), &#123;</span><br><span class="line">               <span class="comment">//保存到自定义的相薄中</span></span><br><span class="line">               <span class="type">PHPhotoLibrary</span>.sharedPhotoLibrary().performChanges(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                   <span class="comment">//根据相片得到保存的请求</span></span><br><span class="line">                   <span class="keyword">let</span> assetRequest = <span class="type">PHAssetChangeRequest</span>.creationRequestForAssetFromImage(image)</span><br><span class="line">                   <span class="comment">//找到placehodler</span></span><br><span class="line">                   <span class="keyword">let</span> assetPlaceholder = assetRequest.placeholderForCreatedAsset</span><br><span class="line">                   <span class="comment">//创建photosAsset</span></span><br><span class="line">                   <span class="keyword">let</span> photosAsset = <span class="type">PHAsset</span>.fetchAssetsInAssetCollection(<span class="keyword">self</span>.assetCollection!, options: <span class="literal">nil</span>)</span><br><span class="line">                   <span class="comment">//实例化 保存事件</span></span><br><span class="line">                   <span class="keyword">if</span> <span class="keyword">let</span> albumChangeRequest = <span class="type">PHAssetCollectionChangeRequest</span>(forAssetCollection: <span class="keyword">self</span>.assetCollection!, assets: photosAsset) &#123;</span><br><span class="line">                   	<span class="comment">//执行相薄照片的保存</span></span><br><span class="line">                       albumChangeRequest.addAssets([assetPlaceholder!])</span><br><span class="line">                   &#125;</span><br><span class="line">                   </span><br><span class="line">                   &#125;, completionHandler: &#123; (success, error) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                       dispatch_async(dispatch_get_main_queue(), &#123;</span><br><span class="line">                           <span class="type">NSLog</span>(<span class="string">"Adding Image to Library -&gt; %@"</span>, (success ? <span class="string">"Sucess"</span>:<span class="string">"Error!"</span>))</span><br><span class="line">                           <span class="comment">//</span></span><br><span class="line">                           <span class="keyword">if</span> !success &#123;</span><br><span class="line">                               <span class="comment">//表示没有保存成功,尝试保存到系统自带的里面</span></span><br><span class="line">                               <span class="comment">//保存到图库</span></span><br><span class="line">                               <span class="type">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>,<span class="string">"image:didFinishSavingWithError:contextInfo:"</span>, <span class="literal">nil</span>)</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="comment">//保存陈红</span></span><br><span class="line">                           <span class="keyword">self</span>.dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">                       &#125;)</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;)</span><br><span class="line">           </span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//视频</span></span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如此就能保存相片到自定义的相薄中了,其实对相薄还可以有其他的操作,比如列出所有相薄的名字,删除相薄等等.这个具体的参考<code>PHPhotoLibrary</code>类即可.</p>
<h2 id="总结">总结</h2><p>本文简单的介绍了一下,如何调用系统自带的相机和相册来进行照片和视频的拍摄.同时也介绍了如何自定义相薄,为以后更高级的拍摄功能做了准备.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="在IOS中使用swift调用系统相机">在IOS中使用swift调用系统相机</h1><p>在IOS的APP开发中,很容易就会遇到使用拍照或录制视频的功能.如果要求并不是太多的话,最简单方式就是调用系统自带的图像获取器<code>UIImagePickerController</code>. </p>
<p>由于<code>UIImagePickerController</code>继承自<code>UINavigationController</code>,所以它的<code>delegate</code>需要实现<code>UIImagePickerControllerDelegate</code>和<code>UINavigationControllerDelegate</code>两个协议.</p>
<h2 id="基本知识">基本知识</h2><p>要使用这个类主要要做以下几件事情:</p>
<ol>
<li>首先要创建一个全局的<code>UIImagePickerController</code>实例.</li>
<li>判断设备是否支持数据来源:<ul>
<li><code>UIImagePickerController.isSourceTypeAvailable(.Camera)</code></li>
<li><code>UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary)</code></li>
<li><code>UIImagePickerController.isSourceTypeAvailable(.SavedPhotosAlbum)</code></li>
</ul>
</li>
<li><p>然后指定数据的来源.一共有三种来源:</p>
<ul>
<li><code>UIImagePickerControllerSourceType.PhotoLibrary</code>    来自系统图库</li>
<li><code>UIImagePickerControllerSourceType.Camera</code>       来自相机</li>
<li><code>UIImagePickerControllerSourceType.SavedPhotosAlbum</code>      来自相册</li>
</ul>
</li>
<li><p>如果数据来源是相机,那么还需要设置相机的捕获模式<code>cameraCaptureMode</code>. 主要分为<code>.Photo</code>和<code>.Video</code></p>
</li>
<li><p>实现各种代理方法接收保存和获取图像的方法.</p>
</li>
<li><p>设置媒体类型,<code>UIImagePickerController</code>根据这个的值来决定选择或拍摄的媒体类型.这个是一个[String] 字符串数组.多个值就表明了可以在拍摄的界面上切换.需要注意的是这个<code>mediaTypes</code>的定义是在<code>MobileCoreService</code>框架下的.当然也可以直接使用<code>String</code>的常量来描述.常用的媒体类型为:</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">常量名</th>
<th style="text-align:center">常量值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">kUTTypeImage</td>
<td style="text-align:center">public.image</td>
<td style="text-align:center">照片</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeMovie</td>
<td style="text-align:center">public.movie</td>
<td style="text-align:center">音视频</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeVideo</td>
<td style="text-align:center">public.video</td>
<td style="text-align:center">纯视频</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeAudio</td>
<td style="text-align:center">public.audio</td>
<td style="text-align:center">纯音频</td>
</tr>
<tr>
<td style="text-align:center">kUTTypeLivePhoto</td>
<td style="text-align:center">com.apple.live-photo</td>
<td style="text-align:center">IOS9的动态照片(关于动态图片后面再单独开博文来说)</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[再见2015]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/31/%E5%86%8D%E8%A7%812015/"/>
    <id>http://sunxiang0918.github.io/2015/12/31/再见2015/</id>
    <published>2015-12-31T14:13:48.000Z</published>
    <updated>2016-01-01T16:12:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="再见2015">再见2015</h1><p>时光匆匆,转眼2015年就要过去了.2015开年的事情仿佛刚过去没有多久,2016又要来了.今年是忙碌的一年,不管是在生活上还是在工作上都发生了很多的变化.本文将回顾一下作为程序猿的自己在今年的成长,做一个简单的总结.</p>
<h2 id="博客">博客</h2><p>今年年中,自己在github.io上搭建了自己的个人博客,并且把以前的一些文章从evernote上迁移了过来.以前,从来没有写博客的习惯,一个是觉得写博客比较麻烦,因为可能不是自己一个人看,不能像在evernote上那样随便乱写.还有一个就是觉得东西有个地方保存就好了,没必要分享出来.不过,最后还是决定把博客搭建出来,既能锻炼自己的书写,也能强迫自己把东西记录的更规范更细致,最后也能分享给有需要的人.从事了5年的软件行业了,渐渐的开始理解开源人的心态了,也从各位开源的大神中得到了很多的好处,是时候把自己力所能及的东西分享出来了.</p>
<p>今年一共写了<a href="/archives/2015">43篇博客</a>,从数量上来说不算多.主要涉及的是<code>JAVA研发体系</code>以及<code>Swift</code>方面的内容.<br>对于明年,目标是60篇博客,内容上更有深度与广度.希望能够达成.</p>
<a id="more"></a>
<h2 id="阅读">阅读</h2><p>今年阅读的书不多,更大的变化是技术类的书从以前的只阅读实体书,到渐渐的开始接受电子书了.</p>
<table>
<thead>
<tr>
<th style="text-align:left">书名</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">完成度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="http://book.douban.com/subject/26274206/" target="_blank" rel="external">写给大忙人看的JAVA SE8</a></td>
<td style="text-align:center">实体书</td>
<td style="text-align:center">完成</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://book.douban.com/subject/26261153/" target="_blank" rel="external">Spark大数据处理</a></td>
<td style="text-align:center">实体书</td>
<td style="text-align:center">60%</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://book.douban.com/subject/2347790/" target="_blank" rel="external">敏捷软件开发 原则,模式与实践</a></td>
<td style="text-align:center">实体书</td>
<td style="text-align:center">重读</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="external">The Swift Programming Language</a></td>
<td style="text-align:center">电子书</td>
<td style="text-align:center">完成</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leanpub.com/swifter" target="_blank" rel="external">SWIFTER 100个Swift必备Tips</a></td>
<td style="text-align:center">电子书</td>
<td style="text-align:center">完成</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="external">Docker —— 从入门到实践</a></td>
<td style="text-align:center">电子书</td>
<td style="text-align:center">完成</td>
</tr>
<tr>
<td style="text-align:left">快学Scala</td>
<td style="text-align:center">PDF电子书</td>
<td style="text-align:center">40%</td>
</tr>
</tbody>
</table>
<h2 id="团队实践">团队实践</h2><p>今年由于公司新开项目的原因,能够有机会对团队的运作有较大的改变.<br>首先,终于把所有的代码都从SVN上迁移到了GIT上.这个过程看似简单,其实是比较麻烦的.当一个团队在SVN上都搞了5年了,然后更换了整个工作的流程,并不是想象中的这么容易的.要让十多号人都熟悉GIT的概念,熟悉基于分支的开发模式.终于彻底贯彻了我在2012年摘抄到evernote上&lt;<a href="/2012/08/18/A-successful-Git-branching-model/">A successful Git branching model</a>&gt;这篇文章上所描述的工作模式.感觉到了GIT的强大与方便.<br>其次,尝试在项目中引入SCRUM敏捷开发,由于团队人数不多,需求比较灵活.因此,尝试了引入SCRUM敏捷开发,并且使用了Teambition作为管理工具,每天进行站立会议,阶段评审等等.就目前执行了3个多月的效果来看,一半的一半.一半的成功是坚持了站立会议,阶段任务制定,阶段成果评审等等,确实清晰了当前的项目状态.一半的失败是没有坚持下来使用Teambition工具,并且任务墙也没有坚持下来.除了让所有团队成员事无巨细的拆分任务和记录任务状态不容易外,自己对于Scrum的不熟悉也是一个原因.搞了这么多年的瀑布式开发,开发的习惯还没有更改过来.<br>希望明年会有进步,把任务墙的机制彻底的落实下来.</p>
<h2 id="JAVA">JAVA</h2><p>今年在JAVA方面主要的进步是在于扩展了大数据方面的知识.以前搞了这么久的JAVA,一直停留在了JAVA语言本身,各种业务逻辑,J2EE,检索引擎这些上面.而今年开始有机会接触了<code>Hadoop</code>,<code>HBase</code>,<code>HIVE</code>,<code>Spark</code>这些东西,虽然还很基础.不过总算也是入门了.<br>明年的目标就是以项目作为机会深入的了解大数据,以及数据挖掘方面的东西.</p>
<h2 id="互联网技术">互联网技术</h2><p>今年还有一个显著的变化就是接触了大量的互联网的技术.公司的新项目是一个类似于互联网的项目,因此需要掌握一些以前接触比较少的互联网技术.比如:<code>mongoDB</code>,<code>Kafka</code>,<code>Redis</code>,<code>Zabbix</code>,<code>ELK</code>,<code>S3</code>,<code>ceph</code>等等.相较于以前的项目,变化还是相当的大的.接触了很多新颖的东西,也趟了很多的坑.总的来说就是痛并快乐着.<br>互联网的趋势势必会席卷整个IT行业,你在哪一个垂直行业都是躲不了的.这也是件好事.就我个人而言,也比较高兴的,找到了以前学习软件的时候的那种兴奋感.<code>勿忘初心,重新学习</code>一直作为我整个2015年写在QQ签名上的座右铭.</p>
<h2 id="其他语言">其他语言</h2><p>2015年还有一个重大的变化就是我开始把眼界从JAVA的生态环境中跳出去.接触了更多的语言以及它们的一些思想.其实搞软件的不能只关注于自己的那一小块圈子,在其他语言中也有很多可以借鉴和启发你的东西,就算暂时没有,开拓开拓眼界也是好的,指不定哪天就会用上呢.</p>
<p>在年中,接触到<code>Kafka</code>的时候了解到了它是使用<code>scala</code>写的,和<code>JRuby</code>,<code>JPtyhon</code>这些类似,它是基于JVM上的一门新的语言.其实这门语言已经出来很久了,不过一直不算很广泛.这次在<code>Kafka</code>和<code>akka</code>中看到使用了<code>scala</code>,于是就去了解了一下.然后就被它的语法所吸引了,它解决了JAVA很多以前很烦琐的东西.JAVA由于一直要兼容以前版本的东西,所以这几年变化一直不大.哪怕最新的JDK1.8新增了很多的东西,但是整个体系还是在那摆着的.比如闭包的实现,完全比不上其他的语言,要实现一个闭包还需要提前的定义一个接口.而<code>scala</code>真是解决了这些的问题,它以简洁的语法漂亮的增加了我们的效率,并且还兼容了大部分的JAVA库,要知道这些JAVA库可是JAVA现在一直坐稳第一语言最大的依仗.C#语言本身其实经过这几年的发展已经比JAVA要优秀了,但是背后缺少了开源社区的支持,以及长年累月积累起来的各种库,始终在5 6名左右徘徊.因此,明年的目标就是继续学习<code>scala</code>,争取能拿<code>scala</code>写一些东西出来.</p>
<p>在年底,由于<code>codis</code>和<code>docker</code>的原因,近距离的接触到了<code>golang</code>,这个被google誉为下一代开发语言的语言.也大致的了解了一下,它的一些思想确实比较先进,比如<code>协程</code>,<code>严格的书写格式</code>等等.不过由于时间和精力的原因并未有太深入,现在还停留在大致能看懂别人的源码的程度.明年的目标是系统的学习一下<code>golang</code>.我对这门语言还是比较看好的,它从语言级别就支持多并发的特性,是比较适合于大数据高并发的系统的.</p>
<p>贯穿整年,得益于Apple对开源的态度,以及IOS9对IOS开发者真机调试的免费开放(是的,这个理由就是这么low,真的是被这个吸引了,可以自己给自己的手机开发APP了).我深入的学习了<code>Swfit</code>,这是从2012年在公司项目上使用<code>Objective-C</code>写过一个<code>MacOS</code>上的工具外,时隔3年又一次投入Apple的怀抱,这次的感觉很好.由于从大学开始就一直学习的是<code>JAVA</code>和<code>Python</code>,对于自己手动的管理内存实在是头痛.因此,信仰没有抵过现实,把<code>MacOS</code>上的工具开发完成后,就再没有接触过<code>Objective-C</code>了.<br>但是,在2014年WWDC上看了Swift的演示,我一下就被吸引了.类似于动态语言的语法,静态语言的本质,各种语法糖以及现代语言的思想,无不吸引了我.再加上年底的开源,更是把Swfit推上了一个小高潮.<br>现在Swfit已经是我第二熟悉的语言了,又时甚至会想要是JAVA有 Swfit的这个特性就好了~<br>基于Swfit,今年断断续续的写了两个完整的应用以及几个框架或代码片段.也算是入了Swift的门了.第三个应用也在筹划的阶段.明年的目标就是更加的熟悉Swift以及IOS的开发,不指望以后靠IOS吃饭,自娱自乐写点有意思的应用还是不错的.</p>
<h2 id="DevOps">DevOps</h2><p>以前在这方面接触的最多的就是 搭建了 Maven+Jenkins进行持续化集成,并且一直使用了3年.<br>今年开始涉及了云计算以及容器化技术.开始在各种云上实验各种东西.并且把Docker引入了今年公司的新项目中.Docker可以说是今年获得的最重要的技能之一.</p>
<h2 id="开源">开源</h2><p>单独把这个写出来,也是想说明现在对于开源越来越有认同感.自己也在<a href="http://git.oschina.net" target="_blank" rel="external">Git@oschina</a>以及<a href="https://github.com/sunxiang0918" target="_blank" rel="external">github.com</a>上分享了几个东西.有<code>Swift</code>的,也有<code>JAVA</code>的.其中拿来练手而写的<a href="http://git.oschina.net/xycm/ZhiHuDaily-Swift" target="_blank" rel="external">ZhiHuDaily-Swift</a>更是拿到了<code>git@OSC</code>上<code>Swift</code>分类下最高的Star数以及收到了知乎官方的电邮(当然不是法律侵权这些),这让我非常的高兴,更加的坚定了开源的决心.<br>明年的目标是希望能参与一个他人的开源项目,或是协作,或是<code>pull request</code>.现在Swift开源了,要是能在<code>Swfit</code>上留下自己的印记,那可是很值得开心的,加油!</p>
<h2 id="总结">总结</h2><p>总结今年的成长,比去年的多姿多彩,涉及了更多的方面.并且成功的进入了IOS Programmer的世界,也算是圆了资深脑残果粉的一个心愿.其他技术方面,很多东西都只能算是入了个门,更多的精彩和挑战还在后面.<br><strong>期待2016!再见2015!</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="再见2015">再见2015</h1><p>时光匆匆,转眼2015年就要过去了.2015开年的事情仿佛刚过去没有多久,2016又要来了.今年是忙碌的一年,不管是在生活上还是在工作上都发生了很多的变化.本文将回顾一下作为程序猿的自己在今年的成长,做一个简单的总结.</p>
<h2 id="博客">博客</h2><p>今年年中,自己在github.io上搭建了自己的个人博客,并且把以前的一些文章从evernote上迁移了过来.以前,从来没有写博客的习惯,一个是觉得写博客比较麻烦,因为可能不是自己一个人看,不能像在evernote上那样随便乱写.还有一个就是觉得东西有个地方保存就好了,没必要分享出来.不过,最后还是决定把博客搭建出来,既能锻炼自己的书写,也能强迫自己把东西记录的更规范更细致,最后也能分享给有需要的人.从事了5年的软件行业了,渐渐的开始理解开源人的心态了,也从各位开源的大神中得到了很多的好处,是时候把自己力所能及的东西分享出来了.</p>
<p>今年一共写了<a href="/archives/2015">43篇博客</a>,从数量上来说不算多.主要涉及的是<code>JAVA研发体系</code>以及<code>Swift</code>方面的内容.<br>对于明年,目标是60篇博客,内容上更有深度与广度.希望能够达成.</p>]]>
    
    </summary>
    
      <category term="其他" scheme="http://sunxiang0918.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<转>Swift-LOG输出]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/30/Swift-LOG%E8%BE%93%E5%87%BA/"/>
    <id>http://sunxiang0918.github.io/2015/12/30/Swift-LOG输出/</id>
    <published>2015-12-30T14:17:30.000Z</published>
    <updated>2015-12-30T14:23:03.000Z</updated>
    <content type="html"><![CDATA[<h1 id="LOG输出">LOG输出</h1><p>Log 输出是程序开发中很重要的组成部分，虽然它并不是直接的业务代码，但是却可以忠实地反映我们的程序是如何工作的，以及记录程序运行的过程中发生了什么。</p>
<p>在 Swift 中，最简单的输出方法就是使用 print，在我们关心的地方输出字符串和值。但是这并不够，试想一下当程序变得非常复杂的时候，我们可能会输出很多内容，而想在其中寻找到我们希望的输出其实并不容易。我们往往需要更好更精确的输出，这包括输出这个 log 的文件，调用的行号以及所处的方法名字等等。</p>
<p>我们当然可以在 print 的时候将当前的文件名字和那些必要的信息作为参数同我们的消息一起进行打印：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.swift</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"文件名:Test.swift, 方法名:method，这是一条输出"</span>)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是这显然非常麻烦，每次输入文件名和方法名不说，随着代码的改变，这些 Log 的位置也可能发生改变，这时我们可能还需要不断地去维护这些输出，代价实在太大。</p>
<p>在 Swift 中，编译器为我们准备了几个很有用的编译符号，用来处理类似这样的需求，它们分别是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">FILE</td>
<td style="text-align:left">String</td>
<td style="text-align:left">包含这个符号的文件的路径</td>
</tr>
<tr>
<td style="text-align:left">LINE</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">符号出现处的行号</td>
</tr>
<tr>
<td style="text-align:left">COLUMN</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">符号出现处的列</td>
</tr>
<tr>
<td style="text-align:left">FUNCTION</td>
<td style="text-align:left">String</td>
<td style="text-align:left">包含这个符号的方法名字</td>
</tr>
</tbody>
</table>
<p>因此，我们可以通过使用这些符号来写一个好一些的 Log 输出方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printLog</span><span class="generics">&lt;T&gt;</span><span class="params">(message: T,  </span><br><span class="line">                    file: String = <span class="keyword">__FILE__</span>,</span><br><span class="line">                  method: String = <span class="keyword">__FUNCTION__</span>,</span><br><span class="line">                    line: Int = <span class="keyword">__LINE__</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\((file <span class="keyword">as</span> NSString)</span>.lastPathComponent)[<span class="subst">\(line)</span>], <span class="subst">\(method)</span>: <span class="subst">\(message)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，在进行 log 的时候我们只需要使用这个方法就能完成文件名，行号以及方法名的输出了。最棒的是，我们不再需要对这样的输出进行维护，无论在哪里它都能正确地输出各个参数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.swift</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    printLog(<span class="string">"这是一条输出"</span>)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Test.swift[62], method(): 这是一条输出</span></span><br></pre></td></tr></table></figure>
<p>另外，对于 log 输出更多地其实是用在程序开发和调试的过程中的，过多的输出有可能对运行的性能造成影响。在 Release 版本中关闭掉向控制台的输出也是软件开发中一种常见的做法。如果我们在开发中就注意使用了统一的 log 输出的话，这就变得非常简单了。使用<a href="http://swifter.tips/condition-compile" target="_blank" rel="external">条件编译</a>的方法，我们可以添加条件，并设置合适的编译配置，使 printLog 的内容在 Release 时被去掉，从而成为一个空方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printLog</span><span class="generics">&lt;T&gt;</span><span class="params">(message: T,  </span><br><span class="line">                    file: String = <span class="keyword">__FILE__</span>,</span><br><span class="line">                  method: String = <span class="keyword">__FUNCTION__</span>,</span><br><span class="line">                    line: Int = <span class="keyword">__LINE__</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\((file <span class="keyword">as</span> NSString)</span>.lastPathComponent)[<span class="subst">\(line)</span>], <span class="subst">\(method)</span>: <span class="subst">\(message)</span>"</span>)</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新版本的 LLVM 编译器在遇到这个空方法时，甚至会直接将这个方法整个去掉，完全不去调用它，从而实现零成本。</p>
<hr>
<p>原文链接: <a href="http://swifter.tips/log/" target="_blank" rel="external">http://swifter.tips/log/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="LOG输出">LOG输出</h1><p>Log 输出是程序开发中很重要的组成部分，虽然它并不是直接的业务代码，但是却可以忠实地反映我们的程序是如何工作的，以及记录程序运行的过程中发生了什么。</p>
<p>在 Swift 中，最简单的输出方法就是使用 print，在我们关心的地方输出字符串和值。但是这并不够，试想一下当程序变得非常复杂的时候，我们可能会输出很多内容，而想在其中寻找到我们希望的输出其实并不容易。我们往往需要更好更精确的输出，这包括输出这个 log 的文件，调用的行号以及所处的方法名字等等。</p>
<p>我们当然可以在 print 的时候将当前的文件名字和那些必要的信息作为参数同我们的消息一起进行打印：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.swift</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"文件名:Test.swift, 方法名:method，这是一条输出"</span>)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Swift中使用随机数]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/27/%E5%9C%A8Swift%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://sunxiang0918.github.io/2015/12/27/在Swift中使用随机数/</id>
    <published>2015-12-27T12:27:49.000Z</published>
    <updated>2015-12-27T13:11:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="在Swift中使用随机数">在Swift中使用随机数</h1><p>在我们的开发过程中,有时需要产生一些随机数.而Swift中并没有像JAVA中一样提供一个专门的<code>Random</code>类来集中的生成随机数.<br>在Swift中,提供了几个全局的函数来生成随机数.一个是<code>random()</code>,还有一个是<code>arc4random()</code>,以及专门生成浮点的<code>srand48(Int)</code>和<code>drand48()</code>.<br>这些方法并没有进行封装,其实并不符合面向对象的思想.并且如果想要限制生成的随机数的最大最小值也不得行.因此,我们有必要对他们进行一个封装.</p>
<a id="more"></a>
<h2 id="arc4random()">arc4random()</h2><p>arc4random 是一个非常优秀的随机数算法,它会返回给我们一个任意的整数,如果我们想要在某一个范围里的话,做一次取模运算取余数就可以了.但是由于<code>arc4random()</code>函数返回的值无论上什么平台上都是返回一个<code>UInt32</code>(无符号32位整数)的值.因此,在32位的平台上进行<code>Int(arc4random())</code>转换的话,就有一半的几率出现转换越界,这就会造成程序的崩溃.</p>
<p>因此,在这种情况下,我们可以使用<code>arc4random_uniform</code>这个改良的<code>arc4random</code>函数:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">arc4random_uniform</span><span class="params">(<span class="number">_</span>: UInt32)</span></span> -&gt; <span class="type">UInt32</span></span><br></pre></td></tr></table></figure>
<p>这个函数接收一个UInt32的数字n作为输入,返回一个0到n-1之间的随机数.那么,只要我们传入的n不超过Int的范围,就可以避免像上面一样的转换越界的问题了.</p>
<p>因此,我们Int的随机数生成函数可以写成这样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: Int = <span class="number">0</span>, <span class="number">_</span> upper: Int = Int.<span class="built_in">max</span>)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lower + <span class="type">Int</span>(arc4random_uniform(<span class="type">UInt32</span>(upper - lower + <span class="number">1</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(range: Range&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random(range.startIndex, range.endIndex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码使用了<code>扩展</code>,对Int类型增加了一个扩展,并实现了<code>random(lower: Int = 0, _ upper: Int = Int.max) -&gt; Int</code>和<code>random(range: Range&lt;Int&gt;) -&gt; Int</code>两个方法.这样,如果我们需要一个整数的随机数的话,就可以这样调用了:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Int</span>.random()</span><br><span class="line"><span class="type">Int</span>.random(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"><span class="type">Int</span>.random(<span class="number">20</span>...<span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<p>这里不得不夸一下<code>扩展</code>机制,真心方便.它可以不修改原有类的源码的情况下,给这个类增加新的功能.这就大大的增加了编写代码的方便.毕竟很多时候最开始时是考虑不周全的,我们并不能给某个类增加所有的方法,到后面进行修改的时候,就必然牵涉到修改源码.如果源码是自己写的还好,如果源码不是自己写的或者根本就没有源码了.那么给这个类增加方法就非常的不方便了.JAVA中有大量的<code>XXXXUtils</code>类,其实干的就是这个事情,比如<code>StringUtils</code>,由于JAVA中的<code>String</code>类是不能继承和修改的,因此就只有定义了一个工具类,里面就是对String做了一堆的扩展.调用的时候更不符合面向对象的思想.全是<code>StringUtils.xxxx(sourceStr,destStr)</code>这样的.</p>
<h2 id="其他类型的随机数">其他类型的随机数</h2><p>除了整数的随机数以外,浮点的随机数也是很常用的.因此我们同样可以对浮点数进行扩展.这里就有两种思路,第一种是继续使用<code>arc4random()</code>函数,把生成的随机整数转换成为浮点数.还有一种就是调用<code>srand48(Int)</code>和<code>drand48()</code>直接生成随机浮点数.这两个方案都是差不多的,不过由于每次调用<code>drand48()</code>前都需要调用<code>srand48(Int)</code>设置随机初始化的种子,因此我个人更倾向于使用<code>arc4random()</code>.于是就有以下的方法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">Bool</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>.random(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">Double</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// SwiftRandom extension</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: Double = <span class="number">0</span>, <span class="number">_</span> upper: Double = <span class="number">100</span>)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">Double</span>(arc4random()) / <span class="number">0xFFFFFFFF</span>) * (upper - lower) + lower</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">Float</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// SwiftRandom extension</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: Float = <span class="number">0</span>, <span class="number">_</span> upper: Float = <span class="number">100</span>)</span></span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">Float</span>(arc4random()) / <span class="number">0xFFFFFFFF</span>) * (upper - lower) + lower</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">extension</span> <span class="title">CGFloat</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// SwiftRandom extension</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: CGFloat = <span class="number">0</span>, <span class="number">_</span> upper: CGFloat = <span class="number">1</span>)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGFloat</span>(<span class="type">Float</span>(arc4random()) / <span class="type">Float</span>(<span class="type">UINT32_MAX</span>)) * (upper - lower) + lower</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样集中常用数据类型的随机数的生成就都有了,并且使用起来也非常的方便.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bool</span>.random()</span><br><span class="line"><span class="type">Double</span>.random(<span class="number">1.5</span>,<span class="number">10.8</span>)</span><br><span class="line"><span class="type">Float</span>.random()</span><br><span class="line"><span class="type">CGFloat</span>.random()</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="在Swift中使用随机数">在Swift中使用随机数</h1><p>在我们的开发过程中,有时需要产生一些随机数.而Swift中并没有像JAVA中一样提供一个专门的<code>Random</code>类来集中的生成随机数.<br>在Swift中,提供了几个全局的函数来生成随机数.一个是<code>random()</code>,还有一个是<code>arc4random()</code>,以及专门生成浮点的<code>srand48(Int)</code>和<code>drand48()</code>.<br>这些方法并没有进行封装,其实并不符合面向对象的思想.并且如果想要限制生成的随机数的最大最小值也不得行.因此,我们有必要对他们进行一个封装.</p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ELK初实践]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/21/ELK%E5%88%9D%E5%AE%9E%E8%B7%B5/"/>
    <id>http://sunxiang0918.github.io/2015/12/21/ELK初实践/</id>
    <published>2015-12-21T12:07:47.000Z</published>
    <updated>2015-12-22T03:00:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ELK(ElasticSearch+Logstash+Kiabana)初实践">ELK(ElasticSearch+Logstash+Kiabana)初实践</h1><p>ELK是由<a href="https://www.elastic.co" target="_blank" rel="external">elastic</a>公司维护的开源的实时日志采集与分析三剑客.它能够在分布式的架构下,使用<a href="https://www.elastic.co/products/logstash" target="_blank" rel="external">Logstash</a>实时的采集各种不同来源的日志,并通过清洗/ETL转换,形成有意义的数据,存入到<a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="external">ElasticSearch</a>全文检索引擎中,再通过<a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">Kiabana</a>呈现出来.<br>我们可以通过这套开源系统实时的了解服务器的软硬件信息,业务负载,错误异常等等.同时也能统一收集日志并做归档处理.当管理的机器非常多的时候这就非常的有意义了.</p>
<p><img src="/img/2015/12/21/1.png" alt=""></p>
<a id="more"></a>
<h2 id="ElasticSearch">ElasticSearch</h2><p>Elasticsearch是一个基于<a href="https://lucene.apache.org/core/" target="_blank" rel="external">Apache Lucene(TM)</a>的开源搜索引擎.与Solr类似,它隐藏了Lucene的复杂性.并提供大量分布式的功能.使用者能够很简单的就构建起一个全文检索引擎,并提供出<code>Restful</code>的API.而不需要编写任何的代码.</p>
<h3 id="安装">安装</h3><p>Elasticsearch的安装非常的简单,它只依赖JAVA的运行环境.最简的运行方式就是直接下载它编译好了的压缩包.然后解压即可用.<br>(默认JAVA运行环境已经配置完成)</p>
<ol>
<li>从<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="external">https://www.elastic.co/downloads/elasticsearch</a>下载最新的运行包.</li>
<li>使用<code>tar -xvf elasticsearch-2.1.0.tar.gz</code>解压</li>
<li>在<code>elasticsearch-2.1.0</code>文件夹下执行<code>./bin/elasticsearch</code></li>
<li><p>在浏览器中访问<a href="http://127.0.0.1:9200" target="_blank" rel="external">http://127.0.0.1:9200</a>.如果得到一个JSON的结果,就表明ES启动成功</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> "<span class="attribute">name</span>" : <span class="value"><span class="string">"Hood"</span></span>,</span><br><span class="line"> "<span class="attribute">cluster_name</span>" : <span class="value"><span class="string">"elasticsearch"</span></span>,</span><br><span class="line"> "<span class="attribute">version</span>" : <span class="value">&#123;</span><br><span class="line">   "<span class="attribute">number</span>" : <span class="value"><span class="string">"2.1.0"</span></span>,</span><br><span class="line">   "<span class="attribute">build_hash</span>" : <span class="value"><span class="string">"72cd1f1a3eee09505e036106146dc1949dc5dc87"</span></span>,</span><br><span class="line">   "<span class="attribute">build_timestamp</span>" : <span class="value"><span class="string">"2015-11-18T22:40:03Z"</span></span>,</span><br><span class="line">   "<span class="attribute">build_snapshot</span>" : <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">   "<span class="attribute">lucene_version</span>" : <span class="value"><span class="string">"5.3.1"</span></span><br><span class="line"> </span>&#125;</span>,</span><br><span class="line"> "<span class="attribute">tagline</span>" : <span class="value"><span class="string">"You Know, for Search"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你想要一个监控界面来控制和了解ES的话,可以下载<a href="https://www.elastic.co/products/marvel" target="_blank" rel="external">marvel</a>.<code>Marvel</code>是Elasticsearch的管理和监控工具，在开发环境下免费使用.它包含了一个叫做Sense的交互式控制台，使用户方便的通过浏览器直接与Elasticsearch进行交互.不过这个东西不能进行商用.另外一个可视化的插件是<a href="https://github.com/mobz/elasticsearch-head.git" target="_blank" rel="external">Header</a>,同样是一个ES的管理和监控的工具,不过它的功能稍微要少一些.</p>
</li>
<li>安装<code>Header</code>的话非常简单,直接在es的<code>bin</code>目录中执行<code>sudo ./plugin install mobz/elasticsearch-head</code>即可,它会自动的下载并解压安装包到<code>plugins</code>目录.</li>
<li><p>安装完成后,在浏览器中浏览<a href="http://localhost:9200/_plugin/head/" target="_blank" rel="external">http://localhost:9200/_plugin/head/</a></p>
<p> <img src="/img/2015/12/21/2.png" alt="Header主界面"></p>
</li>
<li><p>安装<code>Marvel</code>稍微要麻烦一点,最新的<code>Marvel2.X</code>需要依赖<code>Kiabana</code>了.首先需要安装<code>License</code>模块:<code>./plugin install license</code>,然后在ES中安装<code>marvel-agent</code>:<code>./plugin install marvel-agent</code>,最后需要在<code>Kiabana</code>中安装<code>marvel</code>:<code>./kibana plugin --install elasticsearch/marvel/latest</code></p>
</li>
<li><p>安装完成后,启动<code>Elasticsearch</code>和<code>Kiabana</code>.然后在浏览器中浏览<a href="http://localhost:5601/app/marvel" target="_blank" rel="external">http://localhost:5601/app/marvel</a>即可.</p>
<p> <img src="/img/2015/12/21/3.png" alt="Marvel主界面"></p>
</li>
</ol>
<p>剩下的<code>Elasticsearch</code>的其他使用,我会另开博文来讲述,这里主要是讲ELK的整合使用~</p>
<h2 id="Kiabana">Kiabana</h2><p>Kibana是一个基于浏览器页面的<code>Elasticsearch</code>前端展示工具,提供了非常牛逼的图表和表现能力。Kibana全部使用HTML语言和Javascript编写的.因此可以部署到任意的Web容器中去.当然,官网上下载的安装包中已经内置了一个Web容器,直接运行即可.</p>
<h3 id="安装-1">安装</h3><ol>
<li>从<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="external">https://www.elastic.co/downloads/kibana</a>下载最新的运行包.</li>
<li>使用<code>tar -xvf kibana-4.3.0-darwin-x64.tar.gz</code>解压</li>
<li><p>修改<code>/config/kibana.yml</code>文件,指定<code>Elasticsearch</code>的访问地址:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The Elasticsearch instance to use for all your queries.</span></span><br><span class="line">elasticsearch.url: <span class="string">"http://localhost:9200"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>kibana-4.3.0-darwin-x64</code>文件夹下执行<code>./kibana</code>即可. 他会自动的在ES中创建它自己所需的索引文件.</p>
</li>
<li><p>在浏览器中打开<a href="http://127.0.0.1:5601/app/kibana" target="_blank" rel="external">http://127.0.0.1:5601/app/kibana</a>即可.这个时候就可以在界面的<code>Discover</code>中进行索引的查询了.</p>
<p> <img src="/img/2015/12/21/4.png" alt=""></p>
</li>
<li><p>同时,也可以使用<code>Visualize</code>功能,建立不同的报表.我们对日志的处理也主要就是通过记录的不同维度,建立不同的图表.然后订阅到<code>Dashboard</code>中.这样就能对日志进行实时的监控和分析.</p>
<p> <img src="/img/2015/12/21/5.png" alt=""></p>
</li>
</ol>
<h2 id="Logstash">Logstash</h2><p>Logstash是一个应用程序日志、事件的传输、处理、管理和搜索的平台.你可以用它来统一对应用程序日志进行收集管理.这点上它的功能其实和<code>Flume</code>是有点类似的.<br><img src="/img/2015/12/21/6.png" alt=""></p>
<h3 id="安装-2">安装</h3><p>Logstash是使用JRuby写的,因此需要依赖JAVA的运行环境.</p>
<ol>
<li>从<a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="external">https://www.elastic.co/downloads/logstash</a>下载最新的运行包.</li>
<li>使用<code>tar -xvf logstash-2.1.0.tar.gz</code>解压</li>
<li>在<code>logstash-2.1.0</code>文件夹下执行<code>./bin/logstash agent -f logstash.conf</code>即可.</li>
</ol>
<p>这里主要是使用了<code>agent</code>模式运行,采集日志的配置记录到<code>logstash.conf</code>文件中. 接下来就介绍一下<code>logstash.conf</code>这个文件.</p>
<h3 id="配置">配置</h3><p>Logstash的日志采集过程主要有三个部分,分别是<code>Input</code> <code>Filter</code>和<code>Output</code>.对应了日志的收集,日志的整理和日志的输出,同时在Filter的前后允许配置<code>Codec</code>也就是编解码.每一个过程都提供了非常多的插件来辅助处理.具体有哪些插件可以访问<a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html" target="_blank" rel="external">Input</a>,<a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html" target="_blank" rel="external">Filter</a>,<a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html" target="_blank" rel="external">Output</a>以及<a href="https://www.elastic.co/guide/en/logstash/current/codec-plugins.html" target="_blank" rel="external">Codec</a>.</p>
<p>比如最简单的一个conf文件为:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input &#123; stdin &#123; &#125; &#125;</span><br><span class="line">output &#123;</span><br><span class="line">   stdout &#123; codec=&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它指定了日志采集的输入源为命令行输入,不经过任何的处理,输出源为控制台输出,输出的时候编码为ruby的debug格式</p>
<p>执行这个采集的效果就是:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/logstash-2.1.0/bin/logstash agent -f logstash-simple.conf</span></span><br><span class="line">Logstash startup completed</span><br><span class="line">hello World </span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">"message"</span> =&gt; <span class="string">"helloWorld"</span>,</span><br><span class="line">     <span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line">   <span class="string">"@timestamp"</span> =&gt; <span class="string">"2015-12-14T12:08:28.688Z"</span>,</span><br><span class="line">         <span class="string">"host"</span> =&gt; <span class="string">"localhost"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在再来看一个复杂点的例子,这个是我们测试环境抓取业务日志的conf配置:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">    	type =&gt; <span class="string">"my_app"</span></span><br><span class="line">        path =&gt; <span class="string">"/Applications/tomcat7/logs/fpLog/ALL/fpServer.log"</span></span><br><span class="line">        tags =&gt; [ <span class="string">"my_app"</span>, <span class="string">"logback"</span> ]</span><br><span class="line">        sincedb_path =&gt; <span class="string">"./sincedb"</span>	<span class="comment"># sincedb会记录日志文件的inode信息及当前读了多少bytes,以确保logstash停掉重启后可接着之前的位置继续收集日志</span></span><br><span class="line">		sincedb_write_interval =&gt; <span class="number">10</span>	<span class="comment"># 写sincedb的频率,logstash停止时会自动将当前收集位置记录到sincedb</span></span><br><span class="line">		<span class="comment">#start_position =&gt; "beginning"	# 注意,一定要设为beginning,默认是end.因为如果在logstash停掉期间,日志被rotate了两次,意味着有一整个日志文件是完全没有sincedb记录,logstash重启后就直接从start_position开始读,所以一定要设置为beginning.对于有sincedb记录的,logstash会接着停掉时的sincedb记录的位置继续收集日志</span></span><br><span class="line">		discover_interval =&gt; <span class="number">10</span></span><br><span class="line">		stat_interval =&gt; <span class="number">1</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> [message] =~ <span class="string">"^\[.+?\]"</span> &#123;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		drop&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	grok &#123;</span><br><span class="line">		match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"\[(?&lt;log_id&gt;.*?)\] (?&lt;log_level&gt;\w+)  %&#123;TIMESTAMP_ISO8601:log_time&#125; (?&lt;system&gt;\w+) \[(?&lt;thread_name&gt;.+?)\] (?&lt;class_name&gt;.+)\- (?&lt;content&gt;.*)"</span> &#125;</span><br><span class="line">		remove_field =&gt; [ <span class="string">"message"</span> ]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	date &#123;</span><br><span class="line">    	match =&gt; [ <span class="string">"log_time"</span>, <span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>, <span class="string">"ISO8601"</span> ]</span><br><span class="line">    	timezone =&gt; <span class="string">"Asia/Shanghai"</span></span><br><span class="line">    	target =&gt; <span class="string">"@timestamp"</span></span><br><span class="line">    	remove_field =&gt; [ <span class="string">"log_time"</span> ]</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">if</span> [content] =~ <span class="string">"^\&#123;.*?\&#125;$"</span> &#123;</span><br><span class="line">  	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  		drop&#123;&#125;</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">	json &#123;</span><br><span class="line">        source =&gt; <span class="string">"content"</span></span><br><span class="line">        target =&gt; <span class="string">"jsoncontent"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">	stdout &#123;&#125;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">  		hosts =&gt; <span class="string">"localhost:9200"</span></span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>先来看看Input{}. 他使用了<code>file</code>插件,从文件读取读取日志,并且给日志增加了一个Type属性用于区别来源.同时,1秒一次的监控日志的变化,把已扫描了的日志偏移量记录到<code>./sincedb</code>中去.</li>
<li>接下来就是filter{}了.<ul>
<li>一来,使用if语句,正则匹配<code>[]</code>开头的日志行,这个符合这个正则的日志才予以保留,其他的日志直接删除掉.</li>
<li>而后使用了grok插件,这个插件最重要的功能就是进行ETL转换,把非结构化的日志,转换成结构化的对象. 它使用正则表达式,以及<code>&lt;xxxx&gt;</code>的形式用来匹配和挖取有用的变量.</li>
<li>比如这个例子中的:<code>\[(?&lt;log_id&gt;.*?)\] (?&lt;log_level&gt;\w+)  %{TIMESTAMP_ISO8601:log_time} (?&lt;system&gt;\w+) \[(?&lt;thread_name&gt;.+?)\] (?&lt;class_name&gt;.+)\- (?&lt;content&gt;.*)</code>就是用来匹配<code>[1450580425858_394] INFO  2015-12-20 11:00:25.873 XXXXXX [myScheduler-4] c.s.j.s.c.c.AbstractTaskDispatcher- {&quot;site&quot;:&quot;unknown_site&quot;,&quot;tags&quot;:[&quot;unknown_tag&quot;],&quot;throwable&quot;:&quot;&quot;,&quot;detail&quot;:&quot;扫描模式,fileanalysis组件调度器,开始恢复上次待分配的任务.isChangePriority=false&quot;,&quot;time&quot;:&quot;2015-12-20 11:00:25.873&quot;,&quot;system&quot;:&quot;XXXXXX&quot;,&quot;level&quot;:&quot;INFO&quot;,&quot;source&quot;:&quot;unknown_source&quot;,&quot;extends&quot;:{},&quot;tool&quot;:&quot;unknown_tool&quot;,&quot;user&quot;:&quot;unknown_user&quot;,&quot;client_ip&quot;:&quot;unknown_ip&quot;,&quot;ip&quot;:&quot;172.16.129.7&quot;}</code>日志的.</li>
<li>通过grok插件的处理,这个时候日志事件就变为一个结构化的数据了.针对这个数据我们就可以进行很多其他的处理.</li>
<li>下面使用了<code>date</code>插件来处理日期.它定义了日期的标准格式,以及时区.然后把解析出来的时间赋值给模型上的某个字段.</li>
<li>接下来,再次使用<code>if</code>语句,对模型中的<code>content</code>字段再次进行清洗,对于不是JSON格式的日志,直接删除.</li>
<li>最后,使用<code>json</code>插件,把<code>content</code>字段JSON化.<br>最后使用output{}把转换好的日志输出到两个地方,一个是控制台,另外一个就是前文所说的<code>elasticsearch</code>了.</li>
</ul>
</li>
</ul>
<p>当我们执行这个日志采集Agent后,他就会不断的监控日志文件.一旦日志文件有变化,他就会采集到,并做处理,然后发送到es中. 最后我们就可以使用kibana来进行查看了.</p>
<h2 id="总结">总结</h2><p>本文主要介绍了ELK的作用,以及安装. 以一个简单的配置例子,介绍了ELK整合的常用方式以及效果.<br>通过ELK,可以把以前很麻烦的分布式日志的收集和整理简单化了.<br>更高级的功能,随着我使用的深入,会继续更新博文.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="ELK(ElasticSearch+Logstash+Kiabana)初实践">ELK(ElasticSearch+Logstash+Kiabana)初实践</h1><p>ELK是由<a href="https://www.elastic.co">elastic</a>公司维护的开源的实时日志采集与分析三剑客.它能够在分布式的架构下,使用<a href="https://www.elastic.co/products/logstash">Logstash</a>实时的采集各种不同来源的日志,并通过清洗/ETL转换,形成有意义的数据,存入到<a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a>全文检索引擎中,再通过<a href="https://www.elastic.co/products/kibana">Kiabana</a>呈现出来.<br>我们可以通过这套开源系统实时的了解服务器的软硬件信息,业务负载,错误异常等等.同时也能统一收集日志并做归档处理.当管理的机器非常多的时候这就非常的有意义了.</p>
<p><img src="/img/2015/12/21/1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="大数据" scheme="http://sunxiang0918.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="日志挖掘" scheme="http://sunxiang0918.github.io/tags/%E6%97%A5%E5%BF%97%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<转>如何关闭OSX 10.11 SIP]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/10/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%ADOSX-10-11-SIP/"/>
    <id>http://sunxiang0918.github.io/2015/12/10/如何关闭OSX-10-11-SIP/</id>
    <published>2015-12-10T14:27:09.000Z</published>
    <updated>2015-12-10T14:35:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="如何关闭OSX_10-11_SIP_(System_Integrity_Protection)">如何关闭OSX 10.11 SIP (System Integrity Protection)</h1><p>2015.10.8 01:50更新：实在忍不住，看完池老师的公众号，就升级了。问题果然是有的，池老师你还我睡眠时间，又整到凌晨……</p>
<ol>
<li>关于Homebrew的安装参考链接</li>
<li>Cocoapods使用这个命令安装sudo gem install -n /usr/local/bin cocoapods原因是原来使用的/usr/bin这个目录被rootless保护了，那个-n参数作用是把二进制文件安装到指定目录，参考stackoverflow解决Cocoapods无法安装 注意stackoverflow中提到的使用这个参数「rootless=0」就不要用了，该方法apple官方已经封了，要停用rootless就用我下述的方法（也是官方推荐方法）</li>
<li>……暂时就这些，有问题在更新，或者留言给我你的问题，我看看能不能解决</li>
</ol>
<p>注意：SIP功能是Apple在OSX上推出的系统完整性保护功能，对于普通MAC用户来说是一项安全保护功能，如果不了解他的作用请不要随意关闭，对于开发者来说，因为会使用到很多的第三方辅助工具（例如：Cocoapods、Homebrew），而这些工具可能会修改系统目录，在这些工具未推出适应OSX 10.11的版本时，有必要临时关闭SIP以确保开发工具的使用。</p>
<p>建议：普通用户随意，开发者目前请谨慎升级，如果你已经升级，相信你可能需要恶心一阵了，因为有些工具没有更新不能正常使用或部分功能失效，甚至在关闭SIP后也有点问题，当然你只要耐心等待软件更新和网友的智慧或是自己动手丰衣足食，很多问题还是可以解决的。</p>
<a id="more"></a>
<ol>
<li><p><strong>进入RecoveryHD</strong><br>开机按住<code>Option</code>键在出现的启动选择菜单中选择<code>RecoveryHD</code>进入恢复模式</p>
</li>
<li><p><strong>使用csrutil命令</strong><br>打开终端Terminal，键入<code>csrutil</code>可以显示该命令的使用方法</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">usage: csrutil &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">Modify the System Integrity Protection configuration. All configuration changes apply to the entire machine.</span><br><span class="line">Available commands:</span><br><span class="line"></span><br><span class="line">    clear</span><br><span class="line">        Clear the existing configuration. Only available <span class="keyword">in</span> Recovery OS.</span><br><span class="line">    <span class="built_in">disable</span></span><br><span class="line">        Disable the protection on the machine. Only available <span class="keyword">in</span> Recovery OS.</span><br><span class="line">    <span class="built_in">enable</span></span><br><span class="line">        Enable the protection on the machine. Only available <span class="keyword">in</span> Recovery OS.</span><br><span class="line">    status</span><br><span class="line">        Display the current configuration.</span><br><span class="line"></span><br><span class="line">    netboot</span><br><span class="line">        add &lt;address&gt;</span><br><span class="line">            Insert a new IPv4 address <span class="keyword">in</span> the list of allowed NetBoot sources.</span><br><span class="line">        list</span><br><span class="line">            Print the list of allowed NetBoot sources.</span><br><span class="line">        remove &lt;address&gt;</span><br><span class="line">            Remove an IPv4 address from the list of allowed NetBoot sources.</span><br></pre></td></tr></table></figure>
<p> 可以看到在正常系统模式下中仅可以用status命令查询SIP状态</p>
</li>
<li><p><strong>常用参数</strong></p>
<ul>
<li>clear：清除配置设置，等同于完全开启SIP(<code>仅在恢复模式下有效</code>)</li>
<li>disable：关闭SIP(<code>仅在恢复模式下有效</code>)</li>
<li>enable：开启SIP(<code>仅在恢复模式下有效</code>)</li>
<li>status：查询SIP状态</li>
</ul>
</li>
<li><p><strong>常用参数进阶</strong><br>除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil <span class="built_in">enable</span> [--without kext|fs|debug|dtrace|nvram] [--no-internal]</span><br></pre></td></tr></table></figure>
<p> 单项使用：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo csrutil <span class="built_in">enable</span> –without fs：Filesystem Protections <span class="built_in">disable</span></span><br><span class="line">sudo csrutil <span class="built_in">enable</span> –without kext：Kext Signing <span class="built_in">disable</span></span><br><span class="line">sudo csrutil <span class="built_in">enable</span> –without debug：Debugging Restrictions <span class="built_in">disable</span></span><br><span class="line">sudo csrutil <span class="built_in">enable</span> –without nvram：NVRAM Protections <span class="built_in">disable</span></span><br><span class="line">sudo csrutil <span class="built_in">enable</span> –without dtrace：DTrace Restrictions <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>
<p> 组合使用：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo csrutil <span class="built_in">enable</span> –without kext –without fs：Filesystem Protections and Kext Signing are disabled</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>更多详情请参考：<br><a href="http://cms.35g.tw/coding/關閉-osx-10-11-sip-system-integrity-protection-功能/zh-hans/" target="_blank" rel="external">可丁丹尼@一路往前走2.0</a><br><a href="https://pikeralpha.wordpress.com/2015/08/19/csrutil-updated/" target="_blank" rel="external">csrutil updated in DP7</a><br><a href="http://www.idelta.info/archives/sip-rootless-internal-in-el-capitan/" target="_blank" rel="external">SIP/Rootless Internal in El Capitan</a></p>
<hr>
<p>原文链接:<a href="http://www.jianshu.com/p/0572336a0771" target="_blank" rel="external">http://www.jianshu.com/p/0572336a0771</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="如何关闭OSX_10-11_SIP_(System_Integrity_Protection)">如何关闭OSX 10.11 SIP (System Integrity Protection)</h1><p>2015.10.8 01:50更新：实在忍不住，看完池老师的公众号，就升级了。问题果然是有的，池老师你还我睡眠时间，又整到凌晨……</p>
<ol>
<li>关于Homebrew的安装参考链接</li>
<li>Cocoapods使用这个命令安装sudo gem install -n /usr/local/bin cocoapods原因是原来使用的/usr/bin这个目录被rootless保护了，那个-n参数作用是把二进制文件安装到指定目录，参考stackoverflow解决Cocoapods无法安装 注意stackoverflow中提到的使用这个参数「rootless=0」就不要用了，该方法apple官方已经封了，要停用rootless就用我下述的方法（也是官方推荐方法）</li>
<li>……暂时就这些，有问题在更新，或者留言给我你的问题，我看看能不能解决</li>
</ol>
<p>注意：SIP功能是Apple在OSX上推出的系统完整性保护功能，对于普通MAC用户来说是一项安全保护功能，如果不了解他的作用请不要随意关闭，对于开发者来说，因为会使用到很多的第三方辅助工具（例如：Cocoapods、Homebrew），而这些工具可能会修改系统目录，在这些工具未推出适应OSX 10.11的版本时，有必要临时关闭SIP以确保开发工具的使用。</p>
<p>建议：普通用户随意，开发者目前请谨慎升级，如果你已经升级，相信你可能需要恶心一阵了，因为有些工具没有更新不能正常使用或部分功能失效，甚至在关闭SIP后也有点问题，当然你只要耐心等待软件更新和网友的智慧或是自己动手丰衣足食，很多问题还是可以解决的。</p>]]>
    
    </summary>
    
      <category term="MAC" scheme="http://sunxiang0918.github.io/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nutch2.3 安装与部署]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/08/Nutch2-3-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://sunxiang0918.github.io/2015/12/08/Nutch2-3-安装与部署/</id>
    <published>2015-12-08T14:15:32.000Z</published>
    <updated>2015-12-08T15:26:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Nutch2-3_安装与部署">Nutch2.3 安装与部署</h1><p><a href="http://nutch.apache.org" target="_blank" rel="external">Nutch</a>是由JAVA开发的开源的全文检索引擎.不过更多的被用来当成Web爬虫来使用.现在Nutch分为了1.x和2.x两个版本在维护.而这两个版本的最主要的区别在于底层存储的抽象.1.x版本是基于Hadoop架构的,底层存储只能使用HDFS.而2.x版本通过<a href="http://gora.apache.org" target="_blank" rel="external">Apache Gora</a>对底层存储做了抽象,能访问HBase,MYSQL,MongoDB,Solr,AvroStore等等.</p>
<p>但是从2.X开始,官方就只提供源码的下载了,不再提供编译后的发布版本,因此就需要我们自己去进行编译.</p>
<a id="more"></a>
<h2 id="编译">编译</h2><p>为了简便起见,我们准备底层的存储使用mongoDB. 因此,这个演示是基于 Nutch+MongoDB的.</p>
<ol>
<li><p>下载源码<br> 从官网上下载<a href="http://www.apache.org/dyn/closer.lua/nutch/2.3/apache-nutch-2.3-src.tar.gz" target="_blank" rel="external">http://www.apache.org/dyn/closer.lua/nutch/2.3/apache-nutch-2.3-src.tar.gz</a>.然后执行命令 <code>tar -xvf apache-nutch-2.3-src.tar.gz</code>进行解压.</p>
</li>
<li><p>修改<code>$NUTCH_HOME/conf/nutch-site.xml</code>,增加以下内容:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">name</span>&gt;</span>storage.data.store.class<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">value</span>&gt;</span>org.apache.gora.mongodb.store.MongoStore<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">description</span>&gt;</span>Default class for storing data<span class="tag">&lt;/<span class="title">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">name</span>&gt;</span>http.agent.name<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">value</span>&gt;</span>My Nutch Spider<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>$NUTCH_HOME/conf/gora.properties</code>,在最下面找到<code># MongoDBStore properties  #</code>,然后打开注释:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################</span></span><br><span class="line"><span class="comment"># MongoDBStore properties  #</span></span><br><span class="line"><span class="comment">############################</span></span><br><span class="line">gora.datastore.default=org.apache.gora.mongodb.store.MongoStore</span><br><span class="line">gora.mongodb.override_hadoop_configuration=<span class="literal">false</span></span><br><span class="line">gora.mongodb.mapping.file=/gora-mongodb-mapping.xml</span><br><span class="line">gora.mongodb.servers=localhost:<span class="number">27017</span></span><br><span class="line">gora.mongodb.db=mytestdatabase</span><br><span class="line"><span class="comment">#gora.mongodb.login=login</span></span><br><span class="line"><span class="comment">#gora.mongodb.secret=secret</span></span><br></pre></td></tr></table></figure>
<p> 注意,如果你的mongo数据库没有auth,最后两行需要注释掉.</p>
</li>
<li><p>修改<code>$NUTCH_HOME/ivy/ivy.xml</code>.去掉下面的注释,使用gora-hbase:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Uncomment this to use MongoDB as Gora backend. --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">dependency</span> <span class="attribute">org</span>=<span class="value">"org.apache.gora"</span> <span class="attribute">name</span>=<span class="value">"gora-mongodb"</span> <span class="attribute">rev</span>=<span class="value">"0.5"</span> <span class="attribute">conf</span>=<span class="value">"*-&gt;default"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p> 这个地方需要特别注意一下,这里虽然使用了<code>gora-mongodb-0.5</code>,但是这个版本其实是有问题的,会在后面抓取记录保存到MongoDB的时候报:<code>java.lang.IllegalArgumentException: can&#39;t serialize class
org.apache.avro.util.Utf8</code>的异常,开始折腾了我很久.最后发现了这个是<code>gora-mongodb-0.5</code>自身的一个<a href="https://issues.apache.org/jira/browse/GORA-388" target="_blank" rel="external">Bug</a>,在0.6中是被修复了的.因此,我最开始想把整个gora升级成为0.6,结果Nutch不能执行.因此,目前阶段如果你底层想要使用MongoDB进行存储的话,需要单个把<code>gora-mongodb</code>升级到<code>0.6</code>版本,而其他的不动.</p>
</li>
<li><p>接下来就是编译了,直接在<code>$NUTCH_HOME</code>根目录上执行<code>ant runtime</code>即可.<br> 但是这个速度不得不吐槽.非常的坑爹,基本上下了我3个多小时.不知道是什么原因,我平时使用JAVA的Maven环境的时候下载其实是非常的快的.但是IVY的依赖下载就非常非常非常的慢.理论上他们是同一个网络地址啊. 为了能加速那么一丢丢.可以把<code>$NUTCH_HOME/ivy/ivysettings.xml</code>中的<code>repo.maven.org</code>给替换成国内的镜像.比如:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"repo.maven.org"</span></span><br><span class="line">   <span class="attribute">value</span>=<span class="value">"http://maven.oschina.net/content/groups/public/"</span></span><br><span class="line">   <span class="attribute">override</span>=<span class="value">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p> 其他的两个不能替换,我换了以后会找不到包的.</p>
<p> 如果你的编译长时间的停在<code>[ivy:resolve] :: loading settings :: file = $NUTCH_HOME/ivy/ivysettings.xml</code>.那么你可以把进程杀了重新执行一次<code>ant runtime</code>.可能执行个十来次就能编译成功了.</p>
<p> 最终,会显示:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">job:</span><br><span class="line">     [jar] Building jar: <span class="variable">$NUTCH_HOME</span>/build/apache-nutch-<span class="number">2.3</span>.job</span><br><span class="line">runtime:</span><br><span class="line">    [copy] Copying <span class="number">1</span> file to <span class="variable">$NUTCH_HOME</span>/nutch/runtime/deploy</span><br><span class="line">    [copy] Copying <span class="number">2</span> files to <span class="variable">$NUTCH_HOME</span>/nutch/runtime/<span class="built_in">local</span>/lib</span><br><span class="line">BUILD SUCCESSFUL</span><br></pre></td></tr></table></figure>
<p> 然后会在你的<code>$NUTCH_HOME</code>目录下,创建<code>runtime</code>和<code>build</code>目录. 其中的<code>runtime</code>目录即为你编译好了的<code>Nutch2.3</code>.</p>
<p> 如果在编译过程中出现<code>Could not load definitions from resource org/sonar/ant/antlib.xml.It could not be found.</code>的警告的话,不要着急,这个错误不影响你最后的编译是否成功.如果你有强迫症,见不得有警告的话.那么可以到<a href="http://search.maven.org" target="_blank" rel="external">Maven</a>中下载<code>sonar-ant-task-2.2.jar</code>包,然后放入<code>$NUTCH_HOME/lib</code>,然后修改<code>$NTUCH_HOME/build.xml</code>即可:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Define the Sonar task if this hasn't been done in a common script --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">taskdef</span> <span class="attribute">uri</span>=<span class="value">"antlib:org.sonar.ant"</span> <span class="attribute">resource</span>=<span class="value">"org/sonar/ant/antlib.xml"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">classpath</span> <span class="attribute">path</span>=<span class="value">"$&#123;ant.library.dir&#125;"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">classpath</span> <span class="attribute">path</span>=<span class="value">"$&#123;mysql.library.dir&#125;"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">classpath</span>&gt;</span><span class="tag">&lt;<span class="title">fileset</span> <span class="attribute">dir</span>=<span class="value">"lib/"</span> <span class="attribute">includes</span>=<span class="value">"sonar*.jar"</span> /&gt;</span><span class="tag">&lt;/<span class="title">classpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">taskdef</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="部署">部署</h2><p>其实编译完成后的<code>runtime</code>文件夹就已经是一个完整的可以运行的环境了.<br>我们在这里做一个简单的测试:使用Nutch爬取<a href="http://www.cnbeta.com" target="_blank" rel="external">cnbeta</a>中的新闻文章.</p>
<ol>
<li><p>在<code>$NUTCH_HOME/runtime/local</code>下创建一个文件<code>seed.txt</code>. 里面就是需要爬取的网站,一行一个.我们在这里只写一行:<code>www.cnbeta.com</code></p>
</li>
<li><p>修改<code>$NUTCH_HOME/runtime/cong/automaton-urlfilter.txt</code>文件,这个文件就是URL的过滤.避免爬取到不需要的网站.</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># accept anything else</span></span><br><span class="line">+^http://www.cnbeta.com/$</span><br><span class="line">+^http://www.cnbeta.com/articles/\d\.htm$</span><br><span class="line"><span class="comment"># skip everything else</span></span><br><span class="line">-.</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在命令行中执行<code>$NUTCH_HOME/runtime/bin/crawl seed.txt test 2</code>.<br> 这个时候就会开始爬取目标网站了.你会看到很多的日志信息:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">	fetching http://www.cnbeta.com/topics/<span class="number">8</span>.htm (queue crawl delay=<span class="number">5000</span>ms)</span><br><span class="line"><span class="number">50</span>/<span class="number">50</span> spinwaiting/active, <span class="number">71</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">67</span> <span class="number">102</span> kb/s, <span class="number">28</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br><span class="line">fetching http://www.cnbeta.com/topics/<span class="number">464</span>.htm (queue crawl delay=<span class="number">5000</span>ms)</span><br><span class="line"><span class="number">50</span>/<span class="number">50</span> spinwaiting/active, <span class="number">72</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">67</span> <span class="number">102</span> kb/s, <span class="number">27</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br><span class="line">fetching http://www.cnbeta.com/topics/<span class="number">455</span>.htm (queue crawl delay=<span class="number">5000</span>ms)</span><br><span class="line"><span class="number">50</span>/<span class="number">50</span> spinwaiting/active, <span class="number">73</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">68</span> <span class="number">102</span> kb/s, <span class="number">26</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br><span class="line">fetching http://www.cnbeta.com/topics/<span class="number">83</span>.htm (queue crawl delay=<span class="number">5000</span>ms)</span><br><span class="line"><span class="number">49</span>/<span class="number">50</span> spinwaiting/active, <span class="number">73</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">67</span> <span class="number">0</span> kb/s, <span class="number">25</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br><span class="line"><span class="number">50</span>/<span class="number">50</span> spinwaiting/active, <span class="number">74</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">67</span> <span class="number">102</span> kb/s, <span class="number">25</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br><span class="line">fetching http://www.cnbeta.com/topics/<span class="number">444</span>.htm (queue crawl delay=<span class="number">5000</span>ms)</span><br><span class="line"><span class="number">50</span>/<span class="number">50</span> spinwaiting/active, <span class="number">75</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">68</span> <span class="number">102</span> kb/s, <span class="number">24</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br><span class="line">fetching http://www.cnbeta.com/commentrss.php (queue crawl delay=<span class="number">5000</span>ms)</span><br><span class="line"><span class="number">50</span>/<span class="number">50</span> spinwaiting/active, <span class="number">76</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">67</span> <span class="number">0</span> kb/s, <span class="number">23</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br><span class="line">fetching http://www.cnbeta.com/topics/<span class="number">197</span>.htm (queue crawl delay=<span class="number">5000</span>ms)</span><br><span class="line"><span class="number">50</span>/<span class="number">50</span> spinwaiting/active, <span class="number">77</span> pages, <span class="number">10</span> errors, <span class="number">0.2</span> <span class="number">0</span> pages/s, <span class="number">67</span> <span class="number">102</span> kb/s, <span class="number">22</span> URLs <span class="keyword">in</span> <span class="number">1</span> queues</span><br></pre></td></tr></table></figure>
<p> 等一段时间后,爬取就完成了.然后打开Mongo数据库,就会看到有一个<code>mytestdatabase</code>的库.里面有一个<code>test_webpage</code>的表,其中的东西就是爬虫爬取的内容了.随便抓取一个举例:</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">	&#123;</span><br><span class="line">  "_id": "com.cnbeta.www:http/articles/447355.htm",</span><br><span class="line">  "status": 2,</span><br><span class="line">  "fetchTime": NumberLong(1449587050404),</span><br><span class="line">  "fetchInterval": 2592000,</span><br><span class="line">  "retriesSinceFetch": 0,</span><br><span class="line">  "score": 0.0,</span><br><span class="line">  "inlinks": &#123;</span><br><span class="line">    "http://www·cnbeta·com/": ""</span><br><span class="line">  &#125;,</span><br><span class="line">  "markers": &#123;</span><br><span class="line">    "_gnmrk_": "1449586889-28161",</span><br><span class="line">    "_ftcmrk_": "1449586889-28161",</span><br><span class="line">    "dist": "1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "metadata": &#123;</span><br><span class="line">    "_rs_": BinData(0, "AAABzw==")</span><br><span class="line">  &#125;,</span><br><span class="line">  "batchId": "1449586889-28161",</span><br><span class="line">  "baseUrl": "http://www.cnbeta.com/articles/447355.htm",</span><br><span class="line">  "prevFetchTime": NumberLong(1449586888595),</span><br><span class="line">  "protocolStatus": &#123;</span><br><span class="line">    "code": 1,</span><br><span class="line">    "args": [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    "lastModified": NumberLong(0)</span><br><span class="line">  &#125;,</span><br><span class="line">  "content": BinData(0, "XXXXXX网页的内容,太长了,就省略了"),</span><br><span class="line">  "contentType": "application/xhtml+xml",</span><br><span class="line">  "headers": &#123;</span><br><span class="line">    "Vary": "Accept-Encoding",</span><br><span class="line">    "Date": "Tue, 08 Dec 2015 15:04:10 GMT",</span><br><span class="line">    "Last-Modified": "Sun, 06 Dec 2015 02:11:14 GMT",</span><br><span class="line">    "Content-Encoding": "gzip",</span><br><span class="line">    "Content-Type": "text/html",</span><br><span class="line">    "Accept-Ranges": "bytes",</span><br><span class="line">    "Connection": "close",</span><br><span class="line">    "Server": "grid-cache/1.4.4",</span><br><span class="line">    "X-CDNZZ-FCACHE": "EXPIRED"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这就是爬取下来的内容.就可以通过我们进一步处理了.<br> 而这个字段的定义是在<code>$NUTCH_HOME/runtime/local/conf/gora-mongodb-mapping.xml</code>中定义的.</p>
</li>
</ol>
<h2 id="结束语">结束语</h2><p>这样,一个最简单的Nutch的运行环境就搭建成功了.更多的更高级的功能,我们后面再慢慢来试验.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Nutch2-3_安装与部署">Nutch2.3 安装与部署</h1><p><a href="http://nutch.apache.org">Nutch</a>是由JAVA开发的开源的全文检索引擎.不过更多的被用来当成Web爬虫来使用.现在Nutch分为了1.x和2.x两个版本在维护.而这两个版本的最主要的区别在于底层存储的抽象.1.x版本是基于Hadoop架构的,底层存储只能使用HDFS.而2.x版本通过<a href="http://gora.apache.org">Apache Gora</a>对底层存储做了抽象,能访问HBase,MYSQL,MongoDB,Solr,AvroStore等等.</p>
<p>但是从2.X开始,官方就只提供源码的下载了,不再提供编译后的发布版本,因此就需要我们自己去进行编译.</p>]]>
    
    </summary>
    
      <category term="Nutch" scheme="http://sunxiang0918.github.io/tags/Nutch/"/>
    
      <category term="大数据" scheme="http://sunxiang0918.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="爬虫" scheme="http://sunxiang0918.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Linux上运行Swift]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/05/%E5%9C%A8Linux%E4%B8%8A%E8%BF%90%E8%A1%8CSwift/"/>
    <id>http://sunxiang0918.github.io/2015/12/05/在Linux上运行Swift/</id>
    <published>2015-12-05T15:26:26.000Z</published>
    <updated>2015-12-05T16:29:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="在Linux上运行Swift">在Linux上运行Swift</h1><p>盼星星盼月亮,等了半年,终于在12月的头几天,苹果开源了<code>Swift</code>语言.并建立了一个<a href="http://swift.org" target="_blank" rel="external">Swift.org</a>社区以及<a href="http://github.com/apple" target="_blank" rel="external">Github</a>来维护.开源以后,最大的好处当然是有更多的人来参与Swift语言的发展,让Swift语言增加更多的新的特性,更多的开源框架,工作在更多的平台上面.这对于一个开发语言来说无疑是一个很好的消息.而对于我来说,除了在编写代码的时候能更了解Swift某些函数的参数意义和工作的原理(作为一个JAVA Coder,平时如果遇到搞不定的问题或者是不明白的地方,习惯了直接翻它的源码来了解原委的)外,让我基本上抛弃了<code>Python</code>脚本,平时有什么小东西小程序需要写一下的话,现在可以直接写一个Swift文件,然后在命令行直接调用<code>swift xxx.swift</code>或者<code>swiftc -O xxxx.swift</code>即可.</p>
<h2 id="在Linux上安装Swift">在Linux上安装Swift</h2><p>前面废话说了这么多.现在就来看看如何在Linux上安装Swift的运行环境.MACOS上的就不用说了,直接安装一个Xcode就可以了.</p>
<a id="more"></a>
<h3 id="环境">环境</h3><p>目前Swift提供了<code>Ubuntu</code>上编译好了的安装包. 因此需要Ubuntu14.04以上的操作系统.<br>同时,Swift的编译环境还需要<code>clang</code>.这个也是需要安装的.</p>
<ol>
<li><p>由于<code>clang</code>目前才出来,比较的新.因此在<code>cn.archive.ubuntu.com</code>上还没有,需要切换到官方源上去.</p>
<ol>
<li>备份原来的源列表 <code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></li>
<li><p>使用编辑器打开<code>sources.list</code>文件,修改里面的内容为:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://archive.ubuntu.com/ubuntu/ vivid main restricted universe multiverse  </span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ vivid-security main restricted universe multiverse  </span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ vivid-updates main restricted universe multiverse  </span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ vivid-proposed main restricted universe multiverse  </span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ vivid-backports main restricted universe multiverse  </span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu/ vivid main restricted universe multiverse  </span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu/ vivid-security main restricted universe multiverse  </span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu/ vivid-updates main restricted universe multiverse  </span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu/ vivid-proposed main restricted universe multiverse  </span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu/ vivid-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后更新一下源 <code>sudo apt-get update</code></p>
</li>
<li><p>安装<code>clang</code></p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install clang libicu-dev</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>下载,并安装<code>Swift</code></p>
<ol>
<li>在<a href="https://swift.org/download/" target="_blank" rel="external">官方网站</a>上下载与你操作系统对应的安装包.比如我用的<code>Ubuntu 14.10</code>操作系统,那么就下载<a href="https://swift.org/builds/ubuntu1404/swift-2.2-SNAPSHOT-2015-12-01-b/swift-2.2-SNAPSHOT-2015-12-01-b-ubuntu14.04.tar.gz" target="_blank" rel="external">swift-2.2-SNAPSHOT-2015-12-01-b-ubuntu14.04.tar.gz</a></li>
<li><p>下载后,解压到本地目录.由于它都是安排好了目录的.都是<code>/usr</code>下面.因此.只需要拷贝到/usr下面即可.</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -R /swift/usr/ /</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样,Swift的运行环境就算是安装完成了.我们可以输入<code>swift --version</code>来做验证</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@Parallels-Virtual-Platform:~$ swift --versionSwift version <span class="number">2.2</span>-dev (LLVM <span class="number">46</span>be9ff861, Clang <span class="number">4</span>deb154edc, Swift <span class="number">778</span>f82939c)Target: x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h2 id="在命令行中执行一个简单程序">在命令行中执行一个简单程序</h2><p>既然安装完成了运行环境,那么接下来我们就试着编写一个最简单的程序.然后执行.</p>
<ol>
<li>创建一个<code>test.swift</code>文件.</li>
<li>在其中写上</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"Hello Swift!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<ol>
<li>保存文件后,在命令行中执行 <code>swift test.swift</code>.即可得到程序执行的结果.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@Parallels-Virtual-Platform:~$ swift test.swift</span><br><span class="line">Hello Swift!</span><br></pre></td></tr></table></figure>
<ol>
<li>我们也可以把这个文件直接编译成可执行的程序:<code>swift -O test.swift</code>.执行了这个命令后,会在当前目录生成一个<code>test</code>可执行文件. 直接在命令行中执行<code>./test</code>也是可以得到结果的.</li>
</ol>
<p>Swift的命令行程序与其他的语言不同,它不需要一个特殊约定的<code>main</code>函数. 只要你执行的命令的作用于是全局的,那么在就会在执行的时候按顺序的先执行这些全局作用于的语句.相当于它的全局作用域就是一个大的<code>main</code>函数.<br>又由于一个Swift文件中可以写很多的类或方法,不想<code>JAVA</code>一样,一个<code>java</code>文件只能有一个公开的类.因此,对于一个简单的小程序来说,我们完全可以把所有的代码都写在一个<code>swift</code>文件中,然后进行执行,不用考虑什么包依赖等等,非常的方便.</p>
<h2 id="在命令行中执行一个多文件编译的程序">在命令行中执行一个多文件编译的程序</h2><p>当然,除了最最简单的只有1个文件的程序外,更多的程序都是有代码结构的,都是由多个<code>swift</code>文件组成的.<br>在这种情况下,就需要使用<code>swift build</code>命令来 多文件协同编译了.</p>
<ol>
<li><p>这种情况下的swift程序源码需要按照一定的约定来创建.</p>
<ol>
<li>项目的名称即为目录的名称. 比如我现在有个<code>TestProgram</code>的项目,那么就需要创建一个<code>TestProgram</code>的目录.</li>
<li>在这个目录下创建一个<code>Package.swift</code>文件,这个文件是必须的,它用于提供给包管理器进行包依赖的信息.这就类似于JAVA中的<code>package-info.java</code></li>
<li>创建一个<code>Sources</code>文件夹,所有的源码都应该放在这里</li>
<li>在<code>Sources</code>文件夹下,创建一个<code>main.swift</code>文件,这个就是应用的入口文件.</li>
<li><p>最终,项目的结构就是这样的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/TestProgram</span><br><span class="line">/TestProgram/Package.swift</span><br><span class="line">/TestProgram/Sources/main.swift</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>为了体现多文件协同编译,现在再在<code>Sources</code>目录下新增加一个文件<code>Hello.swif</code></p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(a:<span class="params">(name:String)</span></span></span>-&gt;<span class="type">Void</span>) &#123;</span><br><span class="line">		<span class="keyword">let</span> args = <span class="type">Process</span>.arguments</span><br><span class="line">		<span class="keyword">if</span> args.<span class="built_in">count</span> &gt;= <span class="number">2</span>&#123;</span><br><span class="line">			a(name:args[<span class="number">1</span>])</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">"Hello Swift!"</span>)</span><br><span class="line">		&#125;       &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>然后在<code>main.swift</code>中编写:</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello(&#123;name <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"Hello <span class="subst">\(name)</span> on Linux!"</span>)&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>回到项目的根目录<code>/TestProgram</code>.执行<code>swift build</code>编译即可.正确的话它会输出以下信息</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@Parallels-Virtual-Platform:~/TestProject$ swift buildCompiling Swift Module <span class="string">'TestProject'</span> (<span class="number">2</span> sources)Linking Executable:  .build/debug/TestProjectroot@Parallels-Virtual-Platform:~/TestProject$ .build/debug/TestProject</span><br></pre></td></tr></table></figure>
<p> 需要注意的是,<code>swift build</code>会在工程目录下生成一个<code>.build</code>文件夹,里面就是编译后的可执行的文件,默认是使用的<code>debug target</code>. 并且<code>Linux</code>下编译的可执行文件是不能直接在<code>OSX</code>上使用的,反之亦然.</p>
</li>
<li><p>直接调用<code>.build/debug/TestProject</code> 便可执行程序.</p>
</li>
<li><p>第二步的代码中有一句<code>let args = Process.arguments</code>.我们可以通过此函数获取命令行的输入,它肯定是一个大于等于1的数组,第一个元素就是程序自己的名字.后面是用户在命令行中输入的参数,并且不仅仅限于<code>main.swift</code>才能获取,任何的Swift文件中都可以取得这个值.因此,我们刚才的程序也可以这样输入:<code>.build/debug/TestProject SUN</code>.那么程序的<code>args[1]</code>即为<code>SUN</code>.</p>
</li>
<li>由于Swift不需要像<code>JAVA</code>或者<code>OC</code>一样,如果源码在两个源文件中就需要编写一堆无用的<code>import</code>语句,只要在同一个项目中,<code>Swift</code>的不同源文件定义的类或函数都可以直接的调用,只有在跨工程或<code>Framework</code>的时候,才需要<code>import Package</code>.这大大的方便了我们编写项目.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="在Linux上运行Swift">在Linux上运行Swift</h1><p>盼星星盼月亮,等了半年,终于在12月的头几天,苹果开源了<code>Swift</code>语言.并建立了一个<a href="http://swift.org">Swift.org</a>社区以及<a href="http://github.com/apple">Github</a>来维护.开源以后,最大的好处当然是有更多的人来参与Swift语言的发展,让Swift语言增加更多的新的特性,更多的开源框架,工作在更多的平台上面.这对于一个开发语言来说无疑是一个很好的消息.而对于我来说,除了在编写代码的时候能更了解Swift某些函数的参数意义和工作的原理(作为一个JAVA Coder,平时如果遇到搞不定的问题或者是不明白的地方,习惯了直接翻它的源码来了解原委的)外,让我基本上抛弃了<code>Python</code>脚本,平时有什么小东西小程序需要写一下的话,现在可以直接写一个Swift文件,然后在命令行直接调用<code>swift xxx.swift</code>或者<code>swiftc -O xxxx.swift</code>即可.</p>
<h2 id="在Linux上安装Swift">在Linux上安装Swift</h2><p>前面废话说了这么多.现在就来看看如何在Linux上安装Swift的运行环境.MACOS上的就不用说了,直接安装一个Xcode就可以了.</p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://sunxiang0918.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MYSQL支持utf8mb4]]></title>
    <link href="http://sunxiang0918.github.io/2015/12/02/MYSQL%E6%94%AF%E6%8C%81utf8mb4/"/>
    <id>http://sunxiang0918.github.io/2015/12/02/MYSQL支持utf8mb4/</id>
    <published>2015-12-02T14:41:52.000Z</published>
    <updated>2015-12-02T14:59:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="MYSQL支持utf8mb4">MYSQL支持utf8mb4</h1><p>MYSQL默认的utf8字符集采用了3个字节来进行保存.这就存在了一个问题,那就是有部分的UTF8的字符其实是保存不进MYSQL的,比如现在流行的emoji表情,这和以前的认知是不同的.为了避免以后出现问题,找了这方面的信息.推荐如果有保存扩展字符的用户,提前就把MYSQL的字符集给修改了.具体MYSQL的默认utf8支持哪些字符编码,可以参见这个:<a href="http://witmax.cn/unicode-list.html" target="_blank" rel="external">Unicode编码表</a>,前126行就是它支持的,后面的就是不支持的.</p>
<p>发现这个问题其实相当的偶然,在知乎上看到了一个问题<a href="http://www.zhihu.com/question/35901422/answer/64960598" target="_blank" rel="external">为什么知乎不支持non-BMP的汉字？</a>.突然发现了这个问题,一验证果然如此.<br>具体来说就是MYSQL的utf8字符集只使用了3个字节来保存字符.因此UTF8扩展区的字符就无法保存.这个在MYSQL5.5后引入了<code>utf8mb4</code>的字符集来解决这个问题,它使用了4个字节来存储字符,扩展了存储的数量.因此,如果各位是使用的MYSQL5.5以上的版本,推荐在可能存入扩展字符的字段上设置字符集为utf8mb4.虽然这样可能会造成空间的浪费,但是比以后在上线的系统上升级数据库的风险要小的多.</p>
<a id="more"></a>
<h2 id="修改方法">修改方法</h2><h3 id="MYSQL服务器端">MYSQL服务器端</h3><p>只需要修改数据库的配置文件 <code>/etc/my.cnf</code>,增加或修改以下两行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8mb4 </span><br><span class="line">collation_server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>
<p>然后重启数据库即可.<br>对于已有的表,执行:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span></span><br></pre></td></tr></table></figure>
<p>即可.</p>
<h3 id="客户端">客户端</h3><p>由于JDBC的MYSQL驱动现在不支持显示的设置<code>utf8mb4</code>字符集,所以不能在url连接上增加<code>characterEncoding=utf8mb4</code>.<br>那么就只能采取以下的三种方法了(都需要高版本的JDBC驱动):</p>
<ol>
<li>在服务器上设置了<code>character-set-server=utf8mb4</code>后,在客户端url上不显示的设置字符集,它会自动继承服务器的设置</li>
<li>在执行SQL之前,运行<code>set names utf8mb4</code>.例如:<code>connection.prepareStatement(&quot;set names utf8mb4&quot;).executeQuery();</code></li>
<li>设置MYSQL的 init_connect参数,设置<code>set names utf8mb4</code>.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="MYSQL支持utf8mb4">MYSQL支持utf8mb4</h1><p>MYSQL默认的utf8字符集采用了3个字节来进行保存.这就存在了一个问题,那就是有部分的UTF8的字符其实是保存不进MYSQL的,比如现在流行的emoji表情,这和以前的认知是不同的.为了避免以后出现问题,找了这方面的信息.推荐如果有保存扩展字符的用户,提前就把MYSQL的字符集给修改了.具体MYSQL的默认utf8支持哪些字符编码,可以参见这个:<a href="http://witmax.cn/unicode-list.html">Unicode编码表</a>,前126行就是它支持的,后面的就是不支持的.</p>
<p>发现这个问题其实相当的偶然,在知乎上看到了一个问题<a href="http://www.zhihu.com/question/35901422/answer/64960598">为什么知乎不支持non-BMP的汉字？</a>.突然发现了这个问题,一验证果然如此.<br>具体来说就是MYSQL的utf8字符集只使用了3个字节来保存字符.因此UTF8扩展区的字符就无法保存.这个在MYSQL5.5后引入了<code>utf8mb4</code>的字符集来解决这个问题,它使用了4个字节来存储字符,扩展了存储的数量.因此,如果各位是使用的MYSQL5.5以上的版本,推荐在可能存入扩展字符的字段上设置字符集为utf8mb4.虽然这样可能会造成空间的浪费,但是比以后在上线的系统上升级数据库的风险要小的多.</p>]]>
    
    </summary>
    
      <category term="JAVA" scheme="http://sunxiang0918.github.io/tags/JAVA/"/>
    
      <category term="Mysql" scheme="http://sunxiang0918.github.io/tags/Mysql/"/>
    
  </entry>
  
</feed>